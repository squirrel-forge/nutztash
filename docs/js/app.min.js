/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	!function() {
/******/ 		var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });
/******/ 			}
/******/ 			def['default'] = function() { return value; };
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ../../../ui-util/src/es6/Animation/afterPaint.js
/**
 * Run callback after next paint
 * @link https://www.webperf.tips/tip/measuring-paint-time/
 * @author Joe Liccini
 * @param {Function} callback - Callback to run
 * @return {void}
 */
function afterPaint(callback) {
  requestAnimationFrame(function () {
    var undef;
    var messageChannel = new MessageChannel();
    messageChannel.port1.onmessage = callback;
    messageChannel.port2.postMessage(undef);
  });
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Error/Exception.js
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _isNativeFunction(fn) { try { return Function.toString.call(fn).indexOf("[native code]") !== -1; } catch (e) { return typeof fn === "function"; } }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Exception
 * @class
 * @extends Error
 */
var Exception = /*#__PURE__*/function (_Error) {
  /**
   * Constructor
   * @constructor
   * @param {string} message - Exception message
   * @param {null|Error|Exception} previous - Previous error
   */
  function Exception(message) {
    var _this;
    var previous = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    _classCallCheck(this, Exception);
    _this = _callSuper(this, Exception, [message]);

    // Ensure error name
    /**
     * Previous error
     * @public
     * @property
     * @type {null|string|Error}
     */
    _defineProperty(_this, "previous", null);
    /**
     * Add previous to stack
     * @public
     * @property
     * @type {boolean}
     */
    _defineProperty(_this, "previousToStack", true);
    /**
     * Previous error prefix
     * @public
     * @property
     * @type {null|string}
     */
    _defineProperty(_this, "previousPrefix", '> Caused by: ');
    _this.name = _this.constructor.name;

    // Get stacktrace
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(_this, _this.constructor);
    } else {
      _this.stack = new Error(message).stack;
    }

    // Set previous
    _this.previous = previous || null;

    // Update stack with previous
    _this.addPreviousToStack();
    return _this;
  }

  /**
   * Add previous error to stack
   * @public
   * @return {void}
   */
  _inherits(Exception, _Error);
  return _createClass(Exception, [{
    key: "addPreviousToStack",
    value: function addPreviousToStack() {
      // Only if enabled and stack is a string
      if (this.previousToStack) {
        if (typeof this.stack === 'string') {
          // There is a previous error and it should be displayable
          if (this.previous && (this.previous instanceof Error || this.previous.toString || typeof this.previous === 'string')) {
            // Add previous prefix
            this.stack = this.stack + '\n';
            if (this.previousPrefix) this.stack = this.stack + this.previousPrefix;

            // Add the previous stack or error to the current stack
            this.stack = this.stack + (typeof this.previous.stack === 'string' ? this.previous.stack : this.previous);
          }
        } else if (this.previous) {
          // The stack is no string and cannot be modified
          window.console.error(this, 'Caused by', this.previous);
        }
      }
    }
  }]);
}( /*#__PURE__*/_wrapNativeSuper(Error));
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Object/isPojo.js
function isPojo_typeof(o) { "@babel/helpers - typeof"; return isPojo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, isPojo_typeof(o); }
/**
 * Is a plain object
 * @param {Object} obj - Object to test
 * @return {boolean} - True if subject is a plain object
 */
function isPojo_isPojo(obj) {
  if (obj === null || isPojo_typeof(obj) !== 'object') {
    return false;
  }
  return Object.getPrototypeOf(obj) === Object.prototype;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Object/cloneObject.js
function cloneObject_typeof(o) { "@babel/helpers - typeof"; return cloneObject_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, cloneObject_typeof(o); }
/**
 * Requires
 */


/**
 * Clone object or array
 * @param {Object|Array} source - Source to clone
 * @param {boolean} recursive - Recursive mode
 * @returns {Object|Array} - Cloned object or array
 */
function cloneObject_cloneObject(source) {
  var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  recursive = !!recursive;
  var is_array = source instanceof Array;
  var is_plain = isPojo_isPojo(source);
  var cloned = is_array ? [] : {};
  var i;
  if (is_array || is_plain) {
    for (i in source) {
      if (Object.prototype.hasOwnProperty.call(source, i)) {
        if (source[i] === null || cloneObject_typeof(source[i]) !== 'object' || !recursive) {
          cloned[i] = source[i];
        } else {
          cloned[i] = cloneObject_cloneObject(source[i], recursive);
        }
      }
    }
    return cloned;
  }
  return source;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/EventDispatcher.js
function EventDispatcher_typeof(o) { "@babel/helpers - typeof"; return EventDispatcher_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, EventDispatcher_typeof(o); }
var _EventDispatcher;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function EventDispatcher_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, EventDispatcher_toPropertyKey(descriptor.key), descriptor); } }
function EventDispatcher_createClass(Constructor, protoProps, staticProps) { if (protoProps) EventDispatcher_defineProperties(Constructor.prototype, protoProps); if (staticProps) EventDispatcher_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function EventDispatcher_toPropertyKey(t) { var i = EventDispatcher_toPrimitive(t, "string"); return "symbol" == EventDispatcher_typeof(i) ? i : i + ""; }
function EventDispatcher_toPrimitive(t, r) { if ("object" != EventDispatcher_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != EventDispatcher_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function EventDispatcher_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function EventDispatcher_callSuper(t, o, e) { return o = EventDispatcher_getPrototypeOf(o), EventDispatcher_possibleConstructorReturn(t, EventDispatcher_isNativeReflectConstruct() ? Reflect.construct(o, e || [], EventDispatcher_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function EventDispatcher_possibleConstructorReturn(self, call) { if (call && (EventDispatcher_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return EventDispatcher_assertThisInitialized(self); }
function EventDispatcher_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function EventDispatcher_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (EventDispatcher_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function EventDispatcher_getPrototypeOf(o) { EventDispatcher_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return EventDispatcher_getPrototypeOf(o); }
function EventDispatcher_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) EventDispatcher_setPrototypeOf(subClass, superClass); }
function EventDispatcher_setPrototypeOf(o, p) { EventDispatcher_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return EventDispatcher_setPrototypeOf(o, p); }
/**
 * Requires
 */




/**
 * Event dispatcher exception
 * @class
 * @extends Exception
 */
var EventDispatcherException = /*#__PURE__*/function (_Exception) {
  function EventDispatcherException() {
    EventDispatcher_classCallCheck(this, EventDispatcherException);
    return EventDispatcher_callSuper(this, EventDispatcherException, arguments);
  }
  EventDispatcher_inherits(EventDispatcherException, _Exception);
  return EventDispatcher_createClass(EventDispatcherException);
}(Exception);
/**
 * @typedef {Object} EventDispatcherInterface
 * @property {Function} addEventListener - Add
 * @property {Function} removeEventListener - Remove
 * @property {Function} dispatchEvent - Dispatch
 */
/**
 * Event dispatcher
 * @abstract
 * @class
 */
var _debug = /*#__PURE__*/new WeakMap();
var _target = /*#__PURE__*/new WeakMap();
var _parent = /*#__PURE__*/new WeakMap();
var _simulated = /*#__PURE__*/new WeakMap();
var _EventDispatcher_brand = /*#__PURE__*/new WeakSet();
var EventDispatcher_EventDispatcher = /*#__PURE__*/function () {
  /**
   * Constructor
   * @constructor
   * @param {null|HTMLElement|EventDispatcherInterface|Object} element - The target element
   * @param {null|EventDispatcher|EventDispatcherInterface} parent - Parent event dispatcher, only used for simulated events
   * @param {null|console} debug - Console or alike object to show debugging
   */
  function EventDispatcher() {
    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    EventDispatcher_classCallCheck(this, EventDispatcher);
    /**
     * Get event data
     * @private
     * @param {null|Object} data - Data object
     * @return {Object} - Updated data object
     */
    _classPrivateMethodInitSpec(this, _EventDispatcher_brand);
    /**
     * Debug object
     * @private
     * @property
     * @type {null|console|Object}
     */
    _classPrivateFieldInitSpec(this, _debug, null);
    /**
     * Event target
     * @private
     * @type {null|HTMLElement|EventDispatcher}
     */
    _classPrivateFieldInitSpec(this, _target, null);
    /**
     * Parent if no target is set
     * @private
     * @type {null|HTMLElement|EventDispatcher}
     */
    _classPrivateFieldInitSpec(this, _parent, null);
    /**
     * Simulated events handlers map
     * @private
     * @type {Object}
     */
    _classPrivateFieldInitSpec(this, _simulated, {});
    // Require element or null
    if (!(element === null || this.constructor.isCompat(element))) {
      throw new EventDispatcherException('Argument element must be null or a compatible instance');
    }

    // Require parent or null
    if (!(parent === null || this.constructor.isCompat(parent))) {
      throw new EventDispatcherException('Argument parent must be null or a compatible instance');
    }

    // Debugger instance
    _classPrivateFieldSet(_debug, this, debug);

    // Element reference
    _classPrivateFieldSet(_target, this, element);
    _classPrivateFieldSet(_parent, this, parent);

    // Construction info
    if (_classPrivateFieldGet(_debug, this)) {
      _classPrivateFieldGet(_debug, this).log(this.constructor.name + '::constructed', this);
    }
  }

  /**
   * Debug getter
   * @public
   * @return {null|console|Object} - Debug reference
   */
  return EventDispatcher_createClass(EventDispatcher, [{
    key: "debug",
    get: function get() {
      return _classPrivateFieldGet(_debug, this);
    }

    /**
     * Target getter
     * @public
     * @return {null|HTMLElement|EventDispatcher|EventDispatcherInterface} - Target reference
     */
  }, {
    key: "target",
    get: function get() {
      return _classPrivateFieldGet(_target, this);
    }

    /**
     * Parent getter
     * @public
     * @return {null|HTMLElement|EventDispatcher|EventDispatcherInterface} - Parent reference
     */
  }, {
    key: "parent",
    get: function get() {
      return _classPrivateFieldGet(_parent, this);
    }

    /**
     * Override parent instance
     * @public
     * @param {null|HTMLElement|EventDispatcher|EventDispatcherInterface} parent - Parent reference
     * @return {void}
     */
  }, {
    key: "overrideParent",
    value: function overrideParent(parent) {
      _classPrivateFieldSet(_parent, this, parent);
    }

    /**
     * Check if simulated
     * @public
     * @return {boolean} - True if no target element is set
     */
  }, {
    key: "isSimulated",
    get: function get() {
      return _classPrivateFieldGet(_target, this) === null;
    }
  }, {
    key: "dispatchEvent",
    value:
    /**
     * Dispatch event
     * @public
     * @param {string} name - Event name
     * @param {null|object} detail - Event data
     * @param {boolean} bubbles - Allow event to bubble
     * @param {boolean} cancelable - Allow event to be cancelled
     * @return {boolean} - False if cancelled, true otherwise
     */
    function dispatchEvent(name) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var bubbles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var cancelable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      detail = _assertClassBrand(_EventDispatcher_brand, this, _parseEventData).call(this, detail);

      // Debug info
      if (_classPrivateFieldGet(_debug, this)) {
        _classPrivateFieldGet(_debug, this).groupCollapsed(this.constructor.name + '::dispatchEvent [ ' + name + ' ]');
        _classPrivateFieldGet(_debug, this).log('element >', _classPrivateFieldGet(_target, this) || this);
        _classPrivateFieldGet(_debug, this).log('data >', detail);
        _classPrivateFieldGet(_debug, this).groupEnd();
      }

      // Create event
      var event = new CustomEvent(name, {
        bubbles: bubbles,
        cancelable: cancelable,
        detail: detail
      });

      // Simulated event
      if (_classPrivateFieldGet(_target, this) === null) {
        _assertClassBrand(_EventDispatcher_brand, this, _runSimulated).call(this, name, event, detail);
      } else {
        // Actual event
        _classPrivateFieldGet(_target, this).dispatchEvent(event);
      }
      return !event.defaultPrevented;
    }

    /**
     * Add simulated listener
     * @private
     * @param {string} name - Event name
     * @param {Function} callback - Event callback
     * @param {boolean|Object} useCaptureOptions - Capture style or options Object
     * @return {void}
     */
  }, {
    key: "hasSimulated",
    value:
    /**
     * Check name for existing handlers
     * @public
     * @param {string} name - Event name
     * @return {boolean} - True if event has listeners
     */
    function hasSimulated(name) {
      return _classPrivateFieldGet(_simulated, this)[name] && _classPrivateFieldGet(_simulated, this)[name].length;
    }

    /**
     * Register event listener
     * @public
     * @param {string} name - Event name
     * @param {Function} callback - Callback to register for event
     * @param {boolean|Object} useCaptureOptions - Capture style or options Object
     * @return {void}
     */
  }, {
    key: "addEventListener",
    value: function addEventListener(name, callback) {
      var useCaptureOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (!isPojo_isPojo(useCaptureOptions)) {
        useCaptureOptions = {
          once: false,
          capture: useCaptureOptions,
          passive: false
        };
      }
      if (typeof callback !== 'function') {
        throw new EventDispatcherException('Argument callback for event "' + name + '" must be a function');
      }

      // Simulated event
      if (_classPrivateFieldGet(_target, this) === null) {
        _assertClassBrand(_EventDispatcher_brand, this, _addSimulatedListener).call(this, name, callback, useCaptureOptions);
      } else {
        // Actual event
        _classPrivateFieldGet(_target, this).addEventListener(name, callback, useCaptureOptions);
      }

      // Notify register
      if (_classPrivateFieldGet(_debug, this)) {
        _classPrivateFieldGet(_debug, this).groupCollapsed(this.constructor.name + '::addEventListener [ ' + name + ' ]');
        _classPrivateFieldGet(_debug, this).log('element >', _classPrivateFieldGet(_target, this));
        _classPrivateFieldGet(_debug, this).log('callback >', callback);
        _classPrivateFieldGet(_debug, this).groupEnd();
      }
    }

    /**
     * Remove simulated listener
     * @private
     * @param {string} name - Event name
     * @param {Function} callback - Event callback
     * @return {void}
     */
  }, {
    key: "removeEventListener",
    value:
    /**
     * Remove event listener
     * @public
     * @param {string} name - Event name
     * @param {function} callback - Callback to deregister from event
     * @param {boolean|Object} useCaptureOptions - Capture style or options Object
     * @return {void}
     */
    function removeEventListener(name, callback) {
      var useCaptureOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      // Simulated event
      if (_classPrivateFieldGet(_target, this) === null) {
        _assertClassBrand(_EventDispatcher_brand, this, _removeSimulatedListener).call(this, name, callback);
      } else {
        // Actual event
        _classPrivateFieldGet(_target, this).removeEventListener(name, callback, useCaptureOptions);
      }
    }

    /**
     * Register an array of event listeners
     * @public
     * @param {Array<Array>} events - Array of addEventListener argument arrays
     * @return {void}
     */
  }, {
    key: "addEventList",
    value: function addEventList(events) {
      for (var i = 0; i < events.length; i++) {
        this.addEventListener.apply(this, _toConsumableArray(events[i]));
      }
    }
  }], [{
    key: "isCompat",
    value:
    /**
     * Check for compatibility
     * @param {*} obj - EventDispatcher target or parent
     * @return {boolean} - Is compatible
     */
    function isCompat(obj) {
      return obj.addEventListener && obj.removeEventListener && obj.dispatchEvent;
    }
  }]);
}();
_EventDispatcher = EventDispatcher_EventDispatcher;
function _parseEventData(data) {
  data = data || {
    target: this
  };
  if (!data.target) data.target = this;
  if (!data.current) data.current = this;
  return data;
}
/**
 * Run simulated event
 * @private
 * @param {string} name - Event name
 * @param {CustomEvent} event - Custom event
 * @param {Object} data - Event data
 * @return {void}
 */
function _runSimulated(name, event, data) {
  if (_classPrivateFieldGet(_simulated, this)[name] && _classPrivateFieldGet(_simulated, this)[name].length) {
    // Clone handlers at runtime, any listeners bound from within running listeners
    // will not run until the next event dispatch
    var handlers = _toConsumableArray(_classPrivateFieldGet(_simulated, this)[name]);
    for (var i = 0; i < handlers.length; i++) {
      // Skip any handlers that are unbound at runtime if they haven't run yet
      // This allows for unbind within running event listeners
      if (!_classPrivateFieldGet(_simulated, this)[name].includes(handlers[i])) continue;

      // Run handler
      try {
        handlers[i].apply(this, [event]);
      } catch (e) {
        window.console.error(new EventDispatcherException('Simulated event error', e));
      }

      // Remove handler if required
      if (handlers[i] && handlers[i].__EventDispatcherOnce === true) {
        _assertClassBrand(_EventDispatcher_brand, this, _removeSimulatedListener).call(this, name, handlers[i]);
      }

      // Break out of execution chain
      // event.stopImmediatePropagation() was called
      if (event.cancelBubble) {
        if (_classPrivateFieldGet(_debug, this)) {
          _classPrivateFieldGet(_debug, this).log(this.constructor.name + '::dispatchEvent simulated [ ' + name + ' ] broke after', i);
        }
        break;
      }
    }
  }

  // Dispatch to parent
  if (_classPrivateFieldGet(_parent, this) && event.bubbles && !event.cancelBubble) {
    // Notify bubble
    if (_classPrivateFieldGet(_debug, this)) {
      _classPrivateFieldGet(_debug, this).log(this.constructor.name + '::dispatchEvent bubble [ ' + name + ' ] to', _classPrivateFieldGet(_parent, this));
    }

    // Bubble event to parent
    if (_classPrivateFieldGet(_parent, this) instanceof _EventDispatcher) {
      var cloned = cloneObject_cloneObject(data);
      cloned.current = _classPrivateFieldGet(_parent, this);
      _classPrivateFieldGet(_parent, this).dispatchEvent(name, cloned);
    } else {
      _classPrivateFieldGet(_parent, this).dispatchEvent(event);
    }
  }
}
function _addSimulatedListener(name, callback, useCaptureOptions) {
  if (!_classPrivateFieldGet(_simulated, this)[name]) {
    _classPrivateFieldGet(_simulated, this)[name] = [];
  }
  _classPrivateFieldGet(_simulated, this)[name].push(callback);

  // Support for the once option
  if (isPojo_isPojo(useCaptureOptions) && useCaptureOptions.once === true) {
    _classPrivateFieldGet(_simulated, this)[name][_classPrivateFieldGet(_simulated, this)[name].length - 1].__EventDispatcherOnce = true;
  }
}
function _removeSimulatedListener(name, callback) {
  if (_classPrivateFieldGet(_simulated, this)[name]) {
    for (var i = 0; i < _classPrivateFieldGet(_simulated, this)[name].length; i++) {
      if (_classPrivateFieldGet(_simulated, this)[name][i] === callback) {
        _classPrivateFieldGet(_simulated, this)[name].splice(i, 1);
      }
    }
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/docReady.js
/**
 * Run callback on document ready
 * @param {Function} callback - Function to execute on ready or right away
 * @return {void}
 */
function docReady(callback) {
  var d = document;
  if (d.readyState === 'complete' || d.readyState !== 'loading' && !d.documentElement.doScroll) {
    callback();
  } else {
    d.addEventListener('DOMContentLoaded', function () {
      callback();
    });
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Animation/scrollComplete.js
/**
 * Run callback after scroll complete
 * @param {Function} callback - Complete callback
 * @param {number} call_delay - Internal check/call delay
 * @param {null|Object} context - Context to bind events, default: window
 * @return {void}
 */
function scrollComplete(callback) {
  var call_delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
  var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  // Require context
  if (!context) context = window;

  // Check callback
  if (typeof callback !== 'function') {
    throw new Error('scrollComplete() Argument callback must be a Function');
  }

  // Local timeout reference
  var timer;

  // Event options
  var options = {
    passive: true
  };

  /**
   * Internal complete handler
   * @private
   * @return {void}
   */
  var _scroll_complete = function _scroll_complete() {
    window.clearTimeout(timer);
    timer = window.setTimeout(function () {
      // Remove listener, it's no longer needed since we have completed
      context.removeEventListener('scroll', _scroll_complete, options);

      // Attempt to run callback and catch/notify errors
      try {
        callback();
      } catch (e) {
        window.console.error(e);
        throw new Error('scrollComplete() Argument callback caused an error');
      }
    }, call_delay);
  };

  // Bind to scroll event
  context.addEventListener('scroll', _scroll_complete, options);
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Animation/scrollTo.js
/**
 * Scroll to element with offset
 * @param {HTMLElement} element - Target element
 * @param {null|HTMLElement} context - Scroll context
 * @param {number|HTMLElement|Function} offset - Offset in pixels or HTMLElement.height
 * @param {string} behavior - Scroll behaviour
 * @param {number} minDiff - Minimum scroll difference required
 * @return {void}
 */
function scrollTo_scrollTo(element) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'smooth';
  var minDiff = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 3;
  if (!context) context = document.documentElement;
  if (offset instanceof HTMLElement) {
    offset = offset.getBoundingClientRect().height;
  } else if (typeof offset === 'function') {
    offset = offset(element);
  }
  if (typeof offset !== 'number' || Number.isNaN(offset)) {
    throw new Error('scrollTo() Argument offset must be a Number, HTMLElement or Function returning a Number');
  }
  var top = context.scrollTop + element.getBoundingClientRect().top - offset;
  if (Math.abs(context.scrollTop - top) >= minDiff) {
    if (context === document.documentElement) {
      window.scrollTo({
        top: top,
        behavior: behavior
      });
    } else {
      top -= context.getBoundingClientRect().top;
      context.scrollTo({
        top: top,
        behavior: behavior
      });
    }
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Array/mergeArray.js
/**
 * Requires
 */


/**
 * Merge 2 or more arrays and return new array
 * @param {boolean} unique - Only unique values, optional, default : true
 * @param {boolean} clone - Clone values, optional, default : false
 * @param {Array} args - Any number of arrays to merge
 * @return {Array} - Merged array
 */
function mergeArray() {
  var merged = [];
  var argsset = 0,
    unique = true,
    clone = false;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  for (var i = 0; i < args.length; i++) {
    if (args[i] instanceof Array) {
      args[i].forEach(function (value) {
        if (!unique || unique && !merged.includes(value)) {
          merged.push(clone ? cloneObject_cloneObject(value) : value);
        }
      });

      // Parse first three non array arguments as booleans
    } else if (argsset < 2) {
      if (argsset === 0) {
        unique = !!args[i];
      } else if (argsset === 1) {
        clone = !!args[i];
      }
      argsset++;
    }
  }
  return merged;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Object/mergeObject.js
function mergeObject_typeof(o) { "@babel/helpers - typeof"; return mergeObject_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, mergeObject_typeof(o); }
/**
 * Requires
 */




/**
 * Merge objects
 * @param {Object} target - Base object
 * @param {Object} changes - Changes object
 * @param {boolean} extend - Extend the base object
 * @param {boolean} recursive - Recursivly merge
 * @param {boolean} clone_array - Clone array values
 * @param {boolean} no_array_merge - Do not merge arrays
 * @return {Object} - Merged object
 */
function mergeObject_mergeObject(target, changes) {
  var extend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var recursive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var clone_array = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var no_array_merge = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
  extend = !!extend;
  recursive = !!recursive;
  clone_array = !!clone_array;
  no_array_merge = !!no_array_merge;
  var i, to_target, to_changes, array_target, array_changes, plain_target, plain_changes;
  for (i in changes) {
    // Update value
    if (Object.prototype.hasOwnProperty.call(target, i) && Object.prototype.hasOwnProperty.call(changes, i)) {
      to_target = mergeObject_typeof(target[i]);
      to_changes = mergeObject_typeof(changes[i]);
      array_target = target[i] instanceof Array;
      array_changes = changes[i] instanceof Array;
      plain_target = isPojo_isPojo(target[i]);
      plain_changes = isPojo_isPojo(changes[i]);
      switch (to_target + '_' + to_changes) {
        case 'object_object':
          if (recursive) {
            if (!no_array_merge && array_target && array_changes) {
              // Array merging
              target[i] = mergeArray(true, clone_array, target[i], changes[i]);
            } else if (plain_target && plain_changes) {
              // Plain object recursive
              target[i] = mergeObject_mergeObject(target[i], changes[i], extend, recursive, clone_array, no_array_merge);
            } else {
              // Clone object
              target[i] = cloneObject_cloneObject(changes[i], true);
            }
          } else {
            // No instance type checking
            target[i] = changes[i];
          }
          break;
        default:
          // Replace if extend, null or both same type
          if (extend || target[i] === null || changes[i] === null || to_target === to_changes) {
            target[i] = changes[i];
          }
      }

      // Extend value
    } else if (extend && typeof target[i] === 'undefined' && Object.prototype.hasOwnProperty.call(changes, i)) {
      target[i] = cloneObject_cloneObject(changes[i], true);
    }
  }
  return target;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/trimChar.js
/**
 * Trim custom character
 * @param {string} str - String to trim
 * @param {string} charToRemove - Char to remove
 * @return {string} - Trimmed char
 */
function trimChar(str, charToRemove) {
  while (str.charAt(0) === charToRemove) {
    str = str.substring(1);
  }
  while (str.charAt(str.length - 1) === charToRemove) {
    str = str.substring(0, str.length - 1);
  }
  return str;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/normalizePath.js
/**
 * Requires
 */


/**
 * Normalize path string
 * @param {string} path - Path to normalize
 * @param {string} separator - Path separator
 * @return {string} - normalized path
 */
function normalizePath(path) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';
  return trimChar(path, separator);
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Animation/Scroller.js
function Scroller_typeof(o) { "@babel/helpers - typeof"; return Scroller_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Scroller_typeof(o); }
function Scroller_toConsumableArray(arr) { return Scroller_arrayWithoutHoles(arr) || Scroller_iterableToArray(arr) || Scroller_unsupportedIterableToArray(arr) || Scroller_nonIterableSpread(); }
function Scroller_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Scroller_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Scroller_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Scroller_arrayLikeToArray(o, minLen); }
function Scroller_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Scroller_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Scroller_arrayLikeToArray(arr); }
function Scroller_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Scroller_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Scroller_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Scroller_toPropertyKey(descriptor.key), descriptor); } }
function Scroller_createClass(Constructor, protoProps, staticProps) { if (protoProps) Scroller_defineProperties(Constructor.prototype, protoProps); if (staticProps) Scroller_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Scroller_callSuper(t, o, e) { return o = Scroller_getPrototypeOf(o), Scroller_possibleConstructorReturn(t, Scroller_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Scroller_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Scroller_possibleConstructorReturn(self, call) { if (call && (Scroller_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Scroller_assertThisInitialized(self); }
function Scroller_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Scroller_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Scroller_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Scroller_getPrototypeOf(o) { Scroller_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Scroller_getPrototypeOf(o); }
function Scroller_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Scroller_setPrototypeOf(subClass, superClass); }
function Scroller_setPrototypeOf(o, p) { Scroller_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Scroller_setPrototypeOf(o, p); }
function Scroller_classPrivateMethodInitSpec(obj, privateSet) { Scroller_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function Scroller_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Scroller_defineProperty(obj, key, value) { key = Scroller_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Scroller_toPropertyKey(t) { var i = Scroller_toPrimitive(t, "string"); return "symbol" == Scroller_typeof(i) ? i : i + ""; }
function Scroller_toPrimitive(t, r) { if ("object" != Scroller_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Scroller_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Scroller_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */








/**
 * @typedef {Object} ScrollerOptions
 * @property {number|HTMLElement|Function|Array} offset - Offset pixels, element, Function or Array of arguments, default: null
 * @property {boolean} bind - Bind scrollTo links, default: true
 * @property {document.body|HTMLElement} context - Context to select scrollTo links from, default: document.body
 * @property {string} selector - Scroll to link selector, default: [href^="#"]
 * @property {null|document.documentElement|HTMLElement} scrollContext - Context to scroll
 * @property {boolean} autoTop - Scroll to top when using only # or #top without an actual element target
 * @property {boolean} capture - Capture initial scroll, default: true
 * @property {number|'ready'|Array} initial - Initial scroll delay after capture
 * @property {null|Function} complete - Complete callback for local scrollTo
 */

/**
 * Scroller
 * @class
 * @extends EventDispatcher
 */
var _Scroller_brand = /*#__PURE__*/new WeakSet();
var Scroller = /*#__PURE__*/function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {Object|ScrollerOptions} options - Scroller options
   * @param {null|console|Object} debug - Debug object
   */
  function Scroller() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    Scroller_classCallCheck(this, Scroller);
    _this = Scroller_callSuper(this, Scroller, [window, null, debug]);

    // Set default config
    /**
     * Event scroll to click
     * @private
     * @param {Event} event - Click event
     * @return {void}
     */
    Scroller_classPrivateMethodInitSpec(_this, _Scroller_brand);
    /**
     * Config
     * @public
     * @property
     * @type {null|Object|ScrollerOptions}
     */
    Scroller_defineProperty(_this, "config", null);
    /**
     * Initial scroll target
     * @public
     * @property
     * @type {null|HTMLElement}
     */
    Scroller_defineProperty(_this, "initial", null);
    _this.config = {
      offset: 0,
      bind: true,
      context: document.body,
      selector: '[href^="#"], [href*="#"]',
      scrollContext: null,
      autoTop: false,
      capture: true,
      initial: 1000,
      complete: null
    };

    // Update config
    if (isPojo_isPojo(options)) {
      mergeObject_mergeObject(_this.config, options);
    }

    // Capture and bind
    if (_this.config.capture) Scroller_assertClassBrand(_Scroller_brand, _this, _capture).call(_this);
    if (_this.config.bind) _this.bind();
    return _this;
  }

  /**
   * Scroll to wrapper
   * @public
   * @param {HTMLElement} element - Target element
   * @param {null|Function} complete - Complete callback
   * @param {number|HTMLElement|Function|Array} offset - Offset
   * @param {null|document.documentElement|HTMLElement} context - Scroll context
   * @return {void}
   */
  Scroller_inherits(Scroller, _EventDispatcher);
  return Scroller_createClass(Scroller, [{
    key: "scrollTo",
    value: function scrollTo(element, complete) {
      var _this2 = this;
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var params = offset !== null && offset !== void 0 ? offset : this.config.offset;
      if (!(params instanceof Array)) params = [params];
      params.unshift(context !== null && context !== void 0 ? context : this.config.scrollContext);
      params.unshift(element);
      if (typeof complete === 'undefined') complete = this.config.complete;
      var not_cancelled = this.dispatchEvent('scroll.before', {
        scrollTarget: element,
        params: params
      }, true, true);
      if (not_cancelled) {
        scrollComplete(function () {
          _this2.dispatchEvent('scroll.after', {
            scrollTarget: element
          });
          if (typeof complete === 'function') complete(element);
        });
        scrollTo_scrollTo.apply(void 0, Scroller_toConsumableArray(params));
      }
    }
  }, {
    key: "bind",
    value:
    /**
     * Bind scroll to events
     * @public
     * @param {null|document.body|HTMLElement} context - Context to select scrollTo links from, default: document.body
     * @param {null|string} selector - Scroll to link selector, default: [href^="#"]
     * @return {void}
     */
    function bind() {
      var _this3 = this;
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      // Get config defaults
      context = context || this.config.context;
      selector = selector || this.config.selector;

      // Find links
      var links = this.config.context.querySelectorAll(selector);
      if (!links.length && this.debug) {
        this.debug.warn(this.constructor.name + '::bind No scrollTo links found in context:', context);
      }

      // Bind all unbound links
      for (var i = 0; i < links.length; i++) {
        if (!links[i].hasAttribute('data-scrollto')) {
          links[i].addEventListener('click', function (event) {
            Scroller_assertClassBrand(_Scroller_brand, _this3, _event_scrollToClick).call(_this3, event);
          });
          links[i].setAttribute('data-scrollto', 'true');
        }
      }
    }

    /**
     * Capture hash scroll
     * @private
     * @return {void}
     */
  }], [{
    key: "getUrlWithHash",
    value:
    /**
     * Get url with new hash value
     * @public
     * @static
     * @param {string} hash - New hash string excluding #
     * @param {null|string} url - Custom url, default uses location.href
     * @return {string} - Updated href string
     */
    function getUrlWithHash(hash) {
      var url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      return (url || window.location.href).split('#')[0] + '#' + hash;
    }
  }]);
}(EventDispatcher_EventDispatcher);
function _event_scrollToClick(event) {
  // Check if action is disabled
  if (event.currentTarget.getAttribute('data-scrollto') !== 'true') {
    return;
  }

  // Find the target id
  var id = null;
  var href = event.currentTarget.getAttribute('href');
  var hash = href.indexOf('#');
  if (hash === 0) {
    id = href.substring(1);
  } else if (hash > 0) {
    var parts = href.split('#');
    if (normalizePath(location.pathname) === normalizePath(parts[0])) id = parts[1] || '';
  }

  // Find the target
  var target = document.getElementById(id);
  if (this.config.autoTop && !target && (id === '' || id === 'top')) {
    target = document.body;
  }

  // Scroll to target or warn in debug mode
  if (target) {
    this.scrollTo(target);
    event.preventDefault();
  } else if (this.debug) {
    this.debug.warn(this.constructor.name + '::event_scrollToClick No valid target for: ', id, event.currentTarget);
  }
}
function _capture() {
  var _this4 = this;
  var hash = window.location.hash;

  // Catch hash and prevent native scroll, to allow initial smooth scroll
  if (hash && hash.length > 1) {
    // Only update if an actual target is found
    // TODO: and the target must be visible
    this.initial = document.getElementById(hash.substring(1));
    if (this.initial) {
      history.replaceState(null, document.title, this.constructor.getUrlWithHash('s2:' + hash.substring(1)));
    }
  }

  // Scroll when ready
  if (this.config.initial === 'ready') {
    docReady(function () {
      Scroller_assertClassBrand(_Scroller_brand, _this4, _initial_scroll).call(_this4, hash);
    });
  } else if (this.config.initial instanceof Array) {
    Scroller_assertClassBrand(_Scroller_brand, this, _initial_bind_custom).call(this, Scroller_toConsumableArray(this.config.initial));
  } else if (typeof this.config.initial === 'number') {
    // Delayed initial scroll
    window.setTimeout(function () {
      Scroller_assertClassBrand(_Scroller_brand, _this4, _initial_scroll).call(_this4, hash);
    }, this.config.initial);
  } else {
    // Instant scroll
    Scroller_assertClassBrand(_Scroller_brand, this, _initial_scroll).call(this, hash);
  }
}
/**
 * Bind custom initial event
 * @private
 * @param {string} hash - Hash reference
 * @param {Array} params - Arguments
 * @return {void}
 */
function _initial_bind_custom(hash, params) {
  var _this5 = this;
  // Get event target
  var target = params.shift();

  // Verify options
  if (typeof target.addEventListener !== 'function') {
    throw new Error(this.constructor.name + '::capture() First initial argument must be an event target');
  }
  if (typeof params[0] !== 'string' || !params[0].length) {
    throw new Error(this.constructor.name + '::capture() Second initial argument must be an event name');
  }
  if (typeof params[1] !== 'function') {
    throw new Error(this.constructor.name + '::capture() Thrid initial argument must be an event handler');
  }

  // Wrap callback
  var callback = params[1];
  params[1] = function (event) {
    callback(event, hash, function () {
      Scroller_assertClassBrand(_Scroller_brand, _this5, _initial_complete).call(_this5, hash);
    });
  };

  // By default add once option
  if (typeof params[2] === 'undefined') {
    params[2] = {
      once: true
    };
  }
  target.addEventListener.apply(target, Scroller_toConsumableArray(params));
}
/**
 * Scroll to initial element and reset hash
 * @private
 * @param {string} hash - Hash to reset to
 * @return {void}
 */
function _initial_scroll(hash) {
  var _this6 = this;
  if (this.initial instanceof HTMLElement) {
    // Scroll to initial target and restore hash after scroll complete
    this.scrollTo(this.initial, function () {
      Scroller_assertClassBrand(_Scroller_brand, _this6, _initial_complete).call(_this6, hash);
    });
  }
}
/**
 * Reset hash
 * @private
 * @param {string} hash - Hash to reset to
 * @return {void}
 */
function _initial_complete(hash) {
  history.replaceState(null, document.title, this.constructor.getUrlWithHash(hash.substring(1)));
  this.dispatchEvent('scroll.initial.complete', {
    initial: this.initial
  });
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/strand.js
/**
 * Generate a random string
 * @param {boolean} entropy - True for higher entropy
 * @return {string} - A random string
 */
function strand_strand() {
  var entropy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var time = !entropy ? '' : '-' + (performance.now() + '').replace(/\./g, '-');
  return Math.random().toString(36).substring(2, 12) + time;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Data/LStorage.js
function LStorage_typeof(o) { "@babel/helpers - typeof"; return LStorage_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, LStorage_typeof(o); }
function LStorage_classPrivateFieldInitSpec(obj, privateMap, value) { LStorage_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function LStorage_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function LStorage_classPrivateFieldGet(s, a) { return s.get(LStorage_assertClassBrand(s, a)); }
function LStorage_classPrivateFieldSet(s, a, r) { return s.set(LStorage_assertClassBrand(s, a), r), r; }
function LStorage_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function LStorage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, LStorage_toPropertyKey(descriptor.key), descriptor); } }
function LStorage_createClass(Constructor, protoProps, staticProps) { if (protoProps) LStorage_defineProperties(Constructor.prototype, protoProps); if (staticProps) LStorage_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function LStorage_toPropertyKey(t) { var i = LStorage_toPrimitive(t, "string"); return "symbol" == LStorage_typeof(i) ? i : i + ""; }
function LStorage_toPrimitive(t, r) { if ("object" != LStorage_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != LStorage_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function LStorage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function LStorage_callSuper(t, o, e) { return o = LStorage_getPrototypeOf(o), LStorage_possibleConstructorReturn(t, LStorage_isNativeReflectConstruct() ? Reflect.construct(o, e || [], LStorage_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function LStorage_possibleConstructorReturn(self, call) { if (call && (LStorage_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return LStorage_assertThisInitialized(self); }
function LStorage_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function LStorage_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (LStorage_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function LStorage_getPrototypeOf(o) { LStorage_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return LStorage_getPrototypeOf(o); }
function LStorage_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) LStorage_setPrototypeOf(subClass, superClass); }
function LStorage_setPrototypeOf(o, p) { LStorage_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return LStorage_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Local storage exception
 * @class
 * @extends Exception
 */
var LStorageException = /*#__PURE__*/function (_Exception) {
  function LStorageException() {
    LStorage_classCallCheck(this, LStorageException);
    return LStorage_callSuper(this, LStorageException, arguments);
  }
  LStorage_inherits(LStorageException, _Exception);
  return LStorage_createClass(LStorageException);
}(Exception);
/**
 * Local storage
 * @class
 */
var _temp = /*#__PURE__*/new WeakMap();
var _available = /*#__PURE__*/new WeakMap();
var _prefix = /*#__PURE__*/new WeakMap();
var LStorage = /*#__PURE__*/function () {
  function LStorage() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var temp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    LStorage_classCallCheck(this, LStorage);
    /**
     * Temp storage
     * @private
     * @type {Object}
     */
    LStorage_classPrivateFieldInitSpec(this, _temp, void 0);
    /**
     * Storage available
     * @private
     * @type {boolean}
     */
    LStorage_classPrivateFieldInitSpec(this, _available, void 0);
    /**
     * Key prefix
     * @private
     * @type {string}
     */
    LStorage_classPrivateFieldInitSpec(this, _prefix, void 0);
    if (typeof prefix !== 'string') throw new LStorageException("First argument prefix, must be of type string");
    LStorage_classPrivateFieldSet(_prefix, this, prefix);
    LStorage_classPrivateFieldSet(_temp, this, temp);
    LStorage_classPrivateFieldSet(_available, this, LStorage.available());
  }
  return LStorage_createClass(LStorage, [{
    key: "prefix",
    get: function get() {
      return LStorage_classPrivateFieldGet(_prefix, this);
    },
    set: function set(value) {
      if (typeof value !== 'string') throw new LStorageException("Property prefix, must be of type string");
      LStorage_classPrivateFieldSet(_prefix, this, value);
    }
  }, {
    key: "get",
    value: function get(key) {
      var _classPrivateFieldGet2;
      if (typeof key !== 'string') throw new LStorageException("First argument key, must be of type string");
      var ident = "".concat(LStorage_classPrivateFieldGet(_prefix, this)).concat(key);
      if (!LStorage_classPrivateFieldGet(_available, this)) return (_classPrivateFieldGet2 = LStorage_classPrivateFieldGet(_temp, this)[ident]) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : null;
      return localStorage.getItem(ident);
    }
  }, {
    key: "set",
    value: function set(key, value) {
      if (typeof key !== 'string') throw new LStorageException("First argument key, must be of type string");
      if (typeof value !== 'string') throw new LStorageException("Second argument value, must be of type string");
      var ident = "".concat(LStorage_classPrivateFieldGet(_prefix, this)).concat(key);
      if (!LStorage_classPrivateFieldGet(_available, this)) {
        LStorage_classPrivateFieldGet(_temp, this)[ident] = value;
      } else {
        localStorage.setItem(ident, value);
      }
    }
  }, {
    key: "remove",
    value: function remove(key) {
      var ident = "".concat(LStorage_classPrivateFieldGet(_prefix, this)).concat(key);
      if (!LStorage_classPrivateFieldGet(_available, this)) {
        delete LStorage_classPrivateFieldGet(_temp, this)[ident];
      } else {
        localStorage.removeItem(ident);
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      if (!LStorage_classPrivateFieldGet(_available, this)) {
        LStorage_classPrivateFieldSet(_temp, this, {});
      } else {
        localStorage.clear();
      }
    }
  }], [{
    key: "available",
    value:
    /**
     * Storage is available
     * @public
     * @static
     * @return {boolean}
     */
    function available() {
      var test = strand_strand();
      try {
        localStorage.setItem(test, test);
        if (localStorage.getItem(test) !== test) return false;
        localStorage.removeItem(test);
        return true;
      } catch (e) {
        return false;
      }
    }
  }, {
    key: "getCurrentSize",
    value: function getCurrentSize() {
      return new Promise(function (resolve) {
        var _lsTotal = 0,
          _xLen,
          _x;
        for (_x in localStorage) {
          if (!localStorage.hasOwnProperty(_x)) continue;
          _xLen = (localStorage[_x].length + _x.length) * 2;
          _lsTotal += _xLen;
        }
        resolve(_lsTotal);
      });
    }
  }, {
    key: "testMaxValue",
    value: function testMaxValue() {
      var max = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 250000;
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      return new Promise(function (resolve) {
        var _localStorage$getItem;
        var defined = 'ls_max';
        var known = parseInt((_localStorage$getItem = localStorage.getItem(defined)) !== null && _localStorage$getItem !== void 0 ? _localStorage$getItem : '0');
        var key = 'value_test';
        var size = offset,
          value;
        if (known > 0) {
          resolve(known);
        } else {
          var last_value = localStorage.getItem(key);
          if (last_value && last_value.length) {
            localStorage.setItem(defined, "".concat(last_value.length));
            resolve(last_value.length);
          } else {
            try {
              while (size < max) {
                var _localStorage$getItem2;
                value = 'Ü'.repeat(size);
                localStorage.setItem(key, value);
                if (((_localStorage$getItem2 = localStorage.getItem(key)) === null || _localStorage$getItem2 === void 0 ? void 0 : _localStorage$getItem2.length) !== value.length) {
                  size -= offset;
                  throw new LStorageException('Value size test miss match');
                }
                size += offset;
              }
            } catch (e) {}
          }
        }
        resolve(size);
      });
    }
  }, {
    key: "testMaxClean",
    value: function testMaxClean() {
      var full = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var key = 'value_test';
      localStorage.removeItem(key);
      if (full) {
        var defined = 'ls_max';
        localStorage.removeItem(defined);
      }
    }
  }]);
}();
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Data/saveBlobAs.js
function saveBlobAs(blob, filename) {
  var a = document.createElement('a');
  a.style = 'display:none';
  var url = window.URL.createObjectURL(blob);
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  window.URL.revokeObjectURL(url);
  a.remove();
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Dev/ConsoleInterceptor.js
function ConsoleInterceptor_typeof(o) { "@babel/helpers - typeof"; return ConsoleInterceptor_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ConsoleInterceptor_typeof(o); }
function ConsoleInterceptor_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function ConsoleInterceptor_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ConsoleInterceptor_toPropertyKey(descriptor.key), descriptor); } }
function ConsoleInterceptor_createClass(Constructor, protoProps, staticProps) { if (protoProps) ConsoleInterceptor_defineProperties(Constructor.prototype, protoProps); if (staticProps) ConsoleInterceptor_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function ConsoleInterceptor_toPropertyKey(t) { var i = ConsoleInterceptor_toPrimitive(t, "string"); return "symbol" == ConsoleInterceptor_typeof(i) ? i : i + ""; }
function ConsoleInterceptor_toPrimitive(t, r) { if ("object" != ConsoleInterceptor_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ConsoleInterceptor_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ConsoleInterceptor_callSuper(t, o, e) { return o = ConsoleInterceptor_getPrototypeOf(o), ConsoleInterceptor_possibleConstructorReturn(t, ConsoleInterceptor_isNativeReflectConstruct() ? Reflect.construct(o, e || [], ConsoleInterceptor_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function ConsoleInterceptor_possibleConstructorReturn(self, call) { if (call && (ConsoleInterceptor_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ConsoleInterceptor_assertThisInitialized(self); }
function ConsoleInterceptor_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function ConsoleInterceptor_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (ConsoleInterceptor_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ConsoleInterceptor_getPrototypeOf(o) { ConsoleInterceptor_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ConsoleInterceptor_getPrototypeOf(o); }
function ConsoleInterceptor_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ConsoleInterceptor_setPrototypeOf(subClass, superClass); }
function ConsoleInterceptor_setPrototypeOf(o, p) { ConsoleInterceptor_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ConsoleInterceptor_setPrototypeOf(o, p); }
function ConsoleInterceptor_classPrivateMethodInitSpec(obj, privateSet) { ConsoleInterceptor_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function ConsoleInterceptor_classPrivateFieldInitSpec(obj, privateMap, value) { ConsoleInterceptor_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function ConsoleInterceptor_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function ConsoleInterceptor_classPrivateFieldGet(s, a) { return s.get(ConsoleInterceptor_assertClassBrand(s, a)); }
function ConsoleInterceptor_classPrivateFieldSet(s, a, r) { return s.set(ConsoleInterceptor_assertClassBrand(s, a), r), r; }
function ConsoleInterceptor_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */


/**
 * Console interceptor
 * TODO: add method to disconnect/restore native console
 * @class
 * @extends EventDispatcher
 */
var _is_global = /*#__PURE__*/new WeakMap();
var _native = /*#__PURE__*/new WeakMap();
var _events = /*#__PURE__*/new WeakMap();
var _console = /*#__PURE__*/new WeakMap();
var _ConsoleInterceptor_brand = /*#__PURE__*/new WeakSet();
var ConsoleInterceptor = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {null|EventDispatcherInterface|HTMLElement} host - Event host
   * @param {boolean} global - Replace window.console
   */
  function ConsoleInterceptor() {
    var _this;
    var host = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var global = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    ConsoleInterceptor_classCallCheck(this, ConsoleInterceptor);
    _this = ConsoleInterceptor_callSuper(this, ConsoleInterceptor, [host || window]);

    // Setup interceptor
    /**
     * Initialize
     * @private
     * @param {console} console - Native console
     * @return {void}
     */
    ConsoleInterceptor_classPrivateMethodInitSpec(_this, _ConsoleInterceptor_brand);
    /**
     * Is global state
     * @private
     * @property
     * @type {boolean}
     */
    ConsoleInterceptor_classPrivateFieldInitSpec(_this, _is_global, false);
    /**
     * Native logging
     * @private
     * @property
     * @type {boolean|Array<string>}
     */
    ConsoleInterceptor_classPrivateFieldInitSpec(_this, _native, true);
    /**
     * Fire events
     * @private
     * @property
     * @type {boolean|Array<string>}
     */
    ConsoleInterceptor_classPrivateFieldInitSpec(_this, _events, false);
    /**
     * Native console reference
     * @private
     * @property
     * @type {null|console}
     */
    ConsoleInterceptor_classPrivateFieldInitSpec(_this, _console, null);
    ConsoleInterceptor_classPrivateFieldSet(_is_global, _this, !!global);
    ConsoleInterceptor_classPrivateFieldSet(_console, _this, window.console);
    ConsoleInterceptor_assertClassBrand(_ConsoleInterceptor_brand, _this, _init).call(_this, ConsoleInterceptor_classPrivateFieldGet(_console, _this));

    // Replace global console
    if (global === true) {
      window.console = _this;
    }
    return _this;
  }

  /**
   * Native console getter
   * @public
   * @return {null|console} - Native console
   */
  ConsoleInterceptor_inherits(ConsoleInterceptor, _EventDispatcher);
  return ConsoleInterceptor_createClass(ConsoleInterceptor, [{
    key: "console",
    get: function get() {
      return ConsoleInterceptor_classPrivateFieldGet(_console, this);
    }

    /**
     * Native mode getter
     * @public
     * @return {boolean|Array<string>} - Native mode
     */
  }, {
    key: "native",
    get: function get() {
      return ConsoleInterceptor_classPrivateFieldGet(_native, this);
    }

    /**
     * Native mode setter
     * @public
     * @param {boolean|Array<string>} value - Native mode
     */,
    set: function set(value) {
      ConsoleInterceptor_classPrivateFieldSet(_native, this, value instanceof Array ? value : !!value);
    }

    /**
     * Fire events getter
     * @public
     * @return {boolean|Array<string>} - Events mode
     */
  }, {
    key: "events",
    get: function get() {
      return ConsoleInterceptor_classPrivateFieldGet(_events, this);
    }

    /**
     * Fire events setter
     * @public
     * @param {boolean|Array<string>} value - Events mode
     */,
    set: function set(value) {
      ConsoleInterceptor_classPrivateFieldSet(_events, this, value instanceof Array ? value : !!value);
    }
  }, {
    key: "detach",
    value:
    /**
     * Detach global
     * @public
     * @return {void}
     */
    function detach() {
      if (ConsoleInterceptor_classPrivateFieldGet(_is_global, this)) {
        window.console = ConsoleInterceptor_classPrivateFieldGet(_console, this);
        return true;
      }
      return false;
    }
  }]);
}(EventDispatcher)));
function _init(console) {
  var _this2 = this;
  // Get available console methods
  var methods = Object.getOwnPropertyNames(console).filter(function (name) {
    return typeof console[name] === 'function';
  });

  // Create local propagation methods
  var _loop = function _loop() {
    var method = methods[i];
    _this2[method] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      // Propagate to native methods
      if (ConsoleInterceptor_classPrivateFieldGet(_native, _this2) === true || ConsoleInterceptor_classPrivateFieldGet(_native, _this2) instanceof Array && ConsoleInterceptor_classPrivateFieldGet(_native, _this2).includes(method)) {
        console[method].apply(console, args);
      }

      // Propagate to event
      if (ConsoleInterceptor_classPrivateFieldGet(_events, _this2) === true || ConsoleInterceptor_classPrivateFieldGet(_events, _this2) instanceof Array && ConsoleInterceptor_classPrivateFieldGet(_events, _this2).includes(method)) {
        _this2.dispatchEvent('debug.' + method, {
          args: args,
          console: console
        });
      }
    };
  };
  for (var i = 0; i < methods.length; i++) {
    _loop();
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Dev/TestRunner.js
function TestRunner_typeof(o) { "@babel/helpers - typeof"; return TestRunner_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, TestRunner_typeof(o); }
function TestRunner_toConsumableArray(arr) { return TestRunner_arrayWithoutHoles(arr) || TestRunner_iterableToArray(arr) || TestRunner_unsupportedIterableToArray(arr) || TestRunner_nonIterableSpread(); }
function TestRunner_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function TestRunner_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function TestRunner_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return TestRunner_arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || TestRunner_unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function TestRunner_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return TestRunner_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return TestRunner_arrayLikeToArray(o, minLen); }
function TestRunner_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function TestRunner_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function TestRunner_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, TestRunner_toPropertyKey(descriptor.key), descriptor); } }
function TestRunner_createClass(Constructor, protoProps, staticProps) { if (protoProps) TestRunner_defineProperties(Constructor.prototype, protoProps); if (staticProps) TestRunner_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function TestRunner_classPrivateMethodInitSpec(obj, privateSet) { TestRunner_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function TestRunner_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function TestRunner_defineProperty(obj, key, value) { key = TestRunner_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function TestRunner_toPropertyKey(t) { var i = TestRunner_toPrimitive(t, "string"); return "symbol" == TestRunner_typeof(i) ? i : i + ""; }
function TestRunner_toPrimitive(t, r) { if ("object" != TestRunner_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != TestRunner_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function TestRunner_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */


/**
 * Test data
 * @typedef {Object} TestData
 * @property {string} name - Test name
 * @property {TRTestType} type - Test type
 * @property {Function} subject - Test subject, function or class constructor
 * @property {TRIOTestCase[]} io - Input output case definitions
 */

/**
 * Available test types
 * @typedef {('function'|'class')} TRTestType
 */

/**
 * Input output case definition
 * @typedef {Array<TRIOTestArguments,IOExpectedResult>} TRIOTestCase
 */

/**
 * Test case arguments
 * @typedef {null|*[]} TRIOTestArguments
 */

/**
 * Expected test return value
 * @typedef {*} IOExpectedResult
 */

/**
 * Test result data
 * @typedef {Array<string,string,TRTestCaseResults|Error>} TRTestResult
 */

/**
 * Test cases data
 * @typedef {Array<null|*[],*,*,boolean>} TRTestCaseResults
 */

/**
 * Test case result [returnValue,boolean]
 * @typedef {(*|boolean)[]} TRIOTestResult
 */
var _TestRunner_brand = /*#__PURE__*/new WeakSet();
var TestRunner = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Constructor
   * @constructor
   * @param {undefined|null|Console|Object} render - Renderer
   */
  function TestRunner(render) {
    TestRunner_classCallCheck(this, TestRunner);
    /**
     * Run test
     * @private
     * @param {TRTestType} type - Test type string
     * @param {string} name - Subject name
     * @param {Function} subject - Function or class for testing
     * @param {TRIOTestCase[]} io - Input output definitions
     * @throws {Error}
     * @return {TRTestCaseResults[]} - Test results
     */
    TestRunner_classPrivateMethodInitSpec(this, _TestRunner_brand);
    /**
     * Renderer
     * @public
     * @property
     * @type {null|Console|Object}
     */
    TestRunner_defineProperty(this, "render", null);
    this.render = render || window.console;
  }

  /**
   * Display results
   * @public
   * @param {TRTestResult[]} results - Test results
   * @return {void}
   */
  return TestRunner_createClass(TestRunner, [{
    key: "display",
    value: function display(results) {
      if (!(results instanceof Array)) throw new Error('Argument results must be an Array of TestRunner results');
      var style = 'background:black;color:lightblue';
      this.render.log("%c --- TestRunner with ".concat(results.length, " test").concat(results.length === 1 ? '' : 's', " --- "), style);
      var total = 0,
        total_fails = 0;
      for (var i = 0; i < results.length; i++) {
        var _results$i = _slicedToArray(results[i], 3),
          name = _results$i[0],
          type = _results$i[1],
          tests = _results$i[2];
        total += tests.length;
        var fails = 0;
        for (var j = 0; j < tests.length; j++) {
          if (!tests[j][3]) fails++;
        }
        if (fails) {
          total_fails += fails;
          this.render.group("".concat(i + 1, "# ").concat(name, "[").concat(type, "] with ").concat(fails, " of ").concat(tests.length, " case").concat(tests.length === 1 ? '' : 's', " failed \u274C"));
        } else {
          this.render.groupCollapsed("".concat(i + 1, "# ").concat(name, "[").concat(type, "] with ").concat(tests.length, " case").concat(tests.length === 1 ? '' : 's', " \u2705"));
        }
        for (var _j = 0; _j < tests.length; _j++) {
          var _tests$_j = _slicedToArray(tests[_j], 4),
            args = _tests$_j[0],
            expected = _tests$_j[1],
            ret = _tests$_j[2],
            result = _tests$_j[3];
          if (result === true) {
            this.render.groupCollapsed("Case: ".concat(_j + 1, " \u2705"));
          } else {
            this.render.group("Case: ".concat(_j + 1, " \u274C"));
          }
          this.render.log('Arguments =', args);
          this.render.log('Expected =', expected);
          this.render.log('Return =', ret);
          this.render.groupEnd();
        }
        this.render.groupEnd();
      }
      this.render.log("%c --- Overview: ".concat(results.length, " test").concat(results.length === 1 ? '' : 's', " with ").concat(total, " case").concat(total === 1 ? '' : 's').concat(total_fails > 0 ? ' ' + (total - total_fails) : '', " \u2705 ").concat(total_fails > 0 ? total_fails + ' ❌ ' : '', "--- "), style);
    }

    /**
     * Run tests
     * @public
     * @param {Array<TestData>} tests - Test data list
     * @throws {Error}
     * @return {TRTestResult[]} - Test results
     */
  }, {
    key: "run",
    value: function run(tests) {
      if (!(tests instanceof Array)) throw new Error('Argument tests must be of type Array<TestData>');
      var results = [];
      for (var i = 0; i < tests.length; i++) {
        var _tests$i = tests[i],
          name = _tests$i.name,
          io = _tests$i.io,
          type = _tests$i.type,
          subject = _tests$i.subject;
        try {
          results.push([name, type, TestRunner_assertClassBrand(_TestRunner_brand, this, _run).call(this, type, name, subject, io)]);
        } catch (e) {
          results.push([name, type, e]);
        }
      }
      return results;
    }
  }]);
}()));
function _run(type, name, subject, io) {
  if (typeof name !== 'string' || !name.length) throw new Error('Test must have a valid name');
  switch (type) {
    case 'function':
      return TestRunner_assertClassBrand(_TestRunner_brand, this, _run_function).call(this, subject, io);
    case 'class':
      return TestRunner_assertClassBrand(_TestRunner_brand, this, _run_class).call(this, subject, io);
    default:
      throw new Error("Unknown test type: ".concat(type));
  }
}
/**
 * Run function test
 * @private
 * @param {Function} subject - Function to test
 * @param {TRIOTestCase[]} io - Input output definitions
 * @throws Error
 * @return {TRTestCaseResults[]} - Test results
 */
function _run_function(subject, io) {
  if (typeof subject !== 'function') throw new Error('Argument subject must be a function');
  var results = [];
  for (var i = 0; i < io.length; i++) {
    var _io$i = _slicedToArray(io[i], 2),
      args = _io$i[0],
      expected = _io$i[1];
    try {
      results.push([args, expected].concat(TestRunner_toConsumableArray(TestRunner_assertClassBrand(_TestRunner_brand, this, _io_function).call(this, subject, args, expected))));
    } catch (e) {
      results.push([args, expected, e, false]);
    }
  }
  return results;
}
/**
 * Run function io
 * @private
 * @param {Function} subject - Function to test
 * @param {null|Array<*>} args - Arguments
 * @param {*} expected - Expected return value
 * @throws Error
 * @return {TRIOTestResult} - True on success
 */
function _io_function(subject, args, expected) {
  var result;
  if (args === null) args = [];
  if (args instanceof Array) {
    try {
      result = subject.apply(void 0, TestRunner_toConsumableArray(args));
    } catch (e) {
      result = e;
    }
  } else {
    throw new Error('Argument args must be null or an Array');
  }
  var returnType = TestRunner_typeof(result);
  var expectedType = TestRunner_typeof(expected);
  if (returnType === expectedType) {
    if (isPojo(result) && isPojo(expected)) {
      if (JSON.stringify(result) === JSON.stringify(expected)) {
        return [result, true];
      }
    } else if (result === expected) {
      return [result, true];
    }
  } else if (returnType === 'object' && expectedType === 'function' && result instanceof expected) {
    return [result, true];
  }
  return [result, false];
}
/**
 * Run class test
 * @private
 * @param {Function} subject - Class constructor to test
 * @param {TRIOTestCase[]} io - Input output definitions
 * @throws Error
 * @return {TRTestCaseResults[]} - Test results
 */
function _run_class(subject, io) {
  window.console.error(subject, io);
  throw new Error('Test type class not implemented');
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/DOM/appendAfter.js
/**
 * Append node after a specific node
 * @param {Node} newNode - Node to append
 * @param {Node} referenceNode - After this node
 * @return {void}
 */
function appendAfter(newNode, referenceNode) {
  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/DOM/attributeJSON.js
/**
 * Get json object from element attribute
 * @param {string} name - Attribute name
 * @param {HTMLElement} element - Target element
 * @param {boolean} silent - Do not throw exception on error but return null, default: true
 * @return {null|Object} - Null or successfully parsed data
 */
function attributeJSON(name, element) {
  var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var value = element.getAttribute(name);
  if (typeof value !== 'string' || !value.length) {
    return null;
  }
  var result;
  try {
    result = JSON.parse(value);
  } catch (error) {
    if (!silent) throw error;
    return null;
  }
  return result;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/DOM/uniqid.js
/**
 * Requires
 */


/**
 * Unique html attribute id
 * @param {string} prefix - Prefix the random id
 * @param {boolean} entropy - True for higher entropy
 * @return {string} - An unused unique random id
 */
function uniqid() {
  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var entropy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  prefix = prefix || '';
  var id;
  do {
    id = prefix + strand_strand(entropy);
  } while (document.getElementById(id));
  return id;
}

/**
 * Require unique id
 * @param {HTMLElement} element - Element that requires an id
 * @param {string} prefix - Prefix the random id
 * @param {boolean} entropy - True for higher entropy
 * @return {string} - Current or created element id
 */
function uniqid_requireUniqid(element) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var entropy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var id = element.id || uniqid(prefix, entropy);
  element.id = id;
  return id;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/bindNodeList.js
function bindNodeList_toConsumableArray(arr) { return bindNodeList_arrayWithoutHoles(arr) || bindNodeList_iterableToArray(arr) || bindNodeList_unsupportedIterableToArray(arr) || bindNodeList_nonIterableSpread(); }
function bindNodeList_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function bindNodeList_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return bindNodeList_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bindNodeList_arrayLikeToArray(o, minLen); }
function bindNodeList_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function bindNodeList_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return bindNodeList_arrayLikeToArray(arr); }
function bindNodeList_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Bind events to each element
 * @param {null|Array|NodeList} elements - List of elements
 * @param {Array} events - List of addEventListener params
 * @param {boolean} unbind - Remove event listeners
 * @return {void}
 */
function bindNodeList_bindNodeList(elements, events) {
  var unbind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  if (!(elements instanceof Array || elements instanceof NodeList)) {
    throw new Error('bindNodeList() First argument elements must be a NodeList or an Array of HTMLElement');
  }
  if (!(events instanceof Array)) {
    throw new Error('bindNodeList() Second argument events must be an Array of addEventListener arguments');
  }
  for (var i = 0; i < elements.length; i++) {
    for (var j = 0; j < events.length; j++) {
      var _elements$i;
      if (!(events[j] instanceof Array && events[j].length > 1)) {
        throw new Error('bindNodeList() Second argument events array must only contain Arrays of addEventListener arguments');
      }
      (_elements$i = elements[i])[(unbind ? 'remove' : 'add') + 'EventListener'].apply(_elements$i, bindNodeList_toConsumableArray(events[j]));
    }
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/CallbackEvents.js
function CallbackEvents_typeof(o) { "@babel/helpers - typeof"; return CallbackEvents_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, CallbackEvents_typeof(o); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = CallbackEvents_getPrototypeOf(object); if (object === null) break; } return object; }
function CallbackEvents_classPrivateMethodInitSpec(obj, privateSet) { CallbackEvents_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function CallbackEvents_classPrivateFieldInitSpec(obj, privateMap, value) { CallbackEvents_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function CallbackEvents_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function CallbackEvents_classPrivateFieldGet(s, a) { return s.get(CallbackEvents_assertClassBrand(s, a)); }
function CallbackEvents_classPrivateFieldSet(s, a, r) { return s.set(CallbackEvents_assertClassBrand(s, a), r), r; }
function CallbackEvents_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function CallbackEvents_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, CallbackEvents_toPropertyKey(descriptor.key), descriptor); } }
function CallbackEvents_createClass(Constructor, protoProps, staticProps) { if (protoProps) CallbackEvents_defineProperties(Constructor.prototype, protoProps); if (staticProps) CallbackEvents_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function CallbackEvents_toPropertyKey(t) { var i = CallbackEvents_toPrimitive(t, "string"); return "symbol" == CallbackEvents_typeof(i) ? i : i + ""; }
function CallbackEvents_toPrimitive(t, r) { if ("object" != CallbackEvents_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != CallbackEvents_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function CallbackEvents_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function CallbackEvents_callSuper(t, o, e) { return o = CallbackEvents_getPrototypeOf(o), CallbackEvents_possibleConstructorReturn(t, CallbackEvents_isNativeReflectConstruct() ? Reflect.construct(o, e || [], CallbackEvents_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function CallbackEvents_possibleConstructorReturn(self, call) { if (call && (CallbackEvents_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return CallbackEvents_assertThisInitialized(self); }
function CallbackEvents_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function CallbackEvents_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (CallbackEvents_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function CallbackEvents_getPrototypeOf(o) { CallbackEvents_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return CallbackEvents_getPrototypeOf(o); }
function CallbackEvents_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) CallbackEvents_setPrototypeOf(subClass, superClass); }
function CallbackEvents_setPrototypeOf(o, p) { CallbackEvents_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return CallbackEvents_setPrototypeOf(o, p); }
/**
 * Requires
 */




/**
 * Callback events exception
 * @class
 * @extends Exception
 */
var CallbackEventsException = /*#__PURE__*/function (_Exception) {
  function CallbackEventsException() {
    CallbackEvents_classCallCheck(this, CallbackEventsException);
    return CallbackEvents_callSuper(this, CallbackEventsException, arguments);
  }
  CallbackEvents_inherits(CallbackEventsException, _Exception);
  return CallbackEvents_createClass(CallbackEventsException);
}(Exception);
/**
 * Callback events
 * @class
 * @extends EventDispatcher
 */
var _scope = /*#__PURE__*/new WeakMap();
var CallbackEvents_prefix = /*#__PURE__*/new WeakMap();
var _callbacks = /*#__PURE__*/new WeakMap();
var _CallbackEvents_brand = /*#__PURE__*/new WeakSet();
var CallbackEvents = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {null|HTMLElement|EventDispatcherInterface|Object} element - The target element
   * @param {Object|window} scope - Callback scope
   * @param {string} prefix - Event name prefix
   * @param {null|console} debug - Console or alike object to show debugging
   */
  function CallbackEvents() {
    var _this;
    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
    var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'callback.';
    var debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    CallbackEvents_classCallCheck(this, CallbackEvents);
    _this = CallbackEvents_callSuper(this, CallbackEvents, [element, null, debug]);
    /**
     * Require callback by name
     * @param {string} name - Valid callback name
     * @return {void}
     */
    CallbackEvents_classPrivateMethodInitSpec(_this, _CallbackEvents_brand);
    /**
     * Callback scope
     * @private
     * @property
     * @type {null|Object|window}
     */
    CallbackEvents_classPrivateFieldInitSpec(_this, _scope, null);
    /**
     * Event name prefix
     * @private
     * @property
     * @type {string}
     */
    CallbackEvents_classPrivateFieldInitSpec(_this, CallbackEvents_prefix, 'callback.');
    /**
     * Callbacks name register
     * @private
     * @property
     * @type {Array<string>}
     */
    CallbackEvents_classPrivateFieldInitSpec(_this, _callbacks, []);
    if (!scope || CallbackEvents_typeof(scope) !== 'object') {
      throw new CallbackEventsException('Second argument scope must be an object');
    }
    if (!prefix || typeof prefix !== 'string') {
      throw new CallbackEventsException('Third argument prefix must be a string');
    }
    CallbackEvents_classPrivateFieldSet(_scope, _this, scope);
    CallbackEvents_classPrivateFieldSet(CallbackEvents_prefix, _this, prefix);
    return _this;
  }
  CallbackEvents_inherits(CallbackEvents, _EventDispatcher);
  return CallbackEvents_createClass(CallbackEvents, [{
    key: "hasSimulated",
    value:
    /**
     * Check name for existing handlers
     * @public
     * @param {string} name - Callback name
     * @return {boolean} - True if event has listeners
     */
    function hasSimulated(name) {
      return _get(CallbackEvents_getPrototypeOf(CallbackEvents.prototype), "hasSimulated", this).call(this, CallbackEvents_classPrivateFieldGet(CallbackEvents_prefix, this) + name);
    }

    /**
     * Dispatch callback event
     * @public
     * @param {string} name - Callback name
     * @param {null|object} detail - Event data
     * @param {boolean} bubbles - Allow event to bubble
     * @param {boolean} cancelable - Allow event to be cancelled
     * @return {boolean} - False if cancelled, true otherwise
     */
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(name) {
      var detail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var bubbles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var cancelable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      return _get(CallbackEvents_getPrototypeOf(CallbackEvents.prototype), "dispatchEvent", this).call(this, CallbackEvents_classPrivateFieldGet(CallbackEvents_prefix, this) + name, detail, bubbles, cancelable);
    }

    /**
     * Register callback event listener
     * @public
     * @param {string} name - Callback name
     * @param {Function} callback - Callback to register for event
     * @param {boolean|Object} useCaptureOptions - Capture style or options Object
     * @return {void}
     */
  }, {
    key: "addEventListener",
    value: function addEventListener(name, callback) {
      var useCaptureOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (!isValidFunctionName(name)) {
        throw new CallbackEventsException('Invalid callback function name: ' + name);
      }
      CallbackEvents_assertClassBrand(_CallbackEvents_brand, this, _require_callback).call(this, name);
      _get(CallbackEvents_getPrototypeOf(CallbackEvents.prototype), "addEventListener", this).call(this, CallbackEvents_classPrivateFieldGet(CallbackEvents_prefix, this) + name, callback, useCaptureOptions);
    }
  }]);
}(EventDispatcher)));
function _require_callback(name) {
  var _this2 = this;
  // Only check and register if not done already
  if (!CallbackEvents_classPrivateFieldGet(_callbacks, this).includes(name)) {
    // The scope property must be undefined
    if (typeof CallbackEvents_classPrivateFieldGet(_scope, this)[name] !== 'undefined') {
      throw new CallbackEventsException('Callback "' + name + '" already defined in scope');
    }

    /**
     * Callback event dispatcher
     * @public
     * @param {Array} params - Callback arguments
     * @return {void}
     */
    CallbackEvents_classPrivateFieldGet(_scope, this)[name] = function () {
      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
        params[_key] = arguments[_key];
      }
      _this2.dispatchEvent(name, {
        name: name,
        params: params
      });
    };

    // Register the callback
    CallbackEvents_classPrivateFieldGet(_callbacks, this).push(name);
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/copyToClipboard.js
function copyToClipboard_typeof(o) { "@babel/helpers - typeof"; return copyToClipboard_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, copyToClipboard_typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == copyToClipboard_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(copyToClipboard_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Copy to clipboard fallback
 * @param {string} text - String to copy
 * @param {null|console|Object} debug - Debug object
 * @return {void}
 */
function copyToClipboardFallback(text) {
  var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var textArea = document.createElement("textarea");
  textArea.value = text;
  textArea.style.top = "0";
  textArea.style.left = "0";
  textArea.style.position = "fixed";
  document.body.appendChild(textArea);
  textArea.focus();
  textArea.select();
  try {
    document.execCommand('copy');
  } catch (err) {
    if (debug) debug.error('Failed to copy to clipboard', err);
  }
  document.body.removeChild(textArea);
}

/**
 * Copy to clipboard
 * @param {string} text - String to copy
 * @param {null|console|Object} debug - Debug object
 * @return {Promise<boolean|null>} - Copy success status
 */
function copyToClipboard(_x) {
  return _copyToClipboard.apply(this, arguments);
}
function _copyToClipboard() {
  _copyToClipboard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(text) {
    var debug,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          debug = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
          if (navigator.clipboard) {
            _context.next = 4;
            break;
          }
          copyToClipboardFallback(text, debug);
          return _context.abrupt("return", null);
        case 4:
          _context.prev = 4;
          _context.next = 7;
          return navigator.clipboard.writeText(text);
        case 7:
          _context.next = 13;
          break;
        case 9:
          _context.prev = 9;
          _context.t0 = _context["catch"](4);
          if (debug) debug.error('Failed to copy to clipboard', _context.t0);
          return _context.abrupt("return", false);
        case 13:
          return _context.abrupt("return", true);
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[4, 9]]);
  }));
  return _copyToClipboard.apply(this, arguments);
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/debounce.js
/**
 * @callback DebounceEventHandler
 * @param {Event} event - Event object
 * @return {void}
 */

/**
 * Debounce event
 * @param {Function|DebounceEventHandler} func - Event handler
 * @param {null|number} delay - Debounce delay, default: 350
 * @param {null|Function} always - Always run callback
 * @return {function(*=): void} - Wrapped callback
 */
function debounce(func) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var always = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  delay = typeof delay === 'number' ? delay : 350;
  var timer = 0;
  return function () {
    var _window;
    var cancel = false;
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }
    if (always) cancel = always.apply(void 0, params);
    if (timer) {
      window.clearTimeout(timer);
      timer = 0;
    }
    if (!cancel) timer = (_window = window).setTimeout.apply(_window, [func, delay].concat(params));
  };
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/Draggables.js
function Draggables_typeof(o) { "@babel/helpers - typeof"; return Draggables_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Draggables_typeof(o); }
function Draggables_classPrivateMethodInitSpec(obj, privateSet) { Draggables_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function Draggables_classPrivateFieldInitSpec(obj, privateMap, value) { Draggables_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Draggables_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Draggables_classPrivateFieldGet(s, a) { return s.get(Draggables_assertClassBrand(s, a)); }
function Draggables_classPrivateFieldSet(s, a, r) { return s.set(Draggables_assertClassBrand(s, a), r), r; }
function Draggables_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Draggables_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Draggables_toPropertyKey(descriptor.key), descriptor); } }
function Draggables_createClass(Constructor, protoProps, staticProps) { if (protoProps) Draggables_defineProperties(Constructor.prototype, protoProps); if (staticProps) Draggables_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Draggables_toPropertyKey(t) { var i = Draggables_toPrimitive(t, "string"); return "symbol" == Draggables_typeof(i) ? i : i + ""; }
function Draggables_toPrimitive(t, r) { if ("object" != Draggables_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Draggables_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Draggables_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Draggables_callSuper(t, o, e) { return o = Draggables_getPrototypeOf(o), Draggables_possibleConstructorReturn(t, Draggables_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Draggables_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Draggables_possibleConstructorReturn(self, call) { if (call && (Draggables_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Draggables_assertThisInitialized(self); }
function Draggables_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Draggables_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Draggables_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Draggables_getPrototypeOf(o) { Draggables_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Draggables_getPrototypeOf(o); }
function Draggables_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Draggables_setPrototypeOf(subClass, superClass); }
function Draggables_setPrototypeOf(o, p) { Draggables_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Draggables_setPrototypeOf(o, p); }
/**
 * Requires
 */




/**
 * Draggables exception
 * @class
 * @extends Exception
 */
var DraggablesException = /*#__PURE__*/function (_Exception) {
  function DraggablesException() {
    Draggables_classCallCheck(this, DraggablesException);
    return Draggables_callSuper(this, DraggablesException, arguments);
  }
  Draggables_inherits(DraggablesException, _Exception);
  return Draggables_createClass(DraggablesException);
}(Exception);
/**
 * Draggable data
 * @typedef {Object} DraggableData
 * @property {HTMLElement} draggable - Draggable element
 * @property {HTMLElement} override - Draggable event target override
 * @property {HTMLElement} container - Constraint container
 * @property {null|DraggableOnBefore|Function} onbefore - On before callback
 * @property {null|DraggableOnStart|Function} onstart - On start callback
 * @property {null|DraggableOnEnd|Function} onend - On end callback
 * @property {null|DraggableOnMove|Function} onmove - On drag set position callback
 * @property {null|DraggableOnClick|Function} onclick - On click callback
 * @property {('both'|'x'|'y')} axis - Draggable axis
 * @property {('start'|'left'|'center'|'middle'|'right'|'end')} offsetX - Draggable element x offset orientation
 * @property {('start'|'top'|'center'|'middle'|'bottom'|'end')} offsetY - Draggable element y offset orientation
 * @property {boolean} overflowX - Allow drag overflow on x
 * @property {boolean} overflowY - Allow drag overflow on y
 * @property {boolean} local - Use local click handler
 * @property {boolean} position - Calculate position
 * @property {Draggables} parent - Parent instance
 */
/**
 * Draggable before drag callback
 * @callback DraggableOnBefore
 * @param {MouseEvent} event - Mouse down event
 * @param {DraggableData} _dgbl - Draggable data
 * @return {boolean} - Return false to prevent drag start
 */
/**
 * Draggable started drag callback
 * @callback DraggableOnStart
 * @param {MouseEvent} event - Mouse down event
 * @param {DraggableData} _dgbl - Draggable data
 * @return {void}
 */
/**
 * Draggable ended drag callback
 * @callback DraggableOnEnd
 * @param {MouseEvent} event - Mouse up event
 * @param {DraggablePosition} position - Current position
 * @param {DraggablePositionChange} change - Position change
 * @param {DraggableData} _dgbl - Draggable data
 * @return {void}
 */
/**
 * Draggable move callback
 * @callback DraggableOnMove
 * @param {MouseEvent} event - Mouse move event
 * @param {DraggablePosition} position - Current position
 * @param {DraggablePositionChange} change - Position change
 * @param {DraggableData} _dgbl - Draggable data
 * @return {void}
 */
/**
 * Draggable click callback
 * @callback DraggableOnClick
 * @param {MouseEvent} event - Mouse up event
 * @param {DraggablePositionChange} change - Position change
 * @param {DraggableData} _dgbl - Draggable data
 * @return {void}
 */
/**
 * Draggable axis values
 * @typedef {Object} DraggableAxisValues
 * @property {undefined|number} x - X value
 * @property {undefined|number} y - Y value
 */
/**
 * Draggable axis position
 * @typedef {Object} DraggableAxisPosition
 * @property {number} px - Relative pixel position
 * @property {number} percent - Relative percent position
 */
/**
 * Draggable position
 * @typedef {Object} DraggablePosition
 * @property {undefined|DraggableAxisPosition} x - Horizontal axis position
 * @property {undefined|DraggableAxisPosition} y - Vertical axis position
 */
/**
 * Draggable position change
 * @typedef {Object} DraggablePositionChange
 * @property {number} deltaX - Delta x change
 * @property {number} deltaY - Delta y change
 * @property {boolean} xMoved - X axis moved
 * @property {boolean} yMoved - Y axis moved
 */
/**
 * Draggables
 * @class
 */
var _defaults = /*#__PURE__*/new WeakMap();
var _active = /*#__PURE__*/new WeakMap();
var _min = /*#__PURE__*/new WeakMap();
var _start = /*#__PURE__*/new WeakMap();
var _offset = /*#__PURE__*/new WeakMap();
var _context = /*#__PURE__*/new WeakMap();
var _Draggables_brand = /*#__PURE__*/new WeakSet();
var Draggables = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Constructor
   * @constructor
   * @param {null|DraggableData|Array<DraggableData>} draggables - Draggable data
   * @param {window|HTMLElement} context - Context
   */
  function Draggables() {
    var draggables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
    Draggables_classCallCheck(this, Draggables);
    /**
     * Bind global event handlers
     * @private
     * @return {void}
     */
    Draggables_classPrivateMethodInitSpec(this, _Draggables_brand);
    /**
     * Default draggable data
     * @private
     * @type {DraggableData}
     */
    Draggables_classPrivateFieldInitSpec(this, _defaults, {
      draggable: null,
      override: null,
      container: null,
      onbefore: null,
      onstart: null,
      onend: null,
      onmove: null,
      onclick: null,
      axis: 'both',
      offsetX: 'start',
      offsetY: 'start',
      overflowX: false,
      overflowY: false,
      local: false,
      position: true
    });
    /**
     * Active draggable data
     * @private
     * @type {null|DraggableData}
     */
    Draggables_classPrivateFieldInitSpec(this, _active, null);
    /**
     * Axis min thresholds
     * @private
     * @type {DraggableAxisValues}
     */
    Draggables_classPrivateFieldInitSpec(this, _min, {
      x: 0,
      y: 0
    });
    /**
     * Axis start values
     * @private
     * @type {DraggableAxisValues}
     */
    Draggables_classPrivateFieldInitSpec(this, _start, {
      x: 0,
      y: 0
    });
    /**
     * Axis offset values
     * @private
     * @type {DraggableAxisValues}
     */
    Draggables_classPrivateFieldInitSpec(this, _offset, {
      x: 0,
      y: 0
    });
    /**
     * Draggable context
     * @private
     * @type {null|window|HTMLElement}
     */
    Draggables_classPrivateFieldInitSpec(this, _context, null);
    if (context !== window && !(context instanceof HTMLElement && context.isConnected)) {
      throw new DraggablesException('Argument context must be window or a connected HTMLElement');
    }
    Draggables_classPrivateFieldSet(_context, this, context);
    Draggables_assertClassBrand(_Draggables_brand, this, _bind_global).call(this);
    if (draggables) this.bind(draggables);
  }

  /**
   * Threshold X getter
   * @public
   * @return {number} - Horizontal min threshold
   */
  return Draggables_createClass(Draggables, [{
    key: "thresholdX",
    get: function get() {
      return Draggables_classPrivateFieldGet(_min, this).x;
    }

    /**
     * Threshold X setter
     * @public
     * @param {number} value - Horizontal min threshold
     * @return {void}
     */,
    set: function set(value) {
      if (typeof value !== 'number' || Number.isNaN(value) || value < 0) {
        throw new DraggablesException('Invalid thresholdX, value must be 0 or a positive number');
      }
      Draggables_classPrivateFieldGet(_min, this).x = value;
    }

    /**
     * Threshold Y getter
     * @public
     * @return {number} - Vertical min threshold
     */
  }, {
    key: "thresholdY",
    get: function get() {
      return Draggables_classPrivateFieldGet(_min, this).y;
    }

    /**
     * Threshold Y setter
     * @public
     * @param {number} value - Vertical min threshold
     * @return {void}
     */,
    set: function set(value) {
      if (typeof value !== 'number' || Number.isNaN(value) || value < 0) {
        throw new DraggablesException('Invalid thresholdY, value must be 0 or a positive number');
      }
      Draggables_classPrivateFieldGet(_min, this).y = value;
    }
  }, {
    key: "bind",
    value:
    /**
     * Bind draggable/s
     * @public
     * @param {DraggableData|Array<DraggableData>} draggables - Draggable data
     * @return {DraggableData|Array<DraggableData>} - Compiled draggable data
     */
    function bind(draggables) {
      if (!draggables) throw new Error('Argument draggables must be an Object or Array of DraggableData');
      var was_array = true;
      if (!(draggables instanceof Array)) {
        was_array = false;
        draggables = [draggables];
      }
      var result = [];
      for (var i = 0; i < draggables.length; i++) {
        result.push(Draggables_assertClassBrand(_Draggables_brand, this, _bind).call(this, draggables[i]));
      }
      return was_array ? result : result.pop();
    }
  }]);
}()));
function _bind_global() {
  var _this = this;
  Draggables_classPrivateFieldGet(_context, this).addEventListener('mousemove', function (event) {
    Draggables_assertClassBrand(_Draggables_brand, _this, _event_global_mousemove).call(_this, event);
  }, {
    passive: true
  });
  Draggables_classPrivateFieldGet(_context, this).addEventListener('mouseup', function (event) {
    Draggables_assertClassBrand(_Draggables_brand, _this, _event_global_mouseup).call(_this, event);
  });
}
/**
 * Bind draggable
 * @private
 * @param {DraggableData} _dgbl - Draggable data
 * @return {DraggableData} - Draggable data
 */
function _data(_dgbl) {
  var data = cloneObject(Draggables_classPrivateFieldGet(_defaults, this));
  mergeObject(data, _dgbl);
  Object.defineProperty(data, 'parent', {
    value: this,
    writable: false,
    configurable: false,
    enumerable: true
  });
  return data;
}
/**
 * Validate draggable data
 * @private
 * @param {DraggableData} _dgbl - Draggable data
 * @return {void}
 */
function _validate(_dgbl) {
  if (!(_dgbl.draggable instanceof HTMLElement)) throw new DraggablesException('Argument draggable must be a HTMLElement');
  if (!(_dgbl.container instanceof HTMLElement)) throw new DraggablesException('Argument container must be a HTMLElement');
  if (typeof _dgbl.onmove !== 'function' && typeof _dgbl.onend !== 'function') throw new DraggablesException('Argument onmove or onend must be a Function');
}
/**
 * Event global mousemove
 * @private
 * @param {MouseEvent} event - Mouse move event
 * @return {void}
 */
function _event_global_mousemove(event) {
  /**
   * Draggable data
   * @private
   * @type {null|DraggableData}
   */
  var _dgbl = Draggables_classPrivateFieldGet(_active, this);
  if (!_dgbl) return;

  // Get delta distances
  var delta = Draggables_assertClassBrand(_Draggables_brand, this, _get_delta).call(this, event);

  // One of must be at threshold to start dragging
  if (_dgbl.axis === 'both' && !delta.xMoved && !delta.yMoved || _dgbl.axis === 'x' && !delta.xMoved || _dgbl.axis === 'y' && !delta.yMoved) {
    return;
  }

  // Get current X and Y
  var position = _dgbl.position ? Draggables_assertClassBrand(_Draggables_brand, this, _get_position).call(this, delta.deltaX, delta.deltaY, _dgbl) : null;

  // Call on move handler
  _dgbl.onmove(event, position, delta, _dgbl);
}
/**
 * Get delta values
 * @private
 * @return {DraggablePositionChange}
 */
function _get_delta(event) {
  var deltaX = event.clientX - Draggables_classPrivateFieldGet(_start, this).x;
  var deltaY = event.clientY - Draggables_classPrivateFieldGet(_start, this).y;
  var xMoved = Math.abs(deltaX) > Draggables_classPrivateFieldGet(_min, this).x;
  var yMoved = Math.abs(deltaY) > Draggables_classPrivateFieldGet(_min, this).y;
  return {
    deltaX: deltaX,
    deltaY: deltaY,
    xMoved: xMoved,
    yMoved: yMoved
  };
}
/**
 * Get full position
 * @private
 * @param {number} deltaX - Delta x change
 * @param {number} deltaY - Delta y change
 * @param {DraggableData} _dgbl - Draggable data
 * @return {DraggablePosition} - Current position
 */
function _get_position(deltaX, deltaY, _dgbl) {
  var parent = _dgbl.container.getBoundingClientRect();
  var element = (_dgbl.override || _dgbl.draggable).getBoundingClientRect();
  var x, y;
  if (_dgbl.axis === 'both' || _dgbl.axis === 'x') x = Draggables_assertClassBrand(_Draggables_brand, this, _get_axis_pos).call(this, _dgbl, deltaX, 'x', 'left', 'width', parent, element);
  if (_dgbl.axis === 'both' || _dgbl.axis === 'y') y = Draggables_assertClassBrand(_Draggables_brand, this, _get_axis_pos).call(this, _dgbl, deltaY, 'y', 'top', 'height', parent, element);
  return {
    x: x,
    y: y
  };
}
/**
 * Get axis position
 * @private
 * @param {DraggableData} _dgbl - Draggable data
 * @param {number} delta - Axis delta change
 * @param {('x'|'y')} axis - Axis to calculate
 * @param {string} rel - Axis parent relative
 * @param {string} size - Axis parent and element size
 * @param {DOMRect} parent - Parent dom rectangle
 * @param {DOMRect} element - Element dom rectangle
 * @return {DraggableAxisPosition} - Axis position
 */
function _get_axis_pos(_dgbl, delta, axis, rel, size, parent, element) {
  // Calculate base position
  var px = Draggables_classPrivateFieldGet(_start, this)[axis] + delta - parent[rel] - Draggables_classPrivateFieldGet(_offset, this)[axis];

  // Add offset if required
  switch (_dgbl['offset' + axis.toUpperCase()]) {
    case 'end':
    case 'right':
    case 'bottom':
      px += element[size];
      break;
    case 'middle':
    case 'center':
      px += element[size] / 2;
      break;
  }

  // Enforce limits
  if (!_dgbl['overflow' + axis.toUpperCase()]) {
    if (px < 0) {
      px = 0;
    } else if (px > parent[size]) {
      px = parent[size];
    }
  }

  // Get relative percentage
  var percent = px / parent[size] * 100;

  // Return new position
  return {
    px: px,
    percent: percent
  };
}
/**
 * Event global mouseup
 * @private
 * @param {MouseEvent} event - Mouse up event
 * @return {void}
 */
function _event_global_mouseup(event) {
  Draggables_assertClassBrand(_Draggables_brand, this, _event_local_mouseup).call(this, event, Draggables_classPrivateFieldGet(_active, this));
}
/**
 * Event local mouseup
 * @private
 * @param {MouseEvent} event - Mouse up event
 * @param {DraggableData} _dgbl - Draggable data
 * @return {void}
 */
function _event_local_mouseup(event, _dgbl) {
  if (!_dgbl || _dgbl !== Draggables_classPrivateFieldGet(_active, this)) return;

  // Clear active
  Draggables_classPrivateFieldSet(_active, this, null);

  // Get delta distances
  var delta = Draggables_assertClassBrand(_Draggables_brand, this, _get_delta).call(this, event);

  // Get current X and Y
  var position = _dgbl.position ? Draggables_assertClassBrand(_Draggables_brand, this, _get_position).call(this, delta.deltaX, delta.deltaY, _dgbl) : null;

  // Run click handler if not moved
  if (_dgbl.onclick && (_dgbl.axis === 'both' && !delta.xMoved && !delta.yMoved || _dgbl.axis === 'x' && !delta.xMoved || _dgbl.axis === 'y' && !delta.yMoved)) {
    _dgbl.onclick(event, position, delta, _dgbl);
  } else if (_dgbl.onend) {
    // Run drag end handler
    _dgbl.onend(event, position, delta, _dgbl);
  }
}
/**
 * Event local mousedown
 * @private
 * @param {MouseEvent} event - Mouse down event
 * @param {DraggableData} _dgbl - Draggable data
 * @return {void}
 */
function _event_local_mousedown(event, _dgbl) {
  // Draggable check callback
  if (_dgbl.onbefore && _dgbl.onbefore(event, _dgbl) === false) return;

  // Get start position
  Draggables_classPrivateFieldGet(_start, this).x = event.clientX;
  Draggables_classPrivateFieldGet(_start, this).y = event.clientY;

  // Define offset for draggable object
  var target = (_dgbl.override || event.target).getBoundingClientRect();
  Draggables_classPrivateFieldGet(_offset, this).x = event.clientX - target.left;
  Draggables_classPrivateFieldGet(_offset, this).y = event.clientY - target.top;

  // Set active
  Draggables_classPrivateFieldSet(_active, this, _dgbl);

  // Run start callback
  if (_dgbl.onstart) _dgbl.onstart(event, _dgbl);
}
/**
 * Bind draggable
 * @private
 * @param {DraggableData} _dgbl - Draggable data
 * @return {DraggableData} - Compiled draggable data
 */
function _bind(_dgbl) {
  var _this2 = this;
  _dgbl = Draggables_assertClassBrand(_Draggables_brand, this, _data).call(this, _dgbl);
  Draggables_assertClassBrand(_Draggables_brand, this, _validate).call(this, _dgbl);
  _dgbl.draggable.addEventListener('mousedown', function (event) {
    Draggables_assertClassBrand(_Draggables_brand, _this2, _event_local_mousedown).call(_this2, event, _dgbl);
  });
  if (_dgbl.local) _dgbl.draggable.addEventListener('mouseup', function (event) {
    Draggables_assertClassBrand(_Draggables_brand, _this2, _event_local_mouseup).call(_this2, event, _dgbl);
  });
  return _dgbl;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Events/tabFocusLock.js
function tabFocusLock_toConsumableArray(arr) { return tabFocusLock_arrayWithoutHoles(arr) || tabFocusLock_iterableToArray(arr) || tabFocusLock_unsupportedIterableToArray(arr) || tabFocusLock_nonIterableSpread(); }
function tabFocusLock_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function tabFocusLock_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return tabFocusLock_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return tabFocusLock_arrayLikeToArray(o, minLen); }
function tabFocusLock_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function tabFocusLock_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return tabFocusLock_arrayLikeToArray(arr); }
function tabFocusLock_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
/**
 * Get focusable elements in context
 * @param {document|HTMLElement} context - Selection context
 * @param {boolean} last - Last instead of first element
 * @param {null|string} selector - Focusable selector
 * @return {null|HTMLElement} - Focusable element
 */
function getFocusable(context) {
  var last = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var selector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  selector = selector || ['a', 'button:not(:disabled)', 'input:not(:disabled):not([type="hidden"])', 'select:not(:disabled)', 'textarea:not(:disabled)', '[tabindex]:not([tabindex="-1"]):not(:disabled)'].join(', ');
  var elements = tabFocusLock_toConsumableArray(context.querySelectorAll(selector));
  if (elements.length) {
    if (last === true) return elements.pop();
    return elements.shift();
  }
  return null;
}

/**
 * Resolve condition
 * @private
 * @param {boolean|Function} condition - Condition
 * @return {boolean} - Focus lock is active
 */
function _tab_focus_lock_resolve_condition(condition) {
  if (typeof condition === 'function') return !!condition();
  return !!condition;
}

/**
 * Restrict tab focus within given element
 * @param {HTMLElement} context - Focus context
 * @param {boolean|Function} condition - Conditional active control
 * @param {boolean} loop - Loop element focus
 * @param {null|string} selector - Focusable selector
 * @return {(function(): void)} - Unbind/remove function
 */
function tabFocusLock(context) {
  var condition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var loop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var selector = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  // Last element focus
  var previous_focus = null;

  /**
   * Keyup event handler
   * @private
   * @param {Event} event - Event
   * @return {void}
   */
  var _handle = function _tab_focus_lock_handler(event) {
    if (event.keyCode === 9 || event.key === 'Tab') {
      if (_tab_focus_lock_resolve_condition(condition)) {
        if (!context.contains(document.activeElement)) {
          event.preventDefault();
          var element;
          if (loop) {
            var first = getFocusable(context, false, selector);
            var last = getFocusable(context, true, selector);
            element = previous_focus === first ? last : first;
          } else {
            element = getFocusable(context, event.shiftKey, selector);
          }
          if (element) element.focus();
        } else {
          previous_focus = document.activeElement;
        }
      }
    }
  };

  // Bind and return remover
  document.addEventListener('keyup', _handle);
  return function () {
    document.removeEventListener('keyup', _handle);
  };
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/HTTP/AsyncRequest.js
function AsyncRequest_toConsumableArray(arr) { return AsyncRequest_arrayWithoutHoles(arr) || AsyncRequest_iterableToArray(arr) || AsyncRequest_unsupportedIterableToArray(arr) || AsyncRequest_nonIterableSpread(); }
function AsyncRequest_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function AsyncRequest_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return AsyncRequest_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return AsyncRequest_arrayLikeToArray(o, minLen); }
function AsyncRequest_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function AsyncRequest_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return AsyncRequest_arrayLikeToArray(arr); }
function AsyncRequest_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function AsyncRequest_typeof(o) { "@babel/helpers - typeof"; return AsyncRequest_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, AsyncRequest_typeof(o); }
function AsyncRequest_classPrivateMethodInitSpec(obj, privateSet) { AsyncRequest_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function AsyncRequest_classPrivateFieldInitSpec(obj, privateMap, value) { AsyncRequest_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function AsyncRequest_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function AsyncRequest_classPrivateFieldGet(s, a) { return s.get(AsyncRequest_assertClassBrand(s, a)); }
function AsyncRequest_classPrivateFieldSet(s, a, r) { return s.set(AsyncRequest_assertClassBrand(s, a), r), r; }
function AsyncRequest_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function AsyncRequest_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, AsyncRequest_toPropertyKey(descriptor.key), descriptor); } }
function AsyncRequest_createClass(Constructor, protoProps, staticProps) { if (protoProps) AsyncRequest_defineProperties(Constructor.prototype, protoProps); if (staticProps) AsyncRequest_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function AsyncRequest_toPropertyKey(t) { var i = AsyncRequest_toPrimitive(t, "string"); return "symbol" == AsyncRequest_typeof(i) ? i : i + ""; }
function AsyncRequest_toPrimitive(t, r) { if ("object" != AsyncRequest_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != AsyncRequest_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function AsyncRequest_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function AsyncRequest_callSuper(t, o, e) { return o = AsyncRequest_getPrototypeOf(o), AsyncRequest_possibleConstructorReturn(t, AsyncRequest_isNativeReflectConstruct() ? Reflect.construct(o, e || [], AsyncRequest_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function AsyncRequest_possibleConstructorReturn(self, call) { if (call && (AsyncRequest_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return AsyncRequest_assertThisInitialized(self); }
function AsyncRequest_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function AsyncRequest_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (AsyncRequest_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function AsyncRequest_getPrototypeOf(o) { AsyncRequest_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return AsyncRequest_getPrototypeOf(o); }
function AsyncRequest_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) AsyncRequest_setPrototypeOf(subClass, superClass); }
function AsyncRequest_setPrototypeOf(o, p) { AsyncRequest_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return AsyncRequest_setPrototypeOf(o, p); }
/**
 * Requires
 */






/**
 * Async request exception
 * @class
 * @extends Exception
 */
var AsyncRequestException = /*#__PURE__*/function (_Exception) {
  function AsyncRequestException() {
    AsyncRequest_classCallCheck(this, AsyncRequestException);
    return AsyncRequest_callSuper(this, AsyncRequestException, arguments);
  }
  AsyncRequest_inherits(AsyncRequestException, _Exception);
  return AsyncRequest_createClass(AsyncRequestException);
}(Exception);
/**
 * @typedef {Object} AsyncRequestConfig - Async Request Config
 * @property {string} url
 * @property {string} user
 * @property {string} pwd
 * @property {('head'|'get'|'post'|'put'|'delete'|'patch'|'options')} method
 * @property {boolean} cache
 * @property {('auto'|'html','string','json')} type
 * @property {Array.<number>} successStatus
 * @property {string} eventPrefix
 */
/**
 * Async request
 * @class
 * @extends EventDispatcher
 */
var _request = /*#__PURE__*/new WeakMap();
var _AsyncRequest_brand = /*#__PURE__*/new WeakSet();
var AsyncRequest_AsyncRequest = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {null|string|AsyncRequestConfig} options - Url or options object
   * @param {null|EventDispatcher} parent - Parent component
   * @param {null|console|Object} debug - Debug object
   */
  function AsyncRequest() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    AsyncRequest_classCallCheck(this, AsyncRequest);
    _this = AsyncRequest_callSuper(this, AsyncRequest, [null, parent, debug]);

    // Default properties/options
    /**
     * Ready state change event handler
     * @private
     * @param {Event} event - Event readystatechange
     * @return {void}
     */
    AsyncRequest_classPrivateMethodInitSpec(_this, _AsyncRequest_brand);
    /**
     * Request object
     * @private
     * @property
     * @type {null|XMLHttpRequest}
     */
    AsyncRequest_classPrivateFieldInitSpec(_this, _request, null);
    Object.assign(_this, {
      url: '',
      user: null,
      pwd: null,
      // Allowed methods: head, get, post, put, delete, patch, options
      method: 'get',
      cache: false,
      type: 'auto',
      successStatus: [200, 201, 202, 203],
      eventPrefix: '',
      error: null,
      status: null,
      statusText: null,
      readyState: null,
      responseText: null,
      responseType: null,
      responseParsed: null,
      responseParsingError: null
    });

    // Shorthand only url
    if (typeof options === 'string') {
      options = {
        url: options
      };
    }

    // Valid url or options
    if (isPojo(options)) {
      mergeObject(_this, options);
    } else {
      throw new AsyncRequestException('Url or options object required');
    }

    // Create request
    AsyncRequest_classPrivateFieldSet(_request, _this, new XMLHttpRequest());

    // Request state change
    AsyncRequest_classPrivateFieldGet(_request, _this).addEventListener('readystatechange', function (event) {
      return AsyncRequest_assertClassBrand(_AsyncRequest_brand, _this, _event_readystatechange).call(_this, event);
    });

    // On progress handler
    AsyncRequest_classPrivateFieldGet(_request, _this).upload.addEventListener('progress', function (event) {
      return AsyncRequest_assertClassBrand(_AsyncRequest_brand, _this, _event_progress).call(_this, event);
    });
    return _this;
  }

  /**
   * Get unique request url with time param if cache is disabled
   * @public
   * @param {string} url - Url to add cache breaker
   * @param {boolean} cache - Set to not modify url
   * @return {string} - Url with optional cache breaker
   */
  AsyncRequest_inherits(AsyncRequest, _EventDispatcher);
  return AsyncRequest_createClass(AsyncRequest, [{
    key: "send",
    value:
    /**
     * Send request
     * @public
     * @param {null|*} data - Data to send
     * @param {null|Function} modifyProcessed - Callback to modify processed request data
     * @return {void}
     */
    function send() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var modifyProcessed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (typeof data === 'function') {
        modifyProcessed = data;
        data = null;
      }

      // Open request
      AsyncRequest_classPrivateFieldGet(_request, this).open(this.method, this.constructor.unique_url(this.url, this.cache), true, this.user, this.pwd);
      var processed = AsyncRequest_assertClassBrand(_AsyncRequest_brand, this, _process).call(this, data);

      // Modify request before actual sending
      if (typeof modifyProcessed === 'function') {
        modifyProcessed(processed, this);
      }

      // Set headers
      AsyncRequest_assertClassBrand(_AsyncRequest_brand, this, _set_headers).call(this, processed);

      // Send request
      var data_methods = ['post', 'put', 'patch'];
      if (data_methods.includes(this.method)) {
        AsyncRequest_classPrivateFieldGet(_request, this).send(processed.body);
      } else {
        AsyncRequest_classPrivateFieldGet(_request, this).send();
      }
    }

    /**
     * Abort request
     * @public
     * @return {void}
     */
  }, {
    key: "abort",
    value: function abort() {
      if (AsyncRequest_classPrivateFieldGet(_request, this)) {
        AsyncRequest_classPrivateFieldGet(_request, this).abort();
      }
    }
  }, {
    key: "_parse_auto",
    value:
    /**
     * Detect content type before parsing
     * @protected
     * @return {void}
     */
    function _parse_auto() {
      var type = AsyncRequest_classPrivateFieldGet(_request, this).getResponseHeader('Content-Type');
      this.responseType = type;

      // application/json > plain text json
      var to = AsyncRequest_typeof(this.responseText);
      if (to === 'string' && this.responseText.trim().length) {
        var src = this.responseText.trim();
        if (type === 'application/json' || src[0] === '[' && src[src.length - 1] === ']' || src[0] === '{' && src[src.length - 1] === '}') {
          this._parse_json();
        } else if (type === 'image/svg+xml') {
          this._parse_svg();
        } else if (src.substring(0, 5) !== '<?xml' && src.substring(0, 9) !== '<!DOCTYPE' && (type === 'text/html' || type === 'application/xhtml+xml' || type === 'application/x-httpd-php' || src[0] === '<' && src[src.length - 1] === '>')) {
          this._parse_html();
        } else {
          this._parse_string();
        }
      }
    }

    /**
     * Parse response as html element
     * @protected
     * @return {void}
     */
  }, {
    key: "_parse_html",
    value: function _parse_html() {
      this.responseType = 'text/html';
      try {
        this.responseParsed = str2node(this.responseText, false);
      } catch (e) {
        this.responseType = null;
        this.responseParsed = null;
        this.responseParsingError = e;
      }
    }

    /**
     * Parse response as svg image
     * @protected
     * @return {void}
     */
  }, {
    key: "_parse_svg",
    value: function _parse_svg() {
      this.responseType = 'image/svg+xml';
      try {
        var result = new DOMParser().parseFromString(this.responseText, 'text/xml');
        this.responseParsed = result.getElementsByTagName('svg')[0];
        if (!(this.responseParsed instanceof SVGElement)) {
          throw new AsyncRequestException('Failed to extract svg image');
        }
      } catch (e) {
        this.responseType = null;
        this.responseParsed = null;
        this.responseParsingError = e;
      }
    }

    /**
     * Parse response as string
     * @protected
     * @return {void}
     */
  }, {
    key: "_parse_string",
    value: function _parse_string() {
      if (!this.responseType || !this.responseType.length) {
        this.responseType = 'text/plain';
      }
      this.responseParsed = this.responseText || '';
    }

    /**
     * Parse response as json
     * @protected
     * @return {void}
     */
  }, {
    key: "_parse_json",
    value: function _parse_json() {
      this.responseType = 'application/json';
      try {
        this.responseParsed = JSON.parse(this.responseText);
      } catch (e) {
        this.responseType = null;
        this.responseParsed = null;
        this.responseParsingError = e;
      }
    }
  }], [{
    key: "unique_url",
    value: function unique_url(url) {
      var cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (!cache) {
        var now = new Date().getTime() + '' + performance.now();
        url += (url.indexOf('?') >= 0 ? '&' : '?') + now;
      }
      return url;
    }
  }]);
}(EventDispatcher)));
function _event_readystatechange(event) {
  // Propagate infos
  Object.assign(this, {
    status: AsyncRequest_classPrivateFieldGet(_request, this).status,
    statusText: AsyncRequest_classPrivateFieldGet(_request, this).statusText,
    readyState: AsyncRequest_classPrivateFieldGet(_request, this).readyState,
    responseText: AsyncRequest_classPrivateFieldGet(_request, this).responseText
  });

  // Parse response when completed
  if (this.readyState === 4) {
    this.error = !this.successStatus.includes(this.status);
    if (this.responseText) {
      var method = '_parse_' + this.type;
      if (typeof this[method] !== 'function') {
        throw new AsyncRequestException('Response type method not defined: ' + method);
      }
      this[method](event);
    }
  }

  // State change
  this.dispatchEvent(this.eventPrefix + 'readystatechange', {
    event: event
  });

  // Finished handlers
  if (this.readyState === 4) {
    this.dispatchEvent(this.eventPrefix + (this.error ? 'error' : 'success'), {
      event: event
    });
    this.dispatchEvent(this.eventPrefix + 'complete', {
      event: event
    });
  }
}
/**
 * Progress event handler
 * @private
 * @param {Event} event - Event progress
 * @return {void}
 */
function _event_progress(event) {
  var percent = Number.NaN;
  if (event && event.lengthComputable) {
    percent = event.loaded / event.total * 100;
  }
  this.dispatchEvent(this.eventPrefix + 'progress', {
    percent: percent,
    event: event
  });
}
/**
 * Set headers
 * @private
 * @param {Object} processed - Processed data object
 * @return {void}
 */
function _set_headers(processed) {
  var has_contentType = false;
  if (processed.headers && processed.headers.length) {
    for (var i = 0; i < processed.headers.length; i++) {
      var _classPrivateFieldGet2;
      var header = processed.headers[i];
      (_classPrivateFieldGet2 = AsyncRequest_classPrivateFieldGet(_request, this)).setRequestHeader.apply(_classPrivateFieldGet2, AsyncRequest_toConsumableArray(header));
      if (header[0] === 'Content-Type') {
        has_contentType = true;
      }
    }
  }
  if (!has_contentType && typeof processed.body === 'string') {
    AsyncRequest_classPrivateFieldGet(_request, this).setRequestHeader('Content-Type', 'text/plain');
  }
}
/**
 * Process data
 * @private
 * @param {*} data - Data to send
 * @return {{headers: [], body: null}} - Processed data object
 */
function _process(data) {
  var processed = {
    body: null,
    headers: []
  };
  if (data !== null) {
    var to = AsyncRequest_typeof(data);
    if (to === 'object') {
      AsyncRequest_assertClassBrand(_AsyncRequest_brand, this, _process_object).call(this, data, processed);
    } else if (to === 'string' || to === 'number') {
      processed.body = '' + data;
      processed.headers.push(['Content-Length', processed.body.length]);
    }
  }
  return processed;
}
/**
 * Process object data
 * @private
 * @param {Object} data - Data object
 * @param {Object} processed - Processed data object
 * @return {void}
 */
function _process_object(data, processed) {
  // Plain json like structures
  if (data instanceof Array || isPojo(data)) {
    processed.headers.push(['Content-Type', 'application/json']);
    try {
      processed.body = JSON.stringify(data);
    } catch (e) {
      throw new AsyncRequestException('Failed to convert to json', e);
    }
    processed.headers.push(['Content-Length', processed.body.length]);

    // Form data
  } else if (data instanceof FormData) {
    processed.body = data;

    // Object to string conversion
  } else if (typeof data.toString === 'function') {
    var converted = null;
    try {
      converted = data.toString();
    } catch (e) {
      throw new AsyncRequestException('Failed to convert to string', 4, e);
    }
    if (typeof converted !== 'string') {
      throw new AsyncRequestException('The toString method did not return a string', 5);
    }
    processed.body = converted;
    processed.headers.push(['Content-Length', processed.body.length]);

    // Failed to process
  } else {
    throw new AsyncRequestException('Unprocessable object', 6);
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/HTTP/JsonP.js
function JsonP_typeof(o) { "@babel/helpers - typeof"; return JsonP_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, JsonP_typeof(o); }
function JsonP_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function JsonP_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, JsonP_toPropertyKey(descriptor.key), descriptor); } }
function JsonP_createClass(Constructor, protoProps, staticProps) { if (protoProps) JsonP_defineProperties(Constructor.prototype, protoProps); if (staticProps) JsonP_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function JsonP_toPropertyKey(t) { var i = JsonP_toPrimitive(t, "string"); return "symbol" == JsonP_typeof(i) ? i : i + ""; }
function JsonP_toPrimitive(t, r) { if ("object" != JsonP_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != JsonP_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function JsonP_classPrivateMethodInitSpec(obj, privateSet) { JsonP_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function JsonP_classPrivateFieldInitSpec(obj, privateMap, value) { JsonP_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function JsonP_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function JsonP_classPrivateFieldGet(s, a) { return s.get(JsonP_assertClassBrand(s, a)); }
function JsonP_classPrivateFieldSet(s, a, r) { return s.set(JsonP_assertClassBrand(s, a), r), r; }
function JsonP_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */


/**
 * @callback JsonPCallback
 * @param {Object} response - Response data
 * @return {void}
 */

/**
 * @callback JsonPTimeoutCallback
 * @return {void}
 */

/**
 * JsonP
 * @class
 */
var _script = /*#__PURE__*/new WeakMap();
var _timeout = /*#__PURE__*/new WeakMap();
var _callback = /*#__PURE__*/new WeakMap();
var _limit = /*#__PURE__*/new WeakMap();
var _callback_success = /*#__PURE__*/new WeakMap();
var _callback_timeout = /*#__PURE__*/new WeakMap();
var _JsonP_brand = /*#__PURE__*/new WeakSet();
var JsonP = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Constructor
   * @constructor
   * @param {string} url - Url target
   * @param {JsonPCallback|Function} success - Success callback
   * @param {null|JsonPTimeoutCallback|Function} timeout - Timeout callback
   * @param {null|number} limit - Timeout limit in ms
   */
  function JsonP(url, success) {
    var _this = this;
    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10000;
    JsonP_classCallCheck(this, JsonP);
    /**
     * Create global callback
     * @private
     * @return {void}
     */
    JsonP_classPrivateMethodInitSpec(this, _JsonP_brand);
    /**
     * Script element
     * @private
     * @property
     * @type {null|HTMLScriptElement}
     */
    JsonP_classPrivateFieldInitSpec(this, _script, null);
    /**
     * Timeout reference
     * @private
     * @property
     * @type {null|number}
     */
    JsonP_classPrivateFieldInitSpec(this, _timeout, null);
    /**
     * Callback name
     * @private
     * @property
     * @type {null|string}
     */
    JsonP_classPrivateFieldInitSpec(this, _callback, null);
    /**
     * Timeout limit
     * @private
     * @property
     * @type {null|number}
     */
    JsonP_classPrivateFieldInitSpec(this, _limit, null);
    /**
     * Success callback
     * @private
     * @property
     * @type {null|Function}
     */
    JsonP_classPrivateFieldInitSpec(this, _callback_success, null);
    /**
     * Timeout callback
     * @private
     * @property
     * @type {null|Function}
     */
    JsonP_classPrivateFieldInitSpec(this, _callback_timeout, null);
    // Url check
    if (typeof url !== 'string' || !url.length) {
      throw new Error('JsonP::constructor() Argument url must be an url string');
    }

    // Timeout limit
    if (Number.isNaN(limit) || typeof limit !== 'number') {
      throw new Error('JsonP::constructor() Argument limit must be an integer');
    }
    JsonP_classPrivateFieldSet(_limit, this, limit);

    // Require success callback
    if (typeof success !== 'function') {
      throw new Error('JsonP::constructor() Argument success must be a Function');
    }
    JsonP_classPrivateFieldSet(_callback_success, this, success);

    // Set default empty timeout
    JsonP_classPrivateFieldSet(_callback_timeout, this, timeout);
    if (!timeout || typeof timeout !== 'function') {
      JsonP_classPrivateFieldSet(_callback_timeout, this, function (src) {
        window.console.error(_this.constructor.name + '::callback_timeout Timeout after ' + JsonP_classPrivateFieldGet(_limit, _this) + 'ms:', src);
      });
    }

    // Global callback name
    JsonP_classPrivateFieldSet(_callback, this, this.constructor.getCallbackName());

    // Create global callback
    JsonP_assertClassBrand(_JsonP_brand, this, _create_callback).call(this);

    // Create script
    JsonP_assertClassBrand(_JsonP_brand, this, _create_script).call(this, url);
  }
  return JsonP_createClass(JsonP, null, [{
    key: "getCallbackName",
    value:
    /**
     * Generate a callback name
     * @param {string} prefix - Name prefix
     * @return {string} - Unique name in window
     */
    function getCallbackName() {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'jsonPCallback_';
      var id;
      do {
        id = prefix + strand();
      } while (typeof window[id] !== 'undefined');
      return id;
    }

    /**
     * Get a JSONP promise
     * @param {string} url - Url target
     * @param {number} limit - Timeout limit in ms
     * @return {Promise<*|Error>} - JSONP response or timeout error
     */
  }, {
    key: "promise",
    value: function promise(url) {
      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;
      return new Promise(function (resolve, reject) {
        new JsonP(url, resolve, reject, limit);
      });
    }
  }]);
}()));
function _create_callback() {
  var _this2 = this;
  if (!window[JsonP_classPrivateFieldGet(_callback, this)]) {
    window[JsonP_classPrivateFieldGet(_callback, this)] = function (response) {
      JsonP_assertClassBrand(_JsonP_brand, _this2, _clearTimeout).call(_this2);
      JsonP_classPrivateFieldGet(_callback_success, _this2).call(_this2, response);
      JsonP_assertClassBrand(_JsonP_brand, _this2, _destroy).call(_this2);
    };
  }
}
/**
 * Create loading script
 * @private
 * @param {string} src - Source url
 * @return {void}
 */
function _create_script(src) {
  var _this3 = this;
  var regex = new RegExp('{callback}', 'g');
  src = src.replace(regex, encodeURIComponent(JsonP_classPrivateFieldGet(_callback, this)));

  // Create script
  JsonP_classPrivateFieldSet(_script, this, document.createElement('script'));
  JsonP_classPrivateFieldGet(_script, this).type = 'text/javascript';
  JsonP_classPrivateFieldGet(_script, this).async = true;
  JsonP_classPrivateFieldGet(_script, this).src = src;
  document.getElementsByTagName('head')[0].appendChild(JsonP_classPrivateFieldGet(_script, this));

  // Clear and start loading timeout
  JsonP_assertClassBrand(_JsonP_brand, this, _clearTimeout).call(this);
  JsonP_classPrivateFieldSet(_timeout, this, window.setTimeout(function () {
    JsonP_assertClassBrand(_JsonP_brand, _this3, _destroy).call(_this3);
    JsonP_classPrivateFieldGet(_callback_timeout, _this3).call(_this3, new Error('JsonP::timeout() Timeout for: ' + src));
  }, JsonP_classPrivateFieldGet(_limit, this)));
}
/**
 * Clear loading timeout
 * @private
 * @return {void}
 */
function _clearTimeout() {
  if (JsonP_classPrivateFieldGet(_timeout, this)) {
    window.clearTimeout(JsonP_classPrivateFieldGet(_timeout, this));
    JsonP_classPrivateFieldSet(_timeout, this, null);
  }
}
/**
 * Destroy self after completion
 * @private
 * @return {void}
 */
function _destroy() {
  JsonP_classPrivateFieldGet(_script, this).remove();
  JsonP_classPrivateFieldSet(_script, this, null);
  delete window[JsonP_classPrivateFieldGet(_callback, this)];
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/HTTP/LocationManager.js
function LocationManager_typeof(o) { "@babel/helpers - typeof"; return LocationManager_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, LocationManager_typeof(o); }
function LocationManager_slicedToArray(arr, i) { return LocationManager_arrayWithHoles(arr) || LocationManager_iterableToArrayLimit(arr, i) || LocationManager_unsupportedIterableToArray(arr, i) || LocationManager_nonIterableRest(); }
function LocationManager_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function LocationManager_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return LocationManager_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return LocationManager_arrayLikeToArray(o, minLen); }
function LocationManager_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function LocationManager_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function LocationManager_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function LocationManager_classPrivateMethodInitSpec(obj, privateSet) { LocationManager_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function LocationManager_classPrivateFieldInitSpec(obj, privateMap, value) { LocationManager_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function LocationManager_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function LocationManager_classPrivateFieldGet(s, a) { return s.get(LocationManager_assertClassBrand(s, a)); }
function LocationManager_classPrivateFieldSet(s, a, r) { return s.set(LocationManager_assertClassBrand(s, a), r), r; }
function LocationManager_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function LocationManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, LocationManager_toPropertyKey(descriptor.key), descriptor); } }
function LocationManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) LocationManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) LocationManager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function LocationManager_toPropertyKey(t) { var i = LocationManager_toPrimitive(t, "string"); return "symbol" == LocationManager_typeof(i) ? i : i + ""; }
function LocationManager_toPrimitive(t, r) { if ("object" != LocationManager_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != LocationManager_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function LocationManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function LocationManager_callSuper(t, o, e) { return o = LocationManager_getPrototypeOf(o), LocationManager_possibleConstructorReturn(t, LocationManager_isNativeReflectConstruct() ? Reflect.construct(o, e || [], LocationManager_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function LocationManager_possibleConstructorReturn(self, call) { if (call && (LocationManager_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return LocationManager_assertThisInitialized(self); }
function LocationManager_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function LocationManager_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (LocationManager_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function LocationManager_getPrototypeOf(o) { LocationManager_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return LocationManager_getPrototypeOf(o); }
function LocationManager_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) LocationManager_setPrototypeOf(subClass, superClass); }
function LocationManager_setPrototypeOf(o, p) { LocationManager_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return LocationManager_setPrototypeOf(o, p); }
/**
 * Requires
 */




/**
 * Location Manager Exception
 * @class
 * @extends Exception
 */
var LocationManagerException = /*#__PURE__*/function (_Exception) {
  function LocationManagerException() {
    LocationManager_classCallCheck(this, LocationManagerException);
    return LocationManager_callSuper(this, LocationManagerException, arguments);
  }
  LocationManager_inherits(LocationManagerException, _Exception);
  return LocationManager_createClass(LocationManagerException);
}(Exception);
/**
 * Location Data object
 * @typedef {Object} LocationData
 * @property {null|string} protocol
 * @property {null|string} port
 * @property {null|string} hostname
 * @property {null|string} pathname
 * @property {null|string} search
 * @property {null|string} hash
 */
/**
 * Location Manager
 * @class
 * @extends EventDispatcher
 */
var _protocols = /*#__PURE__*/new WeakMap();
var _LocationManager_brand = /*#__PURE__*/new WeakSet();
var LocationManager = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {null|Array<string>} protocols - List of available protocols
   * @param {null|console} debug - Console or alike object to show debugging
   */
  function LocationManager() {
    var _this;
    var protocols = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    LocationManager_classCallCheck(this, LocationManager);
    _this = LocationManager_callSuper(this, LocationManager, [window, null, debug]);

    // Available protocols
    /**
     * Event popstate
     * @protected
     * @param {PopStateEvent} event - Pop state event object
     * @return {void}
     */
    LocationManager_classPrivateMethodInitSpec(_this, _LocationManager_brand);
    /**
     * Available protocols
     * @private
     * @property
     * @type {string[]}
     */
    LocationManager_classPrivateFieldInitSpec(_this, _protocols, ['https', 'http']);
    if (protocols instanceof Array) LocationManager_classPrivateFieldSet(_protocols, _this, protocols);

    // Popstate logging
    window.addEventListener('popstate', function (event) {
      LocationManager_assertClassBrand(_LocationManager_brand, _this, _event_popstate).call(_this, event);
    });
    return _this;
  }

  /**
   * Decode search params string
   * @public
   * @param {string} query - Search params query string
   * @return {Object} - Search params object
   */
  LocationManager_inherits(LocationManager, _EventDispatcher);
  return LocationManager_createClass(LocationManager, [{
    key: "_update_protocol",
    value:
    /**
     * Parse protocol
     * @protected
     * @param {null|string} data - Protocol
     * @return {null|string} - Valid protocol
     */
    function _update_protocol() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (typeof data === 'string') {
        if (LocationManager_classPrivateFieldGet(_protocols, this).includes(data)) {
          return data;
        }
        return LocationManager_classPrivateFieldGet(_protocols, this)[0];
      }
      return null;
    }

    /**
     * Parse port
     * @protected
     * @param {null|string|number} data - Port number
     * @return {null|string|number} - Valid port number
     */
  }, {
    key: "_update_port",
    value: function _update_port() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // Clear port
      if (data === '' || data === 0) {
        return '';
      }
      if (Number.isInteger(data)) {
        return data;
      }
      return null;
    }

    /**
     * Parse hostname
     * @protected
     * @param {null|string} data - Hostname
     * @return {null|string} - Valid hostname
     */
  }, {
    key: "_update_hostname",
    value: function _update_hostname() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (typeof data === 'string' && data.length && data.indexOf('.') > 0) {
        var rx = new RegExp('(\\w+\\.?)*([\\w\\-]+\\.\\w{2,10})(\\/.*)?$', 'i');
        if (rx.test(data)) {
          return data;
        } else {
          throw new LocationManagerException('Invalid hostname');
        }
      }
      return null;
    }

    /**
     * Parse url path
     * @protected
     * @param {null|string} data - Url path
     * @return {null|string} - Resolved url path
     */
  }, {
    key: "_update_pathname",
    value: function _update_pathname() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // No changes
      if (data === null) {
        return null;
      }
      if (typeof data !== 'string') {
        throw new LocationManagerException('Invalid pathname');
      }

      // Resolve path parent path
      if (data.substring(0, 2) === '..') {
        var current = location.pathname.split('/');
        var change = data.split('/');
        if (location.pathname.charAt(location.pathname.length - 1) === '/') {
          current.pop();
        }
        for (var i = 0; i < change.length; i++) {
          if (change[i] === '..') {
            current.pop();
          } else {
            current.push(change[i]);
          }
        }
        return current.join('/');

        // relative path update but no resolving
      } else if (data.charAt(0) !== '/') {
        // ./ or nothing is relative to current pathname
        return location.pathname + (location.pathname.charAt(location.pathname - 1) !== '/' ? '/' : '') + (data.substring(0, 2) === './' ? data.substring(2) : data);
      }
      return data;
    }

    /**
     * Parse search params
     * @protected
     * @param {null|string|Object} data - Search params object
     * @return {null|string} - Search params string
     */
  }, {
    key: "_update_search",
    value: function _update_search() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // No changes
      if (data === null) {
        return null;
      }

      // Clear search query
      if (data === '') {
        return '';
      }

      // Convert string if possible
      if (typeof data === 'string') {
        data = this.constructor.decodeSearch(data);
      }

      // Accept only plain objects, assuming none or the correct properties are used
      if (!isPojo(data)) {
        throw new LocationManagerException('Invalid query data');
      }

      // No changes
      if (!Object.keys(data).length) {
        return location.search;
      }

      // Get current search query data and merge updates
      var query = this.constructor.decodeSearch(location.search);
      Object.assign(query, data);

      // Return the updated compiled search query
      return this.constructor.encodeSearch(query);
    }

    /**
     * Parse hash value
     * @protected
     * @param {null|string} data - Hash value
     * @return {null|string} - Null or hash value
     */
  }, {
    key: "_update_hash",
    value: function _update_hash() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (typeof data === 'string') {
        return data;
      }
      return null;
    }

    /**
     * Get current url with updated data
     * @protected
     * @param {LocationData} data - Location data
     * @param {boolean} absolute - Return as absolute url
     * @return {string} - Url string
     */
  }, {
    key: "_updated_location",
    value: function _updated_location(data) {
      var absolute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var hostname = data.hostname,
        port = data.port,
        pathname = data.pathname;
      var protocol = data.protocol,
        search = data.search,
        hash = data.hash;
      if (protocol && protocol.length && protocol.charAt(protocol.length - 1) !== ':') {
        protocol = protocol + ':';
      }
      if (search && search.length && search.charAt(0) !== '?') {
        search = '?' + search;
      }
      if (hash && hash.length && hash.charAt(0) !== '#') {
        hash = '#' + hash;
      }
      return (absolute ? (protocol || location.protocol) + '//' + (hostname || location.hostname) + (port === '' ? '' : (port || location.port) > 0 ? ':' + (port || location.port) : '') : '') + (pathname === '' ? '' : pathname || location.pathname) + (search === '' ? '' : search || location.search) + (hash === '' ? '' : hash || location.hash);
    }

    /**
     * Get updated location string
     * @public
     * @param {LocationData} data - Location data
     * @param {boolean} absolute - Return as absolute url
     * @return {string} - Url string
     */
  }, {
    key: "url",
    value: function url(data) {
      var absolute = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (!isPojo(data) || !Object.keys(data).length) {
        throw new LocationManagerException('Argument data must be a valid LocationData Object');
      }
      var updated = {};
      var parts = Object.keys(data);
      for (var i = 0; i < parts.length; i++) {
        var part = parts[i];
        var method = '_update_' + part;
        if (this[method]) {
          updated[part] = this[method](data[part]);
        }
      }
      return this._updated_location(updated, absolute);
    }

    // TODO: path matching function
    // pathMatches( a, b ) return boolean

    // TODO: path contained in path function
    // pathContained( a, b ) return boolean

    // TODO: resolve path ../ etc
    // pathResolve( ...abc ) return string

    /**
     * Get search params or value
     * @public
     * @param {null|string} param - Param name or null to return all
     * @return {string|null|Object} - Param value or param object
     */
  }, {
    key: "search",
    value: function search() {
      var param = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var search = this.constructor.decodeSearch(location.search);
      if (param !== null) {
        if (typeof search[param] !== 'undefined') {
          return search[param];
        }
        return null;
      }
      return search;
    }

    /**
     * Update page url
     * @public
     * @param {*} state - State data
     * @param {null|string} title - Document title
     * @param {null|LocationData} data - Location data
     * @param {boolean} replace - Replace state
     * @return {void}
     */
  }, {
    key: "update",
    value: function update(state) {
      var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var replace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      title = title || document.title;
      if (!this.dispatchEvent('location.before.update', {
        title: title,
        data: data,
        replace: replace
      }, true, true)) return;
      var url = this.url(data);
      if (replace) {
        if (this.debug) this.debug.log(this.constructor.name + '::update Replace:', location.href, '[>>>]', url, state);
        var from = location.href;
        history.replaceState(state, title, url);
        this.dispatchEvent('location.replace', {
          state: state,
          title: title,
          url: url,
          from: from
        });
      } else {
        if (location.href === url) throw new LocationManagerException('Argument data must result in an url change');
        if (this.debug) this.debug.log(this.constructor.name + '::update Push:', url, state);
        history.pushState(state, title, url);
        this.dispatchEvent('location.push', {
          state: state,
          title: title,
          url: url
        });
      }
    }
  }], [{
    key: "decodeSearch",
    value: function decodeSearch(query) {
      // new URLSearchParams( query )
      if (query.charAt(0) === '?') {
        query = query.substring(1);
      }
      var data = {};
      var value_strings = query.split('&');
      for (var i = 0; i < value_strings.length; i++) {
        var _value_strings$i$spli = value_strings[i].split('='),
          _value_strings$i$spli2 = LocationManager_slicedToArray(_value_strings$i$spli, 2),
          name = _value_strings$i$spli2[0],
          value = _value_strings$i$spli2[1];
        if (name && name.length) {
          data[decodeURIComponent(name)] = decodeURIComponent(value || '');
        }
      }
      return data;
    }

    /**
     * Encode search params object
     * @public
     * @param {Object} data - Search params object
     * @return {string} - Encoded search params string
     */
  }, {
    key: "encodeSearch",
    value: function encodeSearch(data) {
      var params = Object.keys(data);
      var query = [];
      for (var i = 0; i < params.length; i++) {
        var param = params[i];
        if (data[param] !== null) {
          query.push(param + '=' + encodeURIComponent(data[param]));
        }
      }
      return query.join('&');
    }
  }]);
}(EventDispatcher)));
function _event_popstate(event) {
  if (this.debug) this.debug.log(this.constructor.name + '::popState [ ' + location.href + ' ]', event.state);
  this.dispatchEvent('location.pop', {
    event: event
  });
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Layout/getScrollbarWidth.js
/**
 * Get scrollbar width
 * @return {number} - Scrollbar width in pixels
 */
function getScrollbarWidth() {
  var scrollable = document.createElement('div');
  var content = document.createElement('div');
  var styles = ['z-index:-1', 'position:fixed', 'width:50vw;', 'height:50vh;', 'visibility:hidden', 'overflow:scroll', '-ms-overflow-style:scrollbar'];
  scrollable.setAttribute('style', styles.join(';'));
  content.setAttribute('style', 'display:block;width:100%;height:100vh');
  scrollable.appendChild(content);
  document.body.appendChild(scrollable);
  var width = scrollable.offsetWidth - content.offsetWidth;
  document.body.removeChild(scrollable);
  return width;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Object/strCreate.js
function strCreate_typeof(o) { "@babel/helpers - typeof"; return strCreate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, strCreate_typeof(o); }
/**
 * Requires
 */


/**
 * Get typed path part
 * @private
 * @param {string} part - Path element
 * @return {string|Number} - Typed element
 */
function getPart(part) {
  // Check for integer
  if (part == parseInt(part)) {
    return parseInt(part);
  }
  return part;
}

/**
 * Create deep object structure from string
 * @param {string} strpath - Dotted value path
 * @param {*} value - Value to be set
 * @param {Object|Array} target - Target object or array
 * @param {boolean} replace - Replace values
 * @param {boolean} any - Extend any type of object
 * @param {Object} debug - Debugger instance
 * @return {Object|Array} - Target
 */
function strCreate(strpath, value, target) {
  var replace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var any = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var debug = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
  var parts = strpath.split('.');
  var path = [];
  var i,
    part,
    to,
    next,
    last,
    source = target;

  // Check path
  for (i = 0; i < parts.length; i++) {
    part = getPart(parts[i]);
    path.push(part);
    to = Object.prototype.hasOwnProperty.call(source, part) ? strCreate_typeof(source[part]) : 'undefined';
    if (!any && to === 'object' && !isPojo_isPojo(source[part]) && !(source[part] instanceof Array)) {
      to = 'value';
    }
    last = i + 1 === parts.length;
    next = last ? null : getPart(parts[i + 1]);

    // Path undefined and need to be created
    if (to === 'undefined' && !last) {
      source[part] = typeof next === 'number' ? [] : {};
      to = 'object';
    }

    // Last part
    if (last) {
      // Create or replace value
      if (replace || to === 'undefined' || source[part] === null) {
        source[part] = value;

        // Already defined and no replace option
      } else {
        if (debug) {
          debug.warn('strCreate : already defined "' + strpath + '" [' + to + ']');
        }
        return target;
      }

      // Iterate created or existing path
    } else if (to === 'object') {
      source = source[part];

      // Replace value with new structure
    } else if (replace && !last) {
      source[part] = typeof next === 'number' ? [] : {};
      source = source[part];

      // Path cannot be extended a non object value was part of the path
    } else {
      if (debug) {
        debug.warn('strCreate : partially defined "' + strpath + '" as "' + path.join('.') + '" [' + to + ']');
      }
      return target;
    }
  }
  return target;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Object/strAccess.js
function strAccess_typeof(o) { "@babel/helpers - typeof"; return strAccess_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, strAccess_typeof(o); }
/**
 * Access object value by dot syntax string
 * @param {string} strpath - Dotted value path
 * @param {Object} subject - Object to access
 * @param {boolean} exact - Whether to match only an exact value, default: true, can be set to 1 to enable no property restriction
 * @param {null|console} debug - Debugger instance
 * @return {null|*} - Closest value matched to path, or in exact mode, null is returned for no match
 */
function strAccess(strpath, subject) {
  var exact = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  if (strAccess_typeof(subject) !== 'object' || subject === null) {
    if (debug) {
      debug.error('strAccess : invalid subject input : ', subject);
    }
    return null;
  }
  var parts = strpath.split('.');
  var path = [];
  var i,
    to,
    part,
    value = subject;

  // Check path
  for (i = 0; i < parts.length; i++) {
    part = parts[i];
    path.push(part);
    to = exact === 1 || Object.prototype.hasOwnProperty.call(value, part) ? strAccess_typeof(value[part]) : 'undefined';
    if (value[part] === null) {
      to = 'undefined';
    }

    // Path exists
    if (to !== 'undefined') {
      // Last element in path is always a valid result
      if (i === parts.length - 1) {
        return value[part];

        // Continue iterating the path
      } else if (to === 'object') {
        value = value[part];

        // Its not the last and not an object, for exact we have a mismatch
      } else if (exact) {
        if (debug) {
          debug.warn('strAccess : no exact match for "' + strpath + '" found "' + path.join('.') + '" [' + to + ']');
        }
        return null;

        // When not expecting an exact value, return what we got
      } else {
        return value;
      }

      // Path not defined, but exact value expected
    } else if (exact) {
      if (debug) {
        debug.warn('strAccess : no exact match for "' + strpath + '" found "' + path.join('.') + '" [' + to + ']');
      }
      return null;

      // Return what we got
    } else {
      return value;
    }
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Logic/Config.js
function Config_typeof(o) { "@babel/helpers - typeof"; return Config_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Config_typeof(o); }
function Config_classPrivateFieldInitSpec(obj, privateMap, value) { Config_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Config_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Config_classPrivateFieldGet(s, a) { return s.get(Config_assertClassBrand(s, a)); }
function Config_classPrivateFieldSet(s, a, r) { return s.set(Config_assertClassBrand(s, a), r), r; }
function Config_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Config_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Config_toPropertyKey(descriptor.key), descriptor); } }
function Config_createClass(Constructor, protoProps, staticProps) { if (protoProps) Config_defineProperties(Constructor.prototype, protoProps); if (staticProps) Config_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Config_toPropertyKey(t) { var i = Config_toPrimitive(t, "string"); return "symbol" == Config_typeof(i) ? i : i + ""; }
function Config_toPrimitive(t, r) { if ("object" != Config_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Config_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Config_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Config_callSuper(t, o, e) { return o = Config_getPrototypeOf(o), Config_possibleConstructorReturn(t, Config_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Config_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Config_possibleConstructorReturn(self, call) { if (call && (Config_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Config_assertThisInitialized(self); }
function Config_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Config_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Config_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Config_getPrototypeOf(o) { Config_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Config_getPrototypeOf(o); }
function Config_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Config_setPrototypeOf(subClass, superClass); }
function Config_setPrototypeOf(o, p) { Config_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Config_setPrototypeOf(o, p); }
/**
 * Requires
 */







/**
 * Config exception
 * @class
 * @extends Exception
 */
var ConfigException = /*#__PURE__*/function (_Exception) {
  function ConfigException() {
    Config_classCallCheck(this, ConfigException);
    return Config_callSuper(this, ConfigException, arguments);
  }
  Config_inherits(ConfigException, _Exception);
  return Config_createClass(ConfigException);
}(Exception);
/**
 * Config
 * @class
 */
var Config_defaults = /*#__PURE__*/new WeakMap();
var Config_data = /*#__PURE__*/new WeakMap();
var Config = /*#__PURE__*/function () {
  /**
   * Constructor
   * @constructor
   * @param {Object} defaults - Default config values object
   * @param {Array<Object>} extended - Default config extension array for inheritance
   */
  function Config() {
    var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var extended = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    Config_classCallCheck(this, Config);
    /**
     * Config defaults
     * @private
     * @property
     * @type {Object}
     */
    Config_classPrivateFieldInitSpec(this, Config_defaults, {});
    /**
     * Config data
     * @private
     * @property
     * @type {Object}
     */
    Config_classPrivateFieldInitSpec(this, Config_data, {});
    // Check defaults
    if (!isPojo_isPojo(defaults)) {
      throw new ConfigException('Argument defaults must be a plain Object');
    }
    Config_classPrivateFieldSet(Config_defaults, this, defaults);

    // Check extended
    if (!(extended instanceof Array)) {
      throw new ConfigException('Argument extended must be an Array');
    }

    // Update default config with extensions
    var inherited_defaults = this.constructor.extendInheritance(extended);
    if (inherited_defaults) this.constructor.merge(inherited_defaults, Config_classPrivateFieldGet(Config_defaults, this), true);

    // Setup active config data
    Config_classPrivateFieldSet(Config_data, this, this.constructor.clone(Config_classPrivateFieldGet(Config_defaults, this)));
  }

  /**
   * Defaults getter
   * @public
   * @return {Object} - Defaults data object
   */
  return Config_createClass(Config, [{
    key: "defaults",
    get: function get() {
      return this.constructor.clone(Config_classPrivateFieldGet(Config_defaults, this));
    }

    /**
     * Data getter
     * @public
     * @return {Object} - Config data object
     */
  }, {
    key: "data",
    get: function get() {
      return this.constructor.clone(Config_classPrivateFieldGet(Config_data, this));
    }

    /**
     * Direct config access
     * @public
     * @return {Object} - Config data object
     */
  }, {
    key: "exposed",
    get: function get() {
      return Config_classPrivateFieldGet(Config_data, this);
    }

    /**
     * Get config value
     * @public
     * @param {string} name - Value name
     * @return {*|null} - Config value
     */
  }, {
    key: "get",
    value: function get(name) {
      return strAccess(name, Config_classPrivateFieldGet(Config_data, this));
    }

    /**
     * Set config value
     * @public
     * @param {string} name - Value name
     * @param {*} value - Value to set
     * @return {void}
     */
  }, {
    key: "set",
    value: function set(name, value) {
      strCreate(name, value, Config_classPrivateFieldGet(Config_data, this), true);
    }

    /**
     * Merge data into config
     * @public
     * @param {Object} data - Data object to merge
     * @param {boolean} extend -  Set true to add undefined|null properties
     * @return {void}
     */
  }, {
    key: "merge",
    value: function merge(data) {
      var extend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (!isPojo_isPojo(data)) {
        throw new ConfigException('Argument data must be a plain Object');
      }
      this.constructor.merge(data, Config_classPrivateFieldGet(Config_data, this), extend);
    }
  }], [{
    key: "clone",
    value:
    /**
     * Clone object recursive
     * @public
     * @param {Object} data - Data to clone
     * @return {Object|Array} - Cloned object
     */
    function clone(data) {
      return cloneObject_cloneObject(data, true);
    }

    /**
     * Merge object recursive
     * @public
     * @param {Object} data - Data to merge
     * @param {Object} target - Target to merge to
     * @param {boolean} extend -  Set true to add undefined|null properties
     * @return {void}
     */
  }, {
    key: "merge",
    value: function merge(data, target) {
      var extend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      mergeObject_mergeObject(target, data, extend, true, true);
    }

    /**
     * Build defaults from inheritance
     * @public
     * @param {Array} extended - Inheritance array
     * @return {null|Object} - Merged configs
     */
  }, {
    key: "extendInheritance",
    value: function extendInheritance(extended) {
      if (!extended.length) return null;
      var config = extended.shift();
      for (var i = 0; i < extended.length; i++) {
        if (!isPojo_isPojo(extended[i])) {
          throw new ConfigException('Argument extended must contain only plain Objects');
        }
        this.merge(extended[i], config, true);
      }
      return config;
    }
  }]);
}();
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Logic/Plugin.js
function Plugin_typeof(o) { "@babel/helpers - typeof"; return Plugin_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Plugin_typeof(o); }
function Plugin_defineProperty(obj, key, value) { key = Plugin_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Plugin_classPrivateFieldInitSpec(obj, privateMap, value) { Plugin_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Plugin_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Plugin_classPrivateFieldGet(s, a) { return s.get(Plugin_assertClassBrand(s, a)); }
function Plugin_classPrivateFieldSet(s, a, r) { return s.set(Plugin_assertClassBrand(s, a), r), r; }
function Plugin_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Plugin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Plugin_toPropertyKey(descriptor.key), descriptor); } }
function Plugin_createClass(Constructor, protoProps, staticProps) { if (protoProps) Plugin_defineProperties(Constructor.prototype, protoProps); if (staticProps) Plugin_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Plugin_toPropertyKey(t) { var i = Plugin_toPrimitive(t, "string"); return "symbol" == Plugin_typeof(i) ? i : i + ""; }
function Plugin_toPrimitive(t, r) { if ("object" != Plugin_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Plugin_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Plugin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Plugin_callSuper(t, o, e) { return o = Plugin_getPrototypeOf(o), Plugin_possibleConstructorReturn(t, Plugin_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Plugin_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Plugin_possibleConstructorReturn(self, call) { if (call && (Plugin_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Plugin_assertThisInitialized(self); }
function Plugin_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Plugin_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Plugin_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Plugin_getPrototypeOf(o) { Plugin_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Plugin_getPrototypeOf(o); }
function Plugin_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Plugin_setPrototypeOf(subClass, superClass); }
function Plugin_setPrototypeOf(o, p) { Plugin_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Plugin_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Plugin exception
 * @class
 * @extends Exception
 */
var PluginException = /*#__PURE__*/function (_Exception) {
  function PluginException() {
    Plugin_classCallCheck(this, PluginException);
    return Plugin_callSuper(this, PluginException, arguments);
  }
  Plugin_inherits(PluginException, _Exception);
  return Plugin_createClass(PluginException);
}(Exception);
/**
 * Plugin class
 * @abstract
 * @class
 */
var Plugin_debug = /*#__PURE__*/new WeakMap();
var Plugin_context = /*#__PURE__*/new WeakMap();
var Plugin = /*#__PURE__*/function () {
  /**
   * Constructor
   * @constructor
   * @param {Object} options - Options object
   * @param {Object} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function Plugin() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    Plugin_classCallCheck(this, Plugin);
    /**
     * Debug object
     * @private
     * @property
     * @type {null|console|Object}
     */
    Plugin_classPrivateFieldInitSpec(this, Plugin_debug, null);
    /**
     * Plugin context
     * @private
     * @property
     * @type {null|Object}
     */
    Plugin_classPrivateFieldInitSpec(this, Plugin_context, null);
    /**
     * Plugin options
     * @public
     * @property
     * @type {Object}
     */
    Plugin_defineProperty(this, "options", null);
    Plugin_classPrivateFieldSet(Plugin_debug, this, debug);
    Plugin_classPrivateFieldSet(Plugin_context, this, context);
    this.options = options;
  }

  /**
   * Debug getter
   * @public
   * @return {null|console|Object} - Debug reference
   */
  return Plugin_createClass(Plugin, [{
    key: "debug",
    get: function get() {
      return Plugin_classPrivateFieldGet(Plugin_debug, this);
    }

    /**
     * Context getter
     * @public
     * @return {null|Object} - Parent reference
     */
  }, {
    key: "context",
    get: function get() {
      return Plugin_classPrivateFieldGet(Plugin_context, this);
    }

    /**
     * Check context
     * @protected
     * @param {Object} context - Plugin context
     * @return {void}
     */
  }, {
    key: "_context_check",
    value: function _context_check(context) {
      if (context && Plugin_classPrivateFieldGet(Plugin_context, this) && context !== Plugin_classPrivateFieldGet(Plugin_context, this)) {
        throw new PluginException('Context mismatch');
      }
    }
  }]);
}();
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Logic/Plugins.js
function Plugins_toConsumableArray(arr) { return Plugins_arrayWithoutHoles(arr) || Plugins_iterableToArray(arr) || Plugins_unsupportedIterableToArray(arr) || Plugins_nonIterableSpread(); }
function Plugins_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Plugins_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Plugins_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Plugins_arrayLikeToArray(o, minLen); }
function Plugins_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Plugins_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Plugins_arrayLikeToArray(arr); }
function Plugins_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Plugins_typeof(o) { "@babel/helpers - typeof"; return Plugins_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Plugins_typeof(o); }
function Plugins_classPrivateMethodInitSpec(obj, privateSet) { Plugins_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function Plugins_defineProperty(obj, key, value) { key = Plugins_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Plugins_classPrivateFieldInitSpec(obj, privateMap, value) { Plugins_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Plugins_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Plugins_classPrivateFieldGet(s, a) { return s.get(Plugins_assertClassBrand(s, a)); }
function Plugins_classPrivateFieldSet(s, a, r) { return s.set(Plugins_assertClassBrand(s, a), r), r; }
function Plugins_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Plugins_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Plugins_toPropertyKey(descriptor.key), descriptor); } }
function Plugins_createClass(Constructor, protoProps, staticProps) { if (protoProps) Plugins_defineProperties(Constructor.prototype, protoProps); if (staticProps) Plugins_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Plugins_toPropertyKey(t) { var i = Plugins_toPrimitive(t, "string"); return "symbol" == Plugins_typeof(i) ? i : i + ""; }
function Plugins_toPrimitive(t, r) { if ("object" != Plugins_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Plugins_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Plugins_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Plugins_callSuper(t, o, e) { return o = Plugins_getPrototypeOf(o), Plugins_possibleConstructorReturn(t, Plugins_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Plugins_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Plugins_possibleConstructorReturn(self, call) { if (call && (Plugins_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Plugins_assertThisInitialized(self); }
function Plugins_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Plugins_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Plugins_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Plugins_getPrototypeOf(o) { Plugins_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Plugins_getPrototypeOf(o); }
function Plugins_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Plugins_setPrototypeOf(subClass, superClass); }
function Plugins_setPrototypeOf(o, p) { Plugins_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Plugins_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Plugins exception
 * @class
 * @extends Exception
 */
var PluginsException = /*#__PURE__*/function (_Exception) {
  function PluginsException() {
    Plugins_classCallCheck(this, PluginsException);
    return Plugins_callSuper(this, PluginsException, arguments);
  }
  Plugins_inherits(PluginsException, _Exception);
  return Plugins_createClass(PluginsException);
}(Exception);
/**
 * Plugins class
 * @class
 */
var Plugins_debug = /*#__PURE__*/new WeakMap();
var Plugins_context = /*#__PURE__*/new WeakMap();
var _plugins = /*#__PURE__*/new WeakMap();
var _Plugins_brand = /*#__PURE__*/new WeakSet();
var Plugins = /*#__PURE__*/function () {
  /**
   * Constructor
   * @constructor
   * @param {Array<Function|Array<Function,*>>} plugins - Plugins to load
   * @param {null|Object} context - Plugin context
   * @param {boolean} append - Append or prepend context to method arguments
   * @param {null|console|Object} debug - Debug object
   */
  function Plugins() {
    var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var append = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var debug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    Plugins_classCallCheck(this, Plugins);
    /**
     * Get context name
     * @private
     * @return {string} - Context name
     */
    Plugins_classPrivateMethodInitSpec(this, _Plugins_brand);
    /**
     * Debug object
     * @private
     * @property
     * @type {null|console|Object}
     */
    Plugins_classPrivateFieldInitSpec(this, Plugins_debug, null);
    /**
     * Plugins context
     * @private
     * @property
     * @type {null|Object}
     */
    Plugins_classPrivateFieldInitSpec(this, Plugins_context, null);
    /**
     * Loaded plugins map
     * @private
     * @property
     * @type {Object}
     */
    Plugins_classPrivateFieldInitSpec(this, _plugins, {});
    /**
     * Append/prepend context to arguments
     * @private
     * @property
     * @type {null|boolean}
     */
    Plugins_defineProperty(this, "append", true);
    if (context && Plugins_typeof(context) !== 'object') {
      throw new PluginsException('Argument context must be null or an Object');
    }
    Plugins_classPrivateFieldSet(Plugins_debug, this, debug);
    Plugins_classPrivateFieldSet(Plugins_context, this, context);
    this.append = append;
    this.load(plugins);
  }
  return Plugins_createClass(Plugins, [{
    key: "debug",
    get:
    /**
     * Debug getter
     * @public
     * @return {null|console|Object} - Debug reference
     */
    function get() {
      return Plugins_classPrivateFieldGet(Plugins_debug, this);
    }

    /**
     * Context getter
     * @public
     * @return {null|Object} - Context reference
     */
  }, {
    key: "context",
    get: function get() {
      return Plugins_classPrivateFieldGet(Plugins_context, this);
    }

    /**
     * Load plugins
     * @public
     * @param {Array<Function|Array<Function,*>>} plugins - Plugins to load
     * @return {void}
     */
  }, {
    key: "load",
    value: function load(plugins) {
      if (!(plugins instanceof Array)) {
        throw new PluginsException('Argument plugins must be an Array');
      }
      if (Plugins_classPrivateFieldGet(Plugins_debug, this)) Plugins_classPrivateFieldGet(Plugins_debug, this).group(Plugins_assertClassBrand(_Plugins_brand, this, _debug_prefix).call(this) + 'load');
      for (var i = 0; i < plugins.length; i++) {
        var data = plugins[i];
        if (!(data instanceof Array)) {
          data = [data];
        }
        this.init.apply(this, Plugins_toConsumableArray(data));
      }
      if (Plugins_classPrivateFieldGet(Plugins_debug, this)) Plugins_classPrivateFieldGet(Plugins_debug, this).groupEnd();
    }

    /**
     * Initialize plugin
     * @public
     * @param {Function} Construct - Constructor
     * @param {null|Object} options - Plugin options
     * @param {boolean} replace - Replace existing plugin instance
     * @return {Object} - Plugin instance
     */
  }, {
    key: "init",
    value: function init(Construct) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var replace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (typeof Construct !== 'function') {
        throw new PluginsException('Argument Construct expected function but got: ' + Plugins_typeof(Construct));
      }
      var name = Construct.pluginName || Construct.name;
      if (!replace && Plugins_classPrivateFieldGet(_plugins, this)[name]) {
        throw new PluginsException('Plugin already defined: ' + name);
      }
      try {
        Plugins_classPrivateFieldGet(_plugins, this)[name] = new Construct(options, Plugins_classPrivateFieldGet(Plugins_context, this), Plugins_classPrivateFieldGet(Plugins_debug, this));
      } catch (e) {
        throw new PluginsException('Error initializing plugin: ' + name, e);
      }
      if (Plugins_classPrivateFieldGet(Plugins_debug, this)) Plugins_classPrivateFieldGet(Plugins_debug, this).log(Plugins_assertClassBrand(_Plugins_brand, this, _debug_prefix).call(this) + 'init', name);
      return Plugins_classPrivateFieldGet(_plugins, this)[name];
    }

    /**
     * Run plugin methods async
     * @public
     * @param {string} method - Method name
     * @param {Array} params - Method arguments
     * @param {Array<string>} restrict - Restrict exec by names
     * @return {Array<Promise>} - Plugin promises
     */
  }, {
    key: "runAsync",
    value: function runAsync(method) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var restrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var run = this.run(method, params, restrict);
      var values = Object.values(run);
      var promises = [];
      for (var i = 0; i < values.length; i++) {
        if (typeof values[i].then === 'function') {
          promises.push(values[i]);
        }
      }
      return promises;
    }

    /**
     * Run plugin methods
     * @public
     * @param {string} method - Method name
     * @param {Array} params - Method arguments
     * @param {Array<string>} restrict - Restrict exec by names
     * @return {Object} - Result object
     */
  }, {
    key: "run",
    value: function run(method) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var restrict = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (Plugins_classPrivateFieldGet(Plugins_debug, this)) Plugins_classPrivateFieldGet(Plugins_debug, this).group(Plugins_assertClassBrand(_Plugins_brand, this, _debug_prefix).call(this) + 'run', method);
      var results = {};
      var names = Object.keys(Plugins_classPrivateFieldGet(_plugins, this));
      for (var i = 0; i < names.length; i++) {
        if (!restrict || !restrict.length || restrict.includes(names[i])) {
          var res = this.exec(names[i], method, params);
          if (res !== null) {
            results[names[i]] = res;
          }
        }
      }
      if (Plugins_classPrivateFieldGet(Plugins_debug, this) && !Object.keys(results).length) {
        Plugins_classPrivateFieldGet(Plugins_debug, this).log(Plugins_assertClassBrand(_Plugins_brand, this, _debug_prefix).call(this) + 'run No results:', method, params, restrict);
      }
      if (Plugins_classPrivateFieldGet(Plugins_debug, this)) Plugins_classPrivateFieldGet(Plugins_debug, this).groupEnd();
      return results;
    }

    /**
     * Run method on named plugin
     * @public
     * @param {string} name - Plugin name
     * @param {string} method - Method name
     * @param {Array} params - Method Arguments
     * @param {boolean} silent - Skip on exception
     * @return {null|*} - Plugin method return value
     */
  }, {
    key: "exec",
    value: function exec(name, method) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var silent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      // Throw error on invalid plugin call
      if (!Plugins_classPrivateFieldGet(_plugins, this)[name]) {
        if (silent) return null;
        throw new PluginsException('Plugin not loaded: ' + name);
      }

      // Params must be array
      if (!(params instanceof Array)) params = [params];

      // Prepend/append context to params
      if (Plugins_classPrivateFieldGet(Plugins_context, this) && this.append !== null) {
        if (this.append) {
          if (params[params.length - 1] !== Plugins_classPrivateFieldGet(Plugins_context, this)) params.push(Plugins_classPrivateFieldGet(Plugins_context, this));
        } else if (params[0] !== Plugins_classPrivateFieldGet(Plugins_context, this)) {
          params.unshift(Plugins_classPrivateFieldGet(Plugins_context, this));
        }
      }

      // Get method result
      var result = null;
      if (Plugins_classPrivateFieldGet(_plugins, this)[name][method]) {
        try {
          var _classPrivateFieldGet2;
          result = (_classPrivateFieldGet2 = Plugins_classPrivateFieldGet(_plugins, this)[name])[method].apply(_classPrivateFieldGet2, Plugins_toConsumableArray(params));
        } catch (e) {
          throw new PluginsException('Plugin method "' + method + '" failed to run: ' + name, e);
        }
        if (Plugins_classPrivateFieldGet(Plugins_debug, this)) Plugins_classPrivateFieldGet(Plugins_debug, this).log(Plugins_assertClassBrand(_Plugins_brand, this, _debug_prefix).call(this) + 'exec', name, method);
      } else if (Plugins_classPrivateFieldGet(Plugins_debug, this)) {
        Plugins_classPrivateFieldGet(Plugins_debug, this).log(Plugins_assertClassBrand(_Plugins_brand, this, _debug_prefix).call(this) + 'exec Unknown method', method, 'on plugin', name);
      }
      return result;
    }

    /**
     * Get plugin
     * @public
     * @param {string} name - Plugin name
     * @return {null|Object} - Plugin instance
     */
  }, {
    key: "get",
    value: function get(name) {
      return Plugins_classPrivateFieldGet(_plugins, this)[name] || null;
    }

    /**
     * Has plugin
     * @public
     * @param {string} name - Plugin name
     * @return {boolean} - Plugin exists
     */
  }, {
    key: "has",
    value: function has(name) {
      return !!Plugins_classPrivateFieldGet(_plugins, this)[name];
    }

    /**
     * Require any number of plugins
     * @param {string[]} names - Any number of names to check
     * @return {Array<Object>} - List of plugins
     */
  }, {
    key: "require",
    value: function require() {
      var result = [];
      for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
        names[_key] = arguments[_key];
      }
      for (var i = 0; i < names.length; i++) {
        if (!this.has(names[i])) {
          throw new PluginsException('Failed with unmet plugin requirement: ' + names[i]);
        }
        result.push(this.get(names[i]));
      }
      return result;
    }
  }]);
}();
function _get_context_name() {
  var name = 'unknown',
    id = null;
  if (Plugins_classPrivateFieldGet(Plugins_context, this)) {
    if (Plugins_classPrivateFieldGet(Plugins_context, this).constructor && Plugins_classPrivateFieldGet(Plugins_context, this).constructor.name) {
      name = Plugins_classPrivateFieldGet(Plugins_context, this).constructor.name;
    }
    if (Plugins_classPrivateFieldGet(Plugins_context, this).type) name = Plugins_classPrivateFieldGet(Plugins_context, this).type;
    if (Plugins_classPrivateFieldGet(Plugins_context, this).name) name = Plugins_classPrivateFieldGet(Plugins_context, this).name;
    if (Plugins_classPrivateFieldGet(Plugins_context, this).dom && Plugins_classPrivateFieldGet(Plugins_context, this).dom.id) id = Plugins_classPrivateFieldGet(Plugins_context, this).dom.id;
    if (Plugins_classPrivateFieldGet(Plugins_context, this).id) id = Plugins_classPrivateFieldGet(Plugins_context, this).id;
  }
  return name + (id ? '#' + id : '');
}
/**
 * Get debug prefix
 * @return {string} - Origin string
 */
function _debug_prefix() {
  return Plugins_assertClassBrand(_Plugins_brand, this, _get_context_name).call(this) + '->' + this.constructor.name + '::';
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Logic/Tracker.js
function Tracker_typeof(o) { "@babel/helpers - typeof"; return Tracker_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Tracker_typeof(o); }
function Tracker_toConsumableArray(arr) { return Tracker_arrayWithoutHoles(arr) || Tracker_iterableToArray(arr) || Tracker_unsupportedIterableToArray(arr) || Tracker_nonIterableSpread(); }
function Tracker_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Tracker_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Tracker_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Tracker_arrayLikeToArray(arr); }
function Tracker_slicedToArray(arr, i) { return Tracker_arrayWithHoles(arr) || Tracker_iterableToArrayLimit(arr, i) || Tracker_unsupportedIterableToArray(arr, i) || Tracker_nonIterableRest(); }
function Tracker_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Tracker_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Tracker_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Tracker_arrayLikeToArray(o, minLen); }
function Tracker_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Tracker_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Tracker_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Tracker_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Tracker_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Tracker_toPropertyKey(descriptor.key), descriptor); } }
function Tracker_createClass(Constructor, protoProps, staticProps) { if (protoProps) Tracker_defineProperties(Constructor.prototype, protoProps); if (staticProps) Tracker_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Tracker_toPropertyKey(t) { var i = Tracker_toPrimitive(t, "string"); return "symbol" == Tracker_typeof(i) ? i : i + ""; }
function Tracker_toPrimitive(t, r) { if ("object" != Tracker_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Tracker_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Tracker_classPrivateMethodInitSpec(obj, privateSet) { Tracker_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function Tracker_classPrivateFieldInitSpec(obj, privateMap, value) { Tracker_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Tracker_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Tracker_classPrivateFieldGet(s, a) { return s.get(Tracker_assertClassBrand(s, a)); }
function Tracker_classPrivateFieldSet(s, a, r) { return s.set(Tracker_assertClassBrand(s, a), r), r; }
function Tracker_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */


/**
 * @callback TrackingTrigger
 * @param {Tracker} tracker - Tracker instance that is running the trigger
 * @param {...*} event_args - Any number of additional arguments assigned by the event call the trigger
 * @return {boolean} - True if trigger matches and event should be fired
 */

/**
 * @callback TrackingGroup - Callback to supply a dynamic tracking group name
 * @param {Tracker} tracker - Tracker instance that is running the trigger
 * @param {...*} event_args - Any number of additional arguments assigned by the event call the trigger
 * @return {string} - Tracking group name
 */

/**
 * @callback TrackingDataCallback - Callback that can be used to fetch dynamic values for the TrackingData definition
 * @param {Tracker} tracker - Tracker instance that is running the trigger
 * @param {...*} event_args - Any number of additional arguments assigned by the event calling the trigger
 * @return {*} - Any value that should be set for the given property
 */

/**
 * @callback TrackingExecutor - Executes the tracking call
 * @param {Object} data - The tracking data
 * @return {void}
 */

/**
 * @typedef {Object} TrackingData - Data layer object
 * @property {...*|TrackingDataCallback} * - Any number of properties, values that are functions are executed as TrackingDataCallback
 */

/**
 * @typedef {Object} TrackerDefinition - Tracking definition object
 * @property {true|TrackingTrigger|Function} trigger - Event trigger function
 * @property {undefined|string} once - Unique reference name
 * @property {undefined|string|TrackingGroup|Function} group - Event grouping name or function
 * @property {TrackingData|Object} data - Data that is pushed to dataLayer
 */

/**
 * Tracking helper
 * @class
 */
var Tracker_debug = /*#__PURE__*/new WeakMap();
var _exec = /*#__PURE__*/new WeakMap();
var _events_fired = /*#__PURE__*/new WeakMap();
var _Tracker_brand = /*#__PURE__*/new WeakSet();
var Tracker = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Constructor
   * @constructor
   * @param {null|TrackingExecutor|Function} executor - Tracking function
   * @param {null|console} debug - Console or alike object to show debugging
   */
  function Tracker() {
    var executor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    Tracker_classCallCheck(this, Tracker);
    /**
     * Run tracker
     * @param {TrackerDefinition|Object} tracker - Tacking definition
     * @param {Array<*>} params - Info arguments
     * @return {void}
     */
    Tracker_classPrivateMethodInitSpec(this, _Tracker_brand);
    /**
     * Debug object
     * @private
     * @property
     * @type {null|console|Object}
     */
    Tracker_classPrivateFieldInitSpec(this, Tracker_debug, null);
    /**
     * Tracking function
     * @private
     * @property
     * @type {null|TrackingExecutor|Function}
     */
    Tracker_classPrivateFieldInitSpec(this, _exec, null);
    /**
     * Events fired once register
     * @private
     * @property
     * @type {Object}
     */
    Tracker_classPrivateFieldInitSpec(this, _events_fired, {});
    // Debugger instance
    Tracker_classPrivateFieldSet(Tracker_debug, this, debug);

    // Customizable executor
    if (typeof executor !== 'function') {
      executor = function executor(data) {
        window.dataLayer.push(data);
      };
    }
    Tracker_classPrivateFieldSet(_exec, this, executor);
  }

  /**
   * Debug getter
   * @public
   * @return {null|console|Object} - Debug reference
   */
  return Tracker_createClass(Tracker, [{
    key: "debug",
    get: function get() {
      return Tracker_classPrivateFieldGet(Tracker_debug, this);
    }

    /**
     * Run trackers
     * @private
     * @param {Array<TrackerDefinition>|TrackerDefinition} trackers - List of trackers or single tracker
     * @param {Array<*>} params - Info arguments
     * @return {void}
     */
  }, {
    key: "run",
    value: function run(trackers) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      if (!(trackers instanceof Array)) trackers = [trackers];

      // Add plugin as first reference
      params.unshift(this);

      // And run trackers
      for (var i = 0; i < trackers.length; i++) {
        Tracker_assertClassBrand(_Tracker_brand, this, _track).call(this, trackers[i], params);
      }
    }
  }, {
    key: "ranOnceAlready",
    value:
    /**
     * Check trackers once option
     * @public
     * @param {TrackerDefinition|Object} tracker - Tracking definition
     * @param {Array<*>} params - Info arguments
     * @return {boolean} - True if tracker was already run
     */
    function ranOnceAlready(tracker) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      if (tracker.once) {
        var group = Tracker_assertClassBrand(_Tracker_brand, this, _get_group).call(this, tracker, params);
        if (!Tracker_classPrivateFieldGet(_events_fired, this)[group]) Tracker_classPrivateFieldGet(_events_fired, this)[group] = [];
        if (Tracker_classPrivateFieldGet(_events_fired, this)[group].includes(tracker.once)) return true;
      }
      return false;
    }

    /**
     * Clear all or group specific once tracking
     * @public
     * @param {null|string} group - Group string to clear a specific event register
     * @return {void}
     */
  }, {
    key: "clearOnce",
    value: function clearOnce() {
      var group = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (group) {
        Tracker_classPrivateFieldGet(_events_fired, this)[group] = [];
      } else {
        Tracker_classPrivateFieldSet(_events_fired, this, {});
      }
    }

    /**
     * Track as completed
     * @private
     * @param {TrackerDefinition|Object} tracker - Tracking definition
     * @param {Array<*>} params - Info arguments
     * @return {void}
     */
  }], [{
    key: "getData",
    value:
    /**
     * Get tracking data
     * @public
     * @static
     * @param {TrackerDefinition|Object} tracker - Tracking definition
     * @param {Array<*>} params - Info arguments
     * @return {TrackingData|Object} - Compiled tracking data
     */
    function getData(tracker, params) {
      var data = cloneObject(tracker.data, true);
      var entries = Object.entries(data);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i = Tracker_slicedToArray(entries[i], 2),
          prop = _entries$i[0],
          value = _entries$i[1];
        if (typeof value === 'function') {
          data[prop] = value.apply(void 0, Tracker_toConsumableArray(params));
        }
      }
      return data;
    }
  }]);
}()));
function _track(tracker, params) {
  // Prevent events from firing more than once
  if (this.ranOnceAlready(tracker, params)) return;

  // Check for a tracking condition
  if (tracker.trigger === true || tracker.trigger.apply(tracker, Tracker_toConsumableArray(params))) {
    if (Tracker_classPrivateFieldGet(Tracker_debug, this)) Tracker_classPrivateFieldGet(Tracker_debug, this).log(this.constructor.name + '::track Triggered:', tracker, params);
    Tracker_assertClassBrand(_Tracker_brand, this, _track_once).call(this, tracker, params);
    Tracker_classPrivateFieldGet(_exec, this).call(this, this.constructor.getData(tracker, params));
  }
}
/**
 * Get tracking group
 * @private
 * @param {TrackerDefinition|Object} tracker - Tacking definition
 * @param {Array<*>} params - Info arguments
 * @return {string} - Group name
 */
function _get_group(tracker, params) {
  var group = tracker.group;
  if (typeof tracker.group === 'function') {
    group = tracker.group.apply(tracker, Tracker_toConsumableArray(params));
  }
  return group || 'default';
}
function _track_once(tracker, params) {
  if (tracker.once) {
    var group = Tracker_assertClassBrand(_Tracker_brand, this, _get_group).call(this, tracker, params);
    Tracker_classPrivateFieldGet(_events_fired, this)[group].push(tracker.once);
  }
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Number/convertBytes.js
/**
 * Convert bytes to readable number
 * @param {number} bytes - Bytes
 * @param {number} decimals - Number of decimals, default: 2
 * @param {number} style - Calculation style, default: 1024
 * @param {boolean} obj - Return object with values, default: false
 * @param {number} forceUnit - Convert to specific unit
 * @return {string|Object} - Converted string or value object
 */
function convertBytes(bytes) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1024;
  var obj = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var forceUnit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  // Ensure correct style
  if (style !== 1024 && style !== 1000) {
    style = 1024;
  }

  // Result object
  var res = {
    bytes: bytes <= 0 ? 0 : bytes,
    unit: 'bytes'
  };
  res.value = res.bytes;

  // Has no size
  if (res.bytes <= 0) {
    return obj ? res : '0 bytes';
  }

  // Available size units
  var sizes = style === 1000 ? ['bytes', 'kb', 'mb', 'gb', 'tb', 'pb', 'eb', 'zb', 'yb'] : ['bytes', 'kib', 'mib', 'gib', 'tib', 'pib', 'eib', 'zib', 'yib'];

  // Unit scope
  var i = typeof forceUnit === 'number' ? forceUnit : Math.floor(Math.log(res.bytes) / Math.log(style));

  // Number of decimals, considers values below 0 to be 0
  var dm = decimals <= 0 || sizes[i] === 'bytes' ? 0 : decimals;

  // Set value and unit
  res.value = (res.bytes / Math.pow(style, i)).toFixed(dm);
  res.unit = sizes[i];

  // Return
  return obj ? res : res.value + ' ' + res.unit;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Number/Ratio.js
function Ratio_typeof(o) { "@babel/helpers - typeof"; return Ratio_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Ratio_typeof(o); }
function Ratio_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Ratio_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Ratio_toPropertyKey(descriptor.key), descriptor); } }
function Ratio_createClass(Constructor, protoProps, staticProps) { if (protoProps) Ratio_defineProperties(Constructor.prototype, protoProps); if (staticProps) Ratio_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Ratio_toPropertyKey(t) { var i = Ratio_toPrimitive(t, "string"); return "symbol" == Ratio_typeof(i) ? i : i + ""; }
function Ratio_toPrimitive(t, r) { if ("object" != Ratio_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Ratio_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Ratio_classPrivateFieldInitSpec(obj, privateMap, value) { Ratio_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Ratio_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Ratio_classPrivateFieldGet(s, a) { return s.get(Ratio_assertClassBrand(s, a)); }
function Ratio_classPrivateFieldSet(s, a, r) { return s.set(Ratio_assertClassBrand(s, a), r), r; }
function Ratio_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */


/**
 * Ratio
 * @class
 */
var _s = /*#__PURE__*/new WeakMap();
var _r = /*#__PURE__*/new WeakMap();
var _x = /*#__PURE__*/new WeakMap();
var _y = /*#__PURE__*/new WeakMap();
var _w = /*#__PURE__*/new WeakMap();
var _h = /*#__PURE__*/new WeakMap();
var Ratio = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Constructor
   * @param {string|number} width - Width or string expression
   * @param {string|number} height - Height or separator
   * @param {string} separator - Ratio separator
   */
  function Ratio(width) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ':';
    Ratio_classCallCheck(this, Ratio);
    /**
     * Separator
     * @private
     * @property
     * @type {string}
     */
    Ratio_classPrivateFieldInitSpec(this, _s, ':');
    /**
     * Ratio
     * @private
     * @property
     * @type {number}
     */
    Ratio_classPrivateFieldInitSpec(this, _r, 0);
    /**
     * X ratio
     * @private
     * @property
     * @type {number}
     */
    Ratio_classPrivateFieldInitSpec(this, _x, 0);
    /**
     * Y ratio
     * @private
     * @property
     * @type {number}
     */
    Ratio_classPrivateFieldInitSpec(this, _y, 0);
    /**
     * Input width
     * @private
     * @property
     * @type {number}
     */
    Ratio_classPrivateFieldInitSpec(this, _w, 0);
    /**
     * Input height
     * @private
     * @property
     * @type {number}
     */
    Ratio_classPrivateFieldInitSpec(this, _h, 0);
    // Create new ratio with same values
    if (width instanceof Ratio) {
      height = width.w;
      separator = width.separator;
      width = width.h;
    } else if (typeof width === 'string') {
      // Argument combined values
      if (typeof height === 'string') {
        separator = height;
      }
      var nums = width.split(separator);
      width = parseInt(nums[0]);
      height = parseInt(nums[1]);
    }

    // Force invalid numbers to 0
    if (!Number.isInteger(width) || width < 0) width = 0;
    if (!Number.isInteger(height) || height < 0) height = 0;

    // Must be two integers above 0
    if (!width || !height || !Number.isInteger(width) || !Number.isInteger(height)) {
      throw new Error('The width and/or height property must be an integer larger than 0.');
    }

    // Set current properties
    this.separator = separator;
    Ratio_classPrivateFieldSet(_r, this, !width && !height ? 1 : gcd(width, height));
    Ratio_classPrivateFieldSet(_x, this, width / Ratio_classPrivateFieldGet(_r, this));
    Ratio_classPrivateFieldSet(_y, this, height / Ratio_classPrivateFieldGet(_r, this));
    Ratio_classPrivateFieldSet(_w, this, width);
    Ratio_classPrivateFieldSet(_h, this, height);
  }

  /**
   * Getter: Ratio value
   * @public
   * @return {number} - Ratio value
   */
  return Ratio_createClass(Ratio, [{
    key: "r",
    get: function get() {
      return Ratio_classPrivateFieldGet(_r, this);
    }

    /**
     * Getter: Input width
     * @public
     * @return {number} - Input width
     */
  }, {
    key: "w",
    get: function get() {
      return Ratio_classPrivateFieldGet(_w, this);
    }

    /**
     * Getter: Input height
     * @public
     * @return {number} - Input height
     */
  }, {
    key: "h",
    get: function get() {
      return Ratio_classPrivateFieldGet(_h, this);
    }

    /**
     * Getter: X ratio
     * @public
     * @return {number} - X ratio
     */
  }, {
    key: "x",
    get: function get() {
      return Ratio_classPrivateFieldGet(_x, this);
    }

    /**
     * Getter: Y ratio
     * @public
     * @return {number} - Y ratio
     */
  }, {
    key: "y",
    get: function get() {
      return Ratio_classPrivateFieldGet(_y, this);
    }

    /**
     * Getter: separator
     * @public
     * @return {string} - Separator string
     */
  }, {
    key: "separator",
    get: function get() {
      return Ratio_classPrivateFieldGet(_s, this);
    }

    /**
     * Setter: separator
     * @public
     * @param {string} str - Separator string
     * @return {void}
     */,
    set: function set(str) {
      if (typeof str !== 'string' || !str.length) {
        throw new Error('Invalid separator string, must contain at least one character.');
      }
      Ratio_classPrivateFieldSet(_s, this, str);
    }

    /**
     * To string converted
     * @public
     * @return {string} - Ratio expression
     */
  }, {
    key: "toString",
    value: function toString() {
      return Ratio_classPrivateFieldGet(_x, this) + Ratio_classPrivateFieldGet(_s, this) + Ratio_classPrivateFieldGet(_y, this);
    }
  }], [{
    key: "make",
    value:
    /**
     * Ratio factory
     * @param {string|number} width - Width or string expression
     * @param {string|number} height - Height or separator
     * @param {string} separator - Ratio separator
     * @return {Ratio} - New ratio instance
     */
    function make(width) {
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ':';
      return new Ratio(width, height, separator);
    }
  }]);
}()));
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Number/round.js
/**
 * Round value to specific decimals
 * @param {number} value - Number to round
 * @param {number} decimals - Number of decimals, default: 2
 * @return {number} - Rounded number
 */
function round_round(value) {
  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  decimals = Math.pow(10, decimals);
  return Math.round(value * decimals) / decimals;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/escapeHTML.js
/**
 * Escape html special chars
 * @param {string} text - String to escape
 * @return {string} - Escaped html string
 */
function escapeHTML(text) {
  var map = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#039;'
  };
  return text.replace(/[&<>"']/g, function (m) {
    return map[m];
  });
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/hex2rgb.js
/**
 * Hex to rgb/a css
 * Based on: https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb
 * @param {string} hex - CSS color hex value
 * @param {null|number} opacity - Opacity
 * @return {null|string} - CSS rgb/a color value
 */
function hex2rgb(hex) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  if (!result) return null;
  var fn = 'rgb';
  var values = [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
  if (opacity !== null) {
    fn += 'a';
    values.push(opacity > 1 ? opacity / 100 : opacity);
  }
  return "".concat(fn, "(").concat(values.join(','), ")");
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/strCamel2dash.js
/**
 * Convert camel case to dashed lower string
 * @param {string} str - String to convert
 * @return {string} - Converted string
 */
function strCamel2dash(str) {
  return str.replace(/^[A-Z]/g, function (s) {
    return '-' + s.toLowerCase();
  }).replace(/[A-Z]/g, function (s) {
    return '-' + s.toLowerCase();
  });
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/str2node.js
/**
 * Convert string to html
 * @param {string} str - HTML source string
 * @param {boolean} multiple - Contains multiple nodes, default: true
 * @return {null|HTMLElement|NodeList} - Element or collection of elements
 */
function str2node_str2node(str) {
  var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  str = str.trim();
  if (str.length) {
    var template = document.createElement('template');
    if ('content' in template) {
      template.innerHTML = str;
      if (multiple) {
        return template.content.childNodes;
      }
      return template.content.firstChild;
    }
  }
  return null;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/String/ucfirst.js
/**
 * Capitalize first character
 * Equivalent to PHPs ucfirst
 * @param {string} str - Subject string to be modified
 * @return {string} - Capitalized first character of string
 */
function ucfirst(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/Var/isEmpty.js
function isEmpty_typeof(o) { "@babel/helpers - typeof"; return isEmpty_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, isEmpty_typeof(o); }
/**
 * Requires
 */


/**
 * Check if value is empty
 * @param {*} value - Check if the given value is empty
 * @return {boolean} - True if the value is empty
 */
function isEmpty_isEmpty(value) {
  // Explicit empty/falsy values
  if (typeof value === 'undefined' || !value) return true;

  // Get type and check
  switch (isEmpty_typeof(value)) {
    case 'string':
      return !value.length;
    case 'object':
      if (value instanceof Date) return false;
      if (value instanceof Array) return !value.length;
      if (!isPojo_isPojo(value)) return typeof value.length !== 'undefined' ? !value.length : false;
      return !Object.keys(value).length;
  }

  // No idea, but it sure ain't empty
  return false;
}
;// CONCATENATED MODULE: ../../../ui-util/src/es6/index.js
/* !
 * @module      : @squirrel-forge/ui-util
 * @version     : 0.9.22
 * @license     : MIT
 * @copyright   : 2022 squirrel-forge
 * @author      : Daniel Hartwell aka. siux <me@siux.info>
 * @description : A collection of utilities, classes, functions and abstracts made for the browser and babel compatible.
 */

/**
 * Animation
 */









/**
 * Array
 */


/**
 * Data
 */



/**
 * Dev
 */




/**
 * DOM
 */










/**
 * Error
 */


/**
 * Events
 */











/**
 * HTTP
 */




/**
 * Layout
 */



/**
 * Logic
 */





/**
 * Number
 */









/**
 * Object
 */






/**
 * String
 */














/**
 * Var
 */


;// CONCATENATED MODULE: ../../../ui-core/src/js/States/ComponentStates.js
function ComponentStates_typeof(o) { "@babel/helpers - typeof"; return ComponentStates_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ComponentStates_typeof(o); }
function ComponentStates_classPrivateFieldInitSpec(obj, privateMap, value) { ComponentStates_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function ComponentStates_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function ComponentStates_classPrivateFieldGet(s, a) { return s.get(ComponentStates_assertClassBrand(s, a)); }
function ComponentStates_classPrivateFieldSet(s, a, r) { return s.set(ComponentStates_assertClassBrand(s, a), r), r; }
function ComponentStates_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function ComponentStates_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ComponentStates_toPropertyKey(descriptor.key), descriptor); } }
function ComponentStates_createClass(Constructor, protoProps, staticProps) { if (protoProps) ComponentStates_defineProperties(Constructor.prototype, protoProps); if (staticProps) ComponentStates_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function ComponentStates_toPropertyKey(t) { var i = ComponentStates_toPrimitive(t, "string"); return "symbol" == ComponentStates_typeof(i) ? i : i + ""; }
function ComponentStates_toPrimitive(t, r) { if ("object" != ComponentStates_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ComponentStates_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ComponentStates_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function ComponentStates_callSuper(t, o, e) { return o = ComponentStates_getPrototypeOf(o), ComponentStates_possibleConstructorReturn(t, ComponentStates_isNativeReflectConstruct() ? Reflect.construct(o, e || [], ComponentStates_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function ComponentStates_possibleConstructorReturn(self, call) { if (call && (ComponentStates_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ComponentStates_assertThisInitialized(self); }
function ComponentStates_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function ComponentStates_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (ComponentStates_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ComponentStates_getPrototypeOf(o) { ComponentStates_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ComponentStates_getPrototypeOf(o); }
function ComponentStates_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ComponentStates_setPrototypeOf(subClass, superClass); }
function ComponentStates_setPrototypeOf(o, p) { ComponentStates_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ComponentStates_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Component states exception
 * @class
 * @extends Exception
 */
var ComponentStatesException = /*#__PURE__*/function (_Exception) {
  function ComponentStatesException() {
    ComponentStates_classCallCheck(this, ComponentStatesException);
    return ComponentStates_callSuper(this, ComponentStatesException, arguments);
  }
  ComponentStates_inherits(ComponentStatesException, _Exception);
  return ComponentStates_createClass(ComponentStatesException);
}(Exception);
/**
 * @typedef {Object|true} ComponentStateDefinition - Component state definition
 * @property {undefined|null|boolean} global - By default state is global, set to: false for non global states
 * @property {undefined|null|string} classOn - CSS class to set when active
 * @property {undefined|null|string} classOff - CSS class to set when inactive
 * @property {undefined|null|Array<string>} unsets - Unset given states when this one becomes active
 */
/**
 * Component states
 * @class
 */
var _component = /*#__PURE__*/new WeakMap();
var _states = /*#__PURE__*/new WeakMap();
var _named = /*#__PURE__*/new WeakMap();
var _global = /*#__PURE__*/new WeakMap();
var _attribute = /*#__PURE__*/new WeakMap();
var ComponentStates = /*#__PURE__*/function () {
  /**
   * Constructor
   * @constructor
   * @param {UiComponent} component - Component element
   * @param {null|Object} states - States map
   */
  function ComponentStates(component) {
    var states = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    ComponentStates_classCallCheck(this, ComponentStates);
    /**
     * Component element
     * @private
     * @property
     * @type {null}
     */
    ComponentStates_classPrivateFieldInitSpec(this, _component, null);
    /**
     * Component states
     * @private
     * @property
     * @type {null}
     */
    ComponentStates_classPrivateFieldInitSpec(this, _states, null);
    /**
     * States by name
     * @private
     * @property
     * @type {Object}
     */
    ComponentStates_classPrivateFieldInitSpec(this, _named, {});
    /**
     * Global state
     * @private
     * @property
     * @type {null|string}
     */
    ComponentStates_classPrivateFieldInitSpec(this, _global, null);
    /**
     * Global state attribute
     * @private
     * @property
     * @type {string}
     */
    ComponentStates_classPrivateFieldInitSpec(this, _attribute, 'data-state');
    ComponentStates_classPrivateFieldSet(_component, this, component);
    if (states !== null && !isPojo_isPojo(states)) {
      throw new ComponentStatesException('Argument states must be null or a plain Object');
    } else if (states === null) {
      states = {
        initialized: {
          classOn: 'initialized'
        }
      };
    }
    ComponentStates_classPrivateFieldSet(_states, this, states);
  }

  /**
   * Global state getter
   * @public
   * @return {null|string} - Global state
   */
  return ComponentStates_createClass(ComponentStates, [{
    key: "global",
    get: function get() {
      return ComponentStates_classPrivateFieldGet(_global, this);
    }

    /**
     * Direct states access
     * @public
     * @return {Object} - States data object
     */
  }, {
    key: "exposed",
    get: function get() {
      return ComponentStates_classPrivateFieldGet(_states, this);
    }

    /**
     * Extend states
     * @public
     * @param {Object} states - States map
     * @return {void}
     */
  }, {
    key: "extend",
    value: function extend(states) {
      mergeObject_mergeObject(ComponentStates_classPrivateFieldGet(_states, this), states, true, true, true, false);
    }

    /**
     * State active
     * @public
     * @param {string} name - State name
     * @return {boolean} - State is active
     */
  }, {
    key: "is",
    value: function is(name) {
      return !!ComponentStates_classPrivateFieldGet(_named, this)[name];
    }

    /**
     * State defined
     * @public
     * @param {string} name - State name
     * @return {boolean} - State exists
     */
  }, {
    key: "has",
    value: function has(name) {
      return !!ComponentStates_classPrivateFieldGet(_states, this)[name];
    }

    /**
     * Get state info
     * @public
     * @param {string} name - State name
     * @return {Object} - State info object
     */
  }, {
    key: "get",
    value: function get(name) {
      var state = ComponentStates_classPrivateFieldGet(_states, this)[name];
      if (!state) throw new ComponentStatesException('Unknown state: ' + name);
      return state;
    }

    /**
     * Set state by name
     * @public
     * @param {string} name - State name
     * @return {void}
     */
  }, {
    key: "set",
    value: function set(name) {
      var state = this.get(name);
      var is_global = state === true || state.global !== false;
      var is_global_changed = false,
        to = null;
      var from = ComponentStates_classPrivateFieldGet(_global, this);
      if (is_global) {
        // Do not set globals unless changed
        if (name !== from) {
          is_global_changed = true;
          to = name;
        } else {
          // Skip along and ignore the set command
          return;
        }
      }

      // Complex state options
      if (state !== true) {
        // Unset any states
        if (state.unsets instanceof Array) {
          for (var i = 0; i < state.unsets.length; i++) {
            this.unset(state.unsets[i]);
          }
        }

        // Set/unset any class states
        if (state.classOn) ComponentStates_classPrivateFieldGet(_component, this).dom.classList.add(state.classOn);
        if (state.classOff) ComponentStates_classPrivateFieldGet(_component, this).dom.classList.remove(state.classOff);
      }

      // Default and global states are both global
      if (is_global) {
        ComponentStates_classPrivateFieldGet(_component, this).dom.setAttribute(ComponentStates_classPrivateFieldGet(_attribute, this), name);
        ComponentStates_classPrivateFieldSet(_global, this, name);
      }

      // Set individual state
      ComponentStates_classPrivateFieldGet(_named, this)[name] = true;

      // Dispatch corresponding event
      if (is_global_changed) {
        ComponentStates_classPrivateFieldGet(_component, this).dispatchEvent('state.changed', {
          from: from,
          to: to
        });
      } else {
        ComponentStates_classPrivateFieldGet(_component, this).dispatchEvent('state.set', {
          set: name
        });
      }
    }

    /**
     * Set state by name
     * @public
     * @param {string} name - State name
     * @return {void}
     */
  }, {
    key: "unset",
    value: function unset(name) {
      if (!ComponentStates_classPrivateFieldGet(_named, this)[name]) return;
      var state = this.get(name);
      var is_global = state === true || state.global !== false;

      // Complex state options
      if (state !== true) {
        // Set/unset any class states
        if (state.classOn) ComponentStates_classPrivateFieldGet(_component, this).dom.classList.remove(state.classOn);
        if (state.classOff) ComponentStates_classPrivateFieldGet(_component, this).dom.classList.add(state.classOff);
      }

      // Default and global states are both global
      if (is_global) {
        ComponentStates_classPrivateFieldGet(_component, this).dom.setAttribute(ComponentStates_classPrivateFieldGet(_attribute, this), 'null');
        ComponentStates_classPrivateFieldSet(_global, this, null);
      }

      // Set individual state
      ComponentStates_classPrivateFieldGet(_named, this)[name] = false;
      ComponentStates_classPrivateFieldGet(_component, this).dispatchEvent('state.unset', {
        unset: name
      });
    }
  }]);
}();
;// CONCATENATED MODULE: ../../../ui-core/src/js/Abstracts/UiComponent.js
function UiComponent_typeof(o) { "@babel/helpers - typeof"; return UiComponent_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiComponent_typeof(o); }
function UiComponent_slicedToArray(arr, i) { return UiComponent_arrayWithHoles(arr) || UiComponent_iterableToArrayLimit(arr, i) || UiComponent_unsupportedIterableToArray(arr, i) || UiComponent_nonIterableRest(); }
function UiComponent_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiComponent_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function UiComponent_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function UiComponent_toConsumableArray(arr) { return UiComponent_arrayWithoutHoles(arr) || UiComponent_iterableToArray(arr) || UiComponent_unsupportedIterableToArray(arr) || UiComponent_nonIterableSpread(); }
function UiComponent_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiComponent_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiComponent_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiComponent_arrayLikeToArray(o, minLen); }
function UiComponent_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function UiComponent_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return UiComponent_arrayLikeToArray(arr); }
function UiComponent_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiComponent_classPrivateMethodInitSpec(obj, privateSet) { UiComponent_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiComponent_classPrivateFieldInitSpec(obj, privateMap, value) { UiComponent_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiComponent_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiComponent_classPrivateFieldGet(s, a) { return s.get(UiComponent_assertClassBrand(s, a)); }
function UiComponent_classPrivateFieldSet(s, a, r) { return s.set(UiComponent_assertClassBrand(s, a), r), r; }
function UiComponent_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiComponent_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiComponent_toPropertyKey(descriptor.key), descriptor); } }
function UiComponent_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiComponent_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiComponent_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiComponent_toPropertyKey(t) { var i = UiComponent_toPrimitive(t, "string"); return "symbol" == UiComponent_typeof(i) ? i : i + ""; }
function UiComponent_toPrimitive(t, r) { if ("object" != UiComponent_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiComponent_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiComponent_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiComponent_callSuper(t, o, e) { return o = UiComponent_getPrototypeOf(o), UiComponent_possibleConstructorReturn(t, UiComponent_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiComponent_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiComponent_possibleConstructorReturn(self, call) { if (call && (UiComponent_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiComponent_assertThisInitialized(self); }
function UiComponent_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiComponent_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiComponent_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiComponent_getPrototypeOf(o) { UiComponent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiComponent_getPrototypeOf(o); }
function UiComponent_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiComponent_setPrototypeOf(subClass, superClass); }
function UiComponent_setPrototypeOf(o, p) { UiComponent_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiComponent_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * @typedef {Object} UiComponentDefaultConfig
 * @property {null|string} eventPrefix - Prefix for event type names
 */

/**
 * Ui component exception
 * @class
 * @extends Exception
 */
var UiComponentException = /*#__PURE__*/function (_Exception) {
  function UiComponentException() {
    UiComponent_classCallCheck(this, UiComponentException);
    return UiComponent_callSuper(this, UiComponentException, arguments);
  }
  UiComponent_inherits(UiComponentException, _Exception);
  return UiComponent_createClass(UiComponentException);
}(Exception);
/**
 * Ui component
 * @abstract
 * @class
 * @extends EventDispatcher
 */
var _dom = /*#__PURE__*/new WeakMap();
var _config = /*#__PURE__*/new WeakMap();
var UiComponent_states = /*#__PURE__*/new WeakMap();
var UiComponent_plugins = /*#__PURE__*/new WeakMap();
var _initialized = /*#__PURE__*/new WeakMap();
var _children = /*#__PURE__*/new WeakMap();
var _children_initialized = /*#__PURE__*/new WeakMap();
var _UiComponent_brand = /*#__PURE__*/new WeakSet();
var UiComponent_UiComponent = /*#__PURE__*/function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {HTMLElement} element - Dom element
   * @param {null|Object} settings - Config object
   * @param {Object} defaults - Default config
   * @param {Array<Object>} extend - Config defaults extension for inheritance
   * @param {Object} states - States definition
   * @param {Array<Function|Array<Function,*>>} plugins - Plugins to load
   * @param {null|EventDispatcher|HTMLElement} parent - Parent object
   * @param {null|console|Object} debug - Debug object
   * @param {boolean} init - Run init method
   */
  function UiComponent(element) {
    var _classPrivateFieldGet2, _classPrivateFieldGet3, _classPrivateFieldGet4;
    var _this;
    var _settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var extend = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var states = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var _plugins2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var parent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var debug = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
    var init = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : true;
    UiComponent_classCallCheck(this, UiComponent);
    _this = UiComponent_callSuper(this, UiComponent, [element, parent, debug]);
    /**
     * Load and merge element config
     * @private
     * @return {void}
     */
    UiComponent_classPrivateMethodInitSpec(_this, _UiComponent_brand);
    /**
     * Dom reference
     * @private
     * @property
     * @type {null|HTMLElement}
     */
    UiComponent_classPrivateFieldInitSpec(_this, _dom, null);
    /**
     * Component config
     * @private
     * @property
     * @type {null|Config}
     */
    UiComponent_classPrivateFieldInitSpec(_this, _config, null);
    /**
     * Component states
     * @private
     * @property
     * @type {null|ComponentStates}
     */
    UiComponent_classPrivateFieldInitSpec(_this, UiComponent_states, null);
    /**
     * Component plugins
     * @private
     * @property
     * @type {null|Plugins}
     */
    UiComponent_classPrivateFieldInitSpec(_this, UiComponent_plugins, null);
    /**
     * Initialized
     * @private
     * @property
     * @type {boolean}
     */
    UiComponent_classPrivateFieldInitSpec(_this, _initialized, false);
    /**
     * Component children
     * @private
     * @property
     * @type {Array}
     */
    UiComponent_classPrivateFieldInitSpec(_this, _children, []);
    /**
     * Children initialized
     * @private
     * @property
     * @type {boolean}
     */
    UiComponent_classPrivateFieldInitSpec(_this, _children_initialized, false);
    if (debug) window.console.warn('UiComponent.constructor >', _this.constructor.name, {
      element: element,
      settings: _settings,
      defaults: defaults,
      extend: extend,
      states: states,
      plugins: _plugins2,
      parent: parent,
      debug: debug,
      init: init
    });
    if (!(element instanceof HTMLElement)) throw new UiComponentException('Argument element must be a HTMLElement');
    UiComponent_classPrivateFieldSet(_dom, _this, element);

    // Require element id and mark as ui-component
    uniqid_requireUniqid(element, _this.constructor.name.toLowerCase() + '-', true);
    UiComponent_assertClassBrand(_UiComponent_brand, _this, _markAsUi).call(_this);

    // Initialize plugins and extend defaults
    extend = extend || [];
    UiComponent_classPrivateFieldSet(UiComponent_plugins, _this, _plugins2 ? new Plugins(_plugins2, _this, true, debug) : null);
    (_classPrivateFieldGet2 = UiComponent_classPrivateFieldGet(UiComponent_plugins, _this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.run('extendDefaultConfig', [extend]);

    // Create component config
    UiComponent_classPrivateFieldSet(_config, _this, new Config(defaults || {
      eventPrefix: null
    }, extend));

    // Set config options from attributes
    UiComponent_assertClassBrand(_UiComponent_brand, _this, _setConfigFromAttributes).call(_this);

    // Ensure the config property overrides any attributes
    UiComponent_assertClassBrand(_UiComponent_brand, _this, _loadElementConfig).call(_this);

    // Apply any plugin scoped configs
    (_classPrivateFieldGet3 = UiComponent_classPrivateFieldGet(UiComponent_plugins, _this)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.run('applyConfig', [_this.config]);

    // Allow for a forced extend of the config
    var override_extend = false;
    if (_settings && _settings.__forceExtend === true) {
      override_extend = true;
      delete _settings.__forceExtend;
    }

    // Apply settings explicitly provided by constructor arguments
    if (isPojo_isPojo(_settings)) _this.config.merge(_settings, override_extend);

    // Create states handler and extend with any plugin states
    UiComponent_classPrivateFieldSet(UiComponent_states, _this, new ComponentStates(_this, states || {}));
    (_classPrivateFieldGet4 = UiComponent_classPrivateFieldGet(UiComponent_plugins, _this)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.run('extendAvailableStates', [UiComponent_classPrivateFieldGet(UiComponent_states, _this)]);

    // Initialize component
    if (init) _this.init();
    return _this;
  }

  /**
   * Type getter
   * @public
   * @return {string} - Component type
   */
  UiComponent_inherits(UiComponent, _EventDispatcher);
  return UiComponent_createClass(UiComponent, [{
    key: "type",
    get: function get() {
      return this.constructor.name;
    }

    /**
     * Dom getter
     * @public
     * @return {HTMLElement} - Component dom element
     */
  }, {
    key: "dom",
    get: function get() {
      return UiComponent_classPrivateFieldGet(_dom, this);
    }

    /**
     * Config getter
     * @public
     * @return {Config} - Component config
     */
  }, {
    key: "config",
    get: function get() {
      return UiComponent_classPrivateFieldGet(_config, this);
    }

    /**
     * States getter
     * @public
     * @return {ComponentStates} - Component states
     */
  }, {
    key: "states",
    get: function get() {
      return UiComponent_classPrivateFieldGet(UiComponent_states, this);
    }

    /**
     * Plugins getter
     * @public
     * @return {Plugins} - Component plugins
     */
  }, {
    key: "plugins",
    get: function get() {
      return UiComponent_classPrivateFieldGet(UiComponent_plugins, this);
    }

    /**
     * Children getter
     * @public
     * @return {Array} - Component children
     */
  }, {
    key: "children",
    get: function get() {
      return UiComponent_toConsumableArray(UiComponent_classPrivateFieldGet(_children, this));
    }
  }, {
    key: "init",
    value:
    /**
     * Initialize component
     * @public
     * @param {null|Function} afterInitialized - Run function after initialized event
     * @return {void}
     */
    function init() {
      var _classPrivateFieldGet5,
        _this2 = this;
      var afterInitialized = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (UiComponent_classPrivateFieldGet(_initialized, this)) {
        throw new UiComponentException('Component already initialized');
      }
      UiComponent_classPrivateFieldSet(_initialized, this, true);
      (_classPrivateFieldGet5 = UiComponent_classPrivateFieldGet(UiComponent_plugins, this)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.run('initComponent');
      UiComponent_classPrivateFieldGet(UiComponent_states, this).set('initialized');

      // Delay the init dispatch and children for object availability reasons
      window.setTimeout(function () {
        _this2.dispatchEvent((_this2.config.get('eventPrefix') || '') + 'initialized');
        if (afterInitialized) afterInitialized(_this2);
      }, 1);
    }

    /**
     * Initialize child components
     * @protected
     * @return {void}
     */
  }, {
    key: "_initChildren",
    value: function _initChildren() {
      if (UiComponent_classPrivateFieldGet(_children_initialized, this)) {
        throw new UiComponentException('Component children already initialized');
      }
      UiComponent_classPrivateFieldSet(_children_initialized, this, true);
      var options = UiComponent_classPrivateFieldGet(_config, this).get('children');
      if (options && isPojo_isPojo(options)) {
        var types = Object.entries(options);
        if (types.length && this.debug) this.debug.group(this.constructor.name + '::_initChildren', types);
        for (var i = 0; i < types.length; i++) {
          // Build arguments
          var _types$i = UiComponent_slicedToArray(types[i], 2),
            name = _types$i[0],
            Construct = _types$i[1];
          var params = Construct instanceof Array ? Construct : [Construct];

          // Attempt to initialize each type
          try {
            var _assertClassBrand2;
            UiComponent_classPrivateFieldSet(_children, this, UiComponent_classPrivateFieldGet(_children, this).concat((_assertClassBrand2 = UiComponent_assertClassBrand(_UiComponent_brand, this, _initChildType)).call.apply(_assertClassBrand2, [this].concat(UiComponent_toConsumableArray(params)))));
          } catch (e) {
            throw new UiComponentException('Failed to initialize child type: ' + name, e);
          }
        }
        if (types.length && this.debug) this.debug.groupEnd();
        this.dispatchEvent((this.config.get('eventPrefix') || '') + 'children.initialized');
      }
    }

    /**
     * Initialize children by type
     * @private
     * @param {Function|UiComponent} Construct - Component constructor
     * @param {null|Object} settings - Config object
     * @param {Array} plugins - Plugins
     * @return {Array<UiComponent>} - Initialized components
     */
  }, {
    key: "eachChild",
    value:
    /**
     * Cycle children
     * @public
     * @param {string|Array|Function} filter - Filter or callback function
     * @param {null|Function} callback - Callback when using a filter
     * @return {void}
     */
    function eachChild(filter) {
      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (typeof filter === 'function') {
        callback = filter;
        filter = null;
      } else if (typeof callback !== 'function') {
        throw new UiComponentException('Argument callback must be a Function');
      }
      var x = 0;
      for (var i = 0; i < UiComponent_classPrivateFieldGet(_children, this).length; i++) {
        var child = UiComponent_classPrivateFieldGet(_children, this)[i];
        if (!filter || filter === child.type || filter instanceof Array && filter.includes(child.type)) {
          var br = callback(child, x, i);
          if (br === true) break;
          x++;
        }
      }
    }

    /**
     * Get config from attributes
     * @public
     * @param {Array<string>} disregard - Disregard options names
     * @return {null|Object} - Config object
     */
  }, {
    key: "getConfigFromAttributes",
    value: function getConfigFromAttributes() {
      var disregard = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['id', 'class', 'type', 'state', 'config'];
      if (UiComponent_classPrivateFieldGet(_dom, this).hasAttributes()) {
        var result = {};
        var attrs = UiComponent_classPrivateFieldGet(_dom, this).attributes;
        for (var i = 0; i < attrs.length; i++) {
          var name = this.constructor.configDotNameFromAttr(attrs[i].name);
          var value = this.constructor.configValueFromAttr(attrs[i].value);
          if (!disregard.includes(name)) {
            strCreate(name, value, result, true, true, this.debug);
          }
          var camel = this.constructor.configCamelNameFromDot(name);
          if (!disregard.includes(camel)) {
            strCreate(camel, value, result, true, true, this.debug);
          }
        }
        return result;
      }
      return null;
    }

    /**
     * Set config from attributes
     * @private
     * @return {void}
     */
  }, {
    key: "getDomRefs",
    value:
    /**
     * Get dom references from config
     * @public
     * @param {string} name - Reference name
     * @param {boolean} multiple - Set false to return one element
     * @return {null|HTMLElement|NodeList} - Dom reference/s
     */
    function getDomRefs(name) {
      var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var ref = this.config.get('dom.' + name);
      if (!name || !name.length || !ref) {
        return multiple ? [] : null;
      }
      var method = 'querySelector' + (multiple ? 'All' : '');
      return UiComponent_classPrivateFieldGet(_dom, this)[method](ref);
    }

    /**
     * Require dom references
     * @public
     * @param {Array<Array<string,boolean>>} refs - Reference requirements
     * @return {void}
     */
  }, {
    key: "requireDomRefs",
    value: function requireDomRefs(refs) {
      for (var i = 0; i < refs.length; i++) {
        var _refs$i = UiComponent_slicedToArray(refs[i], 2),
          name = _refs$i[0],
          multiple = _refs$i[1];
        var ref = this.getDomRefs(name, multiple);
        if (!ref || multiple && !ref.length) {
          throw new UiComponentException('Component requires a dom reference for: ' + name);
        }
      }
    }

    /**
     * Set state from event
     * @public
     * @param {Event} event - Event object
     * @param {string|null} prefix - Event type prefix
     * @return {void}
     */
  }, {
    key: "event_state",
    value: function event_state(event, prefix) {
      if (!event || typeof event.type !== 'string' || !event.type.length) {
        throw new UiComponentException('No valid event type available');
      }
      var type = event.type;
      if (typeof prefix !== 'string') prefix = this.config.get('eventPrefix');
      if (prefix && prefix.length && type.substring(0, prefix.length) === prefix) {
        type = type.substring(prefix.length);
      }
      this.states.set(type);
    }
  }], [{
    key: "configValueFromAttr",
    value:
    /**
     * Convert attribute value to config value
     * @public
     * @param {null|string} value - Attribute value
     * @return {*} - Converted value
     */
    function configValueFromAttr(value) {
      if (typeof value === 'string') {
        if (value.length) {
          if (value.toLowerCase() === 'true') {
            value = true;
          } else if (value.toLowerCase() === 'false') {
            value = false;
          } else if (/^[0-9]+$/.test(value)) {
            value = parseInt(value);
          } else if (/^[0-9]*\.[0-9]+$/.test(value)) {
            value = parseFloat(value);
          } else if (value[0] === '[' || value[0] === '{') {
            try {
              value = JSON.parse(value);
            } catch (error) {
              return value;
            }
          }
        } else {
          value = true;
        }
      }
      return value;
    }

    /**
     * Convert attribute name to config dot path
     * @public
     * @param {string} name - Attribute name
     * @return {string} - Config name
     */
  }, {
    key: "configDotNameFromAttr",
    value: function configDotNameFromAttr(name) {
      name = name.replace(/-/g, '.');
      if (name.substr(0, 5) === 'data.') {
        name = name.substr(5);
      }
      return name;
    }

    /**
     * Convert config dot path to camel case
     * @public
     * @param {string} name - Dot path
     * @return {string} - Camel case
     */
  }, {
    key: "configCamelNameFromDot",
    value: function configCamelNameFromDot(name) {
      return name.toLowerCase().replace(/\.(.)/g, function (m, g) {
        return g.toUpperCase();
      });
    }

    /**
     * Make ui component
     * @param {HTMLElement} element - Element
     * @param {null|Object} settings - Config object
     * @param {null|Array} plugins - Plugins array
     * @param {null|EventDispatcher|HTMLElement} parent - Parent object
     * @param {null|false|console|Object} debug - Debug object
     * @param {Function} Construct - Component constructor
     * @return {UiComponent} - Component object
     */
  }, {
    key: "make",
    value: function make(element) {
      var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var plugins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var debug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var Construct = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
      if (!(element instanceof HTMLElement)) {
        throw new UiComponentException('Argument element must be a HTMLElement');
      }
      Construct = Construct || this;
      if (debug === null) {
        var value = element.getAttribute('debug') || element.getAttribute('data-debug');
        if (Construct.configValueFromAttr(value) === true) {
          debug = console;
        }
      } else if (debug === true) {
        debug = console;
      }
      if (debug) window.console.warn('UiComponent.make', Construct.name, {
        element: element,
        settings: settings,
        plugins: plugins,
        parent: parent,
        debug: debug,
        Construct: Construct
      });
      return new Construct(element, settings, null, null, null, plugins, parent, debug, true);
    }

    /**
     * Initialize all ui elements in context
     * @param {null|Object} settings - Config object
     * @param {null|Array} plugins - Plugins array
     * @param {null|EventDispatcher|HTMLElement} parent - Parent object
     * @param {document|HTMLElement} context - Context to initialize
     * @param {null|console|Object} debug - Debug object
     * @param {Function} Construct - Component constructor
     * @return {Array<UiComponent>} - Initialized components
     */
  }, {
    key: "makeAll",
    value: function makeAll() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var plugins = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;
      var debug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      var Construct = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
      Construct = Construct || this;
      if (debug) window.console.warn('UiComponent.makeAll', Construct.name, {
        settings: settings,
        plugins: plugins,
        parent: parent,
        context: context,
        debug: debug,
        Construct: Construct
      });
      var result = [];
      var elements = context.querySelectorAll(Construct.selector);
      for (var i = 0; i < elements.length; i++) {
        result.push(Construct.make(elements[i], settings, plugins, parent, debug, Construct));
      }
      return result;
    }

    /**
     * Element selector getter
     * @public
     * @return {string} - Element selector
     */
  }, {
    key: "selector",
    get: function get() {
      return '[is="ui-component"]:not([data-state])';
    }
  }]);
}(EventDispatcher_EventDispatcher);
function _loadElementConfig() {
  var config = attributeJSON('data-config', UiComponent_classPrivateFieldGet(_dom, this));
  if (config) {
    this.config.merge(config);
    if (this.debug) this.debug.log(this.constructor.name + '::loadElementConfig', config);
  }
}
/**
 * Mark as ui component
 * @private
 * @return {void}
 */
function _markAsUi() {
  UiComponent_classPrivateFieldGet(_dom, this).setAttribute('data-ui', this.constructor.name);
}
function _initChildType(Construct) {
  var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var plugins = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  if (typeof Construct !== 'function') {
    throw new UiComponentException('Argument Construct must be a Function');
  }
  return Construct.makeAll(settings, plugins, this, UiComponent_classPrivateFieldGet(_dom, this), this.debug, Construct);
}
function _setConfigFromAttributes() {
  var result = this.getConfigFromAttributes();
  if (result) {
    this.config.merge(result);
    if (this.debug) this.debug.log(this.constructor.name + '::getConfigFromAttributes', result);
  }
}
;// CONCATENATED MODULE: ../../../ui-core/src/js/Abstracts/UiPlugin.js
function UiPlugin_typeof(o) { "@babel/helpers - typeof"; return UiPlugin_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiPlugin_typeof(o); }
function UiPlugin_classPrivateFieldInitSpec(obj, privateMap, value) { UiPlugin_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiPlugin_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiPlugin_defineProperty(obj, key, value) { key = UiPlugin_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function UiPlugin_classPrivateFieldSet(s, a, r) { return s.set(UiPlugin_assertClassBrand(s, a), r), r; }
function UiPlugin_classPrivateFieldGet(s, a) { return s.get(UiPlugin_assertClassBrand(s, a)); }
function UiPlugin_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiPlugin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiPlugin_toPropertyKey(descriptor.key), descriptor); } }
function UiPlugin_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiPlugin_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiPlugin_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiPlugin_toPropertyKey(t) { var i = UiPlugin_toPrimitive(t, "string"); return "symbol" == UiPlugin_typeof(i) ? i : i + ""; }
function UiPlugin_toPrimitive(t, r) { if ("object" != UiPlugin_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiPlugin_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiPlugin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiPlugin_callSuper(t, o, e) { return o = UiPlugin_getPrototypeOf(o), UiPlugin_possibleConstructorReturn(t, UiPlugin_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiPlugin_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiPlugin_possibleConstructorReturn(self, call) { if (call && (UiPlugin_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiPlugin_assertThisInitialized(self); }
function UiPlugin_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiPlugin_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiPlugin_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiPlugin_getPrototypeOf(o) { UiPlugin_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiPlugin_getPrototypeOf(o); }
function UiPlugin_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiPlugin_setPrototypeOf(subClass, superClass); }
function UiPlugin_setPrototypeOf(o, p) { UiPlugin_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiPlugin_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * UiPlugin exception
 * @class
 * @extends Exception
 */
var UiPluginException = /*#__PURE__*/function (_Exception) {
  function UiPluginException() {
    UiPlugin_classCallCheck(this, UiPluginException);
    return UiPlugin_callSuper(this, UiPluginException, arguments);
  }
  UiPlugin_inherits(UiPluginException, _Exception);
  return UiPlugin_createClass(UiPluginException);
}(Exception);
/**
 * UiPlugin class
 * @abstract
 * @class
 * @extends Plugin
 */
var _initComplete = /*#__PURE__*/new WeakMap();
var UiPlugin_UiPlugin = /*#__PURE__*/function (_Plugin) {
  /**
   * Constructor
   * @constructor
   * @param {Object} options - Options object
   * @param {Object|UiComponent} context - UiPlugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiPlugin() {
    var _this;
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    UiPlugin_classCallCheck(this, UiPlugin);
    _this = UiPlugin_callSuper(this, UiPlugin, [options, context, debug]);
    /**
     * Extend context config
     * @public
     * @property
     * @type {null|Object}
     */
    UiPlugin_defineProperty(_this, "extendConfig", null);
    /**
     * Extend states
     * @public
     * @property
     * @type {null|Object}
     */
    UiPlugin_defineProperty(_this, "extendStates", null);
    /**
     * Register dom events
     * @public
     * @property
     * @type {null|Array}
     */
    UiPlugin_defineProperty(_this, "registerEvents", null);
    /**
     * Apply scoped config
     * @public
     * @property
     * @type {boolean}
     */
    UiPlugin_defineProperty(_this, "configOptions", true);
    /**
     * Component init state
     * @private
     * @property
     * @type {boolean}
     */
    UiPlugin_classPrivateFieldInitSpec(_this, _initComplete, false);
    return _this;
  }

  /**
   * Extend components default config
   *  Is run during construction, some things might not be available yet
   * @public
   * @param {Array<Object>} extend - Extension register
   * @param {Object|UiComponent} context - UiPlugin context
   * @return {void}
   */
  UiPlugin_inherits(UiPlugin, _Plugin);
  return UiPlugin_createClass(UiPlugin, [{
    key: "extendDefaultConfig",
    value: function extendDefaultConfig(extend, context) {
      this._context_check(context);

      // Extend config defaults
      if (this.extendConfig) {
        if (!isPojo_isPojo(this.extendConfig)) {
          throw new UiPluginException('Config extension, must be a plain Object');
        }
        if (!Object.keys(this.extendConfig).length) {
          throw new UiPluginException('Config extension is empty');
        }
        extend.push(this.extendConfig);
      }
    }

    /**
     * Extend available component states
     *  Is run during construction, some things might not be available yet
     * @public
     * @param {Object|ComponentStates} states - Component states object
     * @param {Object|UiComponent} context - UiPlugin context
     * @return {void}
     */
  }, {
    key: "extendAvailableStates",
    value: function extendAvailableStates(states, context) {
      this._context_check(context);

      // Extend component states
      if (this.extendStates) {
        if (!isPojo_isPojo(this.extendConfig)) {
          throw new UiPluginException('States extension, must be a plain Object');
        }
        if (!Object.keys(this.extendConfig).length) {
          throw new UiPluginException('States extension is empty');
        }
        states.extend(this.extendStates);
      }
    }

    /**
     * Apply plugin scoped config to component
     *  Is run during construction, some things might not be available yet
     * @public
     * @param {Config|Object} config - Context config object
     * @param {UiComponent|Object} context - Plugin context
     * @return {void}
     */
  }, {
    key: "applyConfig",
    value: function applyConfig(config, context) {
      this._context_check(context);

      // Apply scoped config
      if (this.configOptions) {
        if (isPojo_isPojo(this.options)) {
          var scope = this.constructor.pluginName || this.constructor.name;
          var scoped = {};
          scoped[scope] = this.options;
          config.merge(scoped);
        } else if (this.debug) {
          this.debug.error(this.constructor.name + '::applyConfig Invalid options type:', UiPlugin_typeof(this.options));
        }
      }
    }

    /**
     * Init component
     *  Is run during construction, some things might not be available yet
     * @public
     * @param {Object|UiComponent} context - UiPlugin context
     * @return {void}
     */
  }, {
    key: "initComponent",
    value: function initComponent(context) {
      if (UiPlugin_classPrivateFieldGet(_initComplete, this)) {
        throw new UiPluginException('Plugin already initialized: ' + this.constructor.name);
      }
      UiPlugin_classPrivateFieldSet(_initComplete, this, true);
      this._context_check(context);

      // Register dom event listeners
      if (this.registerEvents) {
        if (!(this.registerEvents instanceof Array)) {
          throw new UiPluginException('Event register must be an Array');
        }
        context.addEventList(this.registerEvents);
      }
    }
  }]);
}(Plugin);
;// CONCATENATED MODULE: ../../../ui-core/src/js/Abstracts/UiTemplate.js
function UiTemplate_typeof(o) { "@babel/helpers - typeof"; return UiTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiTemplate_typeof(o); }
function UiTemplate_toConsumableArray(arr) { return UiTemplate_arrayWithoutHoles(arr) || UiTemplate_iterableToArray(arr) || UiTemplate_unsupportedIterableToArray(arr) || UiTemplate_nonIterableSpread(); }
function UiTemplate_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiTemplate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiTemplate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiTemplate_arrayLikeToArray(o, minLen); }
function UiTemplate_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function UiTemplate_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return UiTemplate_arrayLikeToArray(arr); }
function UiTemplate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiTemplate_defineProperty(obj, key, value) { key = UiTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function UiTemplate_classPrivateFieldInitSpec(obj, privateMap, value) { UiTemplate_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiTemplate_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiTemplate_classPrivateFieldSet(s, a, r) { return s.set(UiTemplate_assertClassBrand(s, a), r), r; }
function UiTemplate_classPrivateFieldGet(s, a) { return s.get(UiTemplate_assertClassBrand(s, a)); }
function UiTemplate_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiTemplate_toPropertyKey(descriptor.key), descriptor); } }
function UiTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiTemplate_toPropertyKey(t) { var i = UiTemplate_toPrimitive(t, "string"); return "symbol" == UiTemplate_typeof(i) ? i : i + ""; }
function UiTemplate_toPrimitive(t, r) { if ("object" != UiTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiTemplate_callSuper(t, o, e) { return o = UiTemplate_getPrototypeOf(o), UiTemplate_possibleConstructorReturn(t, UiTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiTemplate_possibleConstructorReturn(self, call) { if (call && (UiTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiTemplate_assertThisInitialized(self); }
function UiTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiTemplate_getPrototypeOf(o) { UiTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiTemplate_getPrototypeOf(o); }
function UiTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiTemplate_setPrototypeOf(subClass, superClass); }
function UiTemplate_setPrototypeOf(o, p) { UiTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Ui template exception
 * @class
 * @extends Exception
 */
var UiTemplate_UiTemplateException = /*#__PURE__*/function (_Exception) {
  function UiTemplateException() {
    UiTemplate_classCallCheck(this, UiTemplateException);
    return UiTemplate_callSuper(this, UiTemplateException, arguments);
  }
  UiTemplate_inherits(UiTemplateException, _Exception);
  return UiTemplate_createClass(UiTemplateException);
}(Exception);
/**
 * @typedef {Object} UiTemplateData
 * @property {*} * - Any required template value
 */
/**
 * @typedef {Object} UiDefaultsTemplateData
 * @property {null|string[]} classes - List of classes
 * @property {null|string|string[]} attributes - List of attributes
 */
/**
 * @typedef {Object} UiProcessedDefaultsTemplateData
 * @property {string[]} classes - List of classes
 * @property {string[]} attributes - List of attributes
 */
/**
 * Ui template
 * @abstract
 * @class
 */
var UiTemplate_data = /*#__PURE__*/new WeakMap();
var _extend = /*#__PURE__*/new WeakMap();
var UiTemplate = /*#__PURE__*/function () {
  /**
   * Constructor
   * @constructor
   * @param {null|UiTemplateData|Object} data - Template data
   * @param {null|console} debug - Debug object
   */
  function UiTemplate() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    UiTemplate_classCallCheck(this, UiTemplate);
    /**
     * Template data
     * @private
     * @property
     * @type {null|Object}
     */
    UiTemplate_classPrivateFieldInitSpec(this, UiTemplate_data, null);
    /**
     * Extend data
     * @private
     * @property
     * @type {boolean}
     */
    UiTemplate_classPrivateFieldInitSpec(this, _extend, true);
    /**
     * Debug object
     * @public
     * @property
     * @type {null|console|Object}
     */
    UiTemplate_defineProperty(this, "debug", null);
    /**
     * Template render error output
     * @public
     * @property
     * @type {null|string}
     */
    UiTemplate_defineProperty(this, "errorMessage", null);
    /**
     * Template default data
     * @protected
     * @property
     * @type {null|Object}
     */
    UiTemplate_defineProperty(this, "_defaults", null);
    this.debug = debug;
    if (data) this.data = data;
  }

  /**
   * Template render method
   * @abstract
   * @protected
   * @param {UiTemplateData|Object} data - Template data
   * @return {string} - Rendered template
   */
  return UiTemplate_createClass(UiTemplate, [{
    key: "_render",
    value: function _render(data) {
      if (this.debug) this.debug.warn(this.constructor.name + '::_render', data);
      throw new UiTemplate_UiTemplateException('Template requires a render method');
    }

    /**
     * Template validate method
     * @abstract
     * @protected
     * @param {UiTemplateData|Object} data - Template data
     * @throws UiTemplateException
     * @return {void}
     */
  }, {
    key: "_validate",
    value: function _validate(data) {
      if (this.debug) this.debug.warn(this.constructor.name + '::_validate', data);
      throw new UiTemplate_UiTemplateException('Template requires a validate method');
    }

    /**
     * Extend getter
     * @public
     * @return {boolean}
     */
  }, {
    key: "extend",
    get: function get() {
      return UiTemplate_classPrivateFieldGet(_extend, this);
    }

    /**
     * Extend setter
     * @public
     * @param state
     */,
    set: function set(state) {
      if (typeof state !== 'boolean') throw new UiTemplate_UiTemplateException('Extend must be a boolean value');
      UiTemplate_classPrivateFieldSet(_extend, this, state);
    }

    /**
     * Data getter
     * @public
     * @return {Object|null} - Template data
     */
  }, {
    key: "data",
    get: function get() {
      return UiTemplate_classPrivateFieldGet(UiTemplate_data, this);
    }

    /**
     * Data setter
     * @public
     * @param {UiTemplateData|Object} data - Template data
     * @return {void}
     */,
    set: function set(data) {
      if (!isPojo_isPojo(data)) throw new UiTemplate_UiTemplateException('Cannot set invalid template data, must be a plain object');
      UiTemplate_classPrivateFieldSet(UiTemplate_data, this, data);
    }

    /**
     * Process default data
     * @protected
     * @param {UiTemplateData|Object} data - Data object
     * @param {UiDefaultsTemplateData|Object} defaults - Default data
     * @param {null|string} addId - Add id attribute
     * @return {UiProcessedDefaultsTemplateData} - Processed defaults
     */
  }, {
    key: "_process_defaults",
    value: function _process_defaults(data, defaults) {
      var addId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var classes = (defaults === null || defaults === void 0 ? void 0 : defaults.classes) || [];
      if (data.classes instanceof Array) {
        classes.push.apply(classes, UiTemplate_toConsumableArray(data.classes));
      } else if (typeof data.classes === 'string') {
        classes.push(data.classes);
      }
      var attributes = (defaults === null || defaults === void 0 ? void 0 : defaults.attributes) || [];
      if (addId && data.id) attributes.push("id=\"".concat(data.id, "\""));
      if (data.attributes instanceof Array) {
        attributes.push.apply(attributes, UiTemplate_toConsumableArray(data.attributes));
      } else if (typeof data.attributes === 'string') {
        attributes.push(data.attributes);
      }
      return {
        classes: classes,
        attributes: attributes
      };
    }

    /**
     * Render template
     * @public
     * @param {null|UiTemplateData|Object} data - Template data
     * @return {string} - Rendered template
     */
  }, {
    key: "render",
    value: function render() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (!isPojo_isPojo(this._defaults)) throw new UiTemplate_UiTemplateException('Invalid template defaults data');
      if (data) this.data = data;
      if (!isPojo_isPojo(UiTemplate_classPrivateFieldGet(UiTemplate_data, this))) throw new UiTemplate_UiTemplateException('Invalid template data, must be a plain object');
      var compiled = {};
      mergeObject_mergeObject(compiled, this._defaults, true, true);
      mergeObject_mergeObject(compiled, UiTemplate_classPrivateFieldGet(UiTemplate_data, this), UiTemplate_classPrivateFieldGet(_extend, this), true);
      this._validate(compiled);
      if (this.debug) this.debug.log(this.constructor.name + '::render', compiled);
      return this._render(compiled);
    }

    /**
     * Render multiple templates
     * @public
     * @param {Array<UiTemplateData|Object>} data - Template data list
     * @param {boolean} asArray - Return result as array
     * @return {string|Array<string>} - Rendered templates
     */
  }, {
    key: "loop",
    value: function loop(data) {
      var asArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var result = [];
      for (var i = 0; i < data.length; i++) {
        result.push(this.render(data));
      }
      return asArray ? result : result.join('');
    }

    /**
     * Render as node
     * @public
     * @param {null|UiTemplateData|Object|Array<UiTemplateData|Object>} data - Template data /list
     * @return {NodeList|Array} - Rendered nodes or empty array
     */
  }, {
    key: "node",
    value: function node() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var rendered = data instanceof Array ? this.loop(data) : this.render(data);
      if (rendered) return str2node_str2node(rendered);
      return [];
    }

    /**
     * Append rendered template
     * @public
     * @param {HTMLElement} to - Element to append to
     * @param {null|Object|Array} data - Template data /list
     * @return {NodeList|Array} - Rendered nodes or empty array
     */
  }, {
    key: "append",
    value: function append(to) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (!(to instanceof HTMLElement)) throw new UiTemplate_UiTemplateException('Requires a HTMLElement to append to');
      var nodes = this.node(data);
      for (var i = 0; i < nodes.length; i++) {
        to.appendChild(nodes[i]);
      }
      return nodes;
    }

    /**
     * To string conversion
     * @public
     * @return {string} - rendered template
     */
  }, {
    key: "toString",
    value: function toString() {
      var rendered;
      try {
        rendered = this.render();
      } catch (e) {
        if (this.debug) this.debug.error(this.constructor.name + '::toString', e);
        rendered = this.errorMessage;
      }
      if (typeof rendered !== 'string') {
        rendered = "<!-- render error: ".concat(this.constructor.name, " with: ").concat(JSON.stringify(UiTemplate_classPrivateFieldGet(UiTemplate_data, this)), " -->");
      }
      return rendered;
    }
  }], [{
    key: "dom",
    value:
    /**
     * Load template from dom
     * @public
     * @static
     * @param {string} id - Element id
     * @return {string} - Template string
     */
    function dom(id) {
      var template = document.getElementById(id);
      if (!template) throw new UiTemplate_UiTemplateException('Template not found: ' + id);
      return template.innerHTML.trim();
    }
  }]);
}();
;// CONCATENATED MODULE: ../../../ui-core/src/js/Renderers/UiTemplateRenderer.js
function UiTemplateRenderer_slicedToArray(arr, i) { return UiTemplateRenderer_arrayWithHoles(arr) || UiTemplateRenderer_iterableToArrayLimit(arr, i) || UiTemplateRenderer_unsupportedIterableToArray(arr, i) || UiTemplateRenderer_nonIterableRest(); }
function UiTemplateRenderer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiTemplateRenderer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiTemplateRenderer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiTemplateRenderer_arrayLikeToArray(o, minLen); }
function UiTemplateRenderer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiTemplateRenderer_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function UiTemplateRenderer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function UiTemplateRenderer_typeof(o) { "@babel/helpers - typeof"; return UiTemplateRenderer_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiTemplateRenderer_typeof(o); }
function UiTemplateRenderer_defineProperty(obj, key, value) { key = UiTemplateRenderer_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function UiTemplateRenderer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiTemplateRenderer_toPropertyKey(descriptor.key), descriptor); } }
function UiTemplateRenderer_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiTemplateRenderer_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiTemplateRenderer_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiTemplateRenderer_toPropertyKey(t) { var i = UiTemplateRenderer_toPrimitive(t, "string"); return "symbol" == UiTemplateRenderer_typeof(i) ? i : i + ""; }
function UiTemplateRenderer_toPrimitive(t, r) { if ("object" != UiTemplateRenderer_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiTemplateRenderer_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiTemplateRenderer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiTemplateRenderer_callSuper(t, o, e) { return o = UiTemplateRenderer_getPrototypeOf(o), UiTemplateRenderer_possibleConstructorReturn(t, UiTemplateRenderer_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiTemplateRenderer_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiTemplateRenderer_possibleConstructorReturn(self, call) { if (call && (UiTemplateRenderer_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiTemplateRenderer_assertThisInitialized(self); }
function UiTemplateRenderer_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiTemplateRenderer_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiTemplateRenderer_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiTemplateRenderer_getPrototypeOf(o) { UiTemplateRenderer_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiTemplateRenderer_getPrototypeOf(o); }
function UiTemplateRenderer_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiTemplateRenderer_setPrototypeOf(subClass, superClass); }
function UiTemplateRenderer_setPrototypeOf(o, p) { UiTemplateRenderer_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiTemplateRenderer_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Ui template renderer exception
 * @class
 * @extends Exception
 */
var UiTemplateRendererException = /*#__PURE__*/function (_Exception) {
  function UiTemplateRendererException() {
    UiTemplateRenderer_classCallCheck(this, UiTemplateRendererException);
    return UiTemplateRenderer_callSuper(this, UiTemplateRendererException, arguments);
  }
  UiTemplateRenderer_inherits(UiTemplateRendererException, _Exception);
  return UiTemplateRenderer_createClass(UiTemplateRendererException);
}(Exception);
/**
 * @typedef {string|UiTemplateRendererTemplateData|Array<UiTemplateRendererTemplateData>|Function} UiTemplateRendererData
 */
/**
 * @typedef {Object} UiTemplateRendererTemplateData
 * @property {string} template - Template reference name
 * @property {UiTemplateData} data - Template data
 * @property {UiTemplateRendererCompileData} as - Precompile template data
 */
/**
 * @typedef {Object} UiTemplateRendererCompileData
 * @property {UiTemplateRendererData} * - Any template data property that needs to be compiled
 */
/**
 * Example nested data
 * {
 *   template : 'name',
 *   data : {},
 *   as : {
 *     id : () => { return 'foo'; },
 *     content : [
 *       {
 *         template : 'name',
 *         data : {...},
 *         as : {...},
 *       },
 *       'foo',
 *     ],
 *     'header.controls.custom' => 'foo',
 * };
 */
/**
 * Ui template renderer
 * @class
 */
var UiTemplateRenderer = /*#__PURE__*/function () {
  function UiTemplateRenderer() {
    UiTemplateRenderer_classCallCheck(this, UiTemplateRenderer);
  }
  return UiTemplateRenderer_createClass(UiTemplateRenderer, null, [{
    key: "isRenderData",
    value:
    /**
     * Check for render data structure
     * @public
     * @static
     * @param data
     * @return {boolean} - True if render data
     */
    function isRenderData(data) {
      return isPojo_isPojo(data) && typeof data.template === 'string' && isPojo_isPojo(data.data);
    }

    /**
     * Debug object
     * @public
     * @static
     * @property
     * @type {null|console|Object}
     */
  }, {
    key: "add",
    value:
    /**
     * Set template
     * @public
     * @static
     * @param {string} name - Template reference
     * @param {UiTemplate} tmpl - Template instance
     * @return {void}
     */
    function add(name, tmpl) {
      if (UiTemplateRenderer_typeof(tmpl) !== 'object') throw new UiTemplateRendererException('Must be a template object: ' + name);
      if (this.tmpl[name]) throw new UiTemplateRendererException('Template already defined: ' + name);
      this.tmpl[name] = tmpl;
    }

    /**
     * Require template
     * @public
     * @static
     * @param {string} name - Template reference
     * @param {UiTemplate} tmpl - Template instance
     * @return {void}
     */
  }, {
    key: "require",
    value: function require(name, tmpl) {
      try {
        this.add(name, tmpl);
      } catch (e) {
        if (UiTemplateRenderer_typeof(tmpl) !== 'object') throw e;
      }
    }

    /**
     * Get template class
     * @public
     * @static
     * @param {string} name - Template reference
     * @return {UiTemplate} - Template instance
     */
  }, {
    key: "get",
    value: function get(name) {
      if (this.tmpl && this.tmpl[name]) return this.tmpl[name];
      throw new UiTemplateRendererException('Unknown template: ' + name);
    }

    /**
     * Render data.as block
     * @public
     * @static
     * @param {Object} data - As data block
     * @param {string} trace - Trace string
     * @return {Object} - Rendered object data
     */
  }, {
    key: "as",
    value: function as(data, trace) {
      var result = {};
      var entries = Object.entries(data);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i = UiTemplateRenderer_slicedToArray(entries[i], 2),
          item_path = _entries$i[0],
          item_data = _entries$i[1];
        var rendered = this.recursive(item_data, trace + '.' + item_path);
        strCreate(item_path, rendered, result, true, false, this.debug);
      }
      return result;
    }

    /**
     * Render data
     * @public
     * @static
     * @param {UiTemplateRendererTemplateData} data - Render object
     * @param {string} trace - Trace string
     * @return {string} - Rendered template
     */
  }, {
    key: "data",
    value: function data(_data, trace) {
      var tmpl = this.get(_data.template);
      if (this.debug) this.debug.log(this.name + '::data template:', _data.template, '[' + trace + ']');
      if (isPojo_isPojo(_data.as)) {
        var as = this.as(_data.as, trace + '.as');
        if (this.debug) this.debug.log(this.name + '::data as:', as, '[' + trace + ']');
        mergeObject_mergeObject(_data.data, as, true, true);
      }
      return tmpl.render(_data.data);
    }

    /**
     * Render recursive
     * @public
     * @static
     * @param {UiTemplateRendererData} data - Render object or array
     * @param {string} trace - Trace string
     * @return {string|*[]} - Rendered data
     */
  }, {
    key: "recursive",
    value: function recursive(data, trace) {
      var to = UiTemplateRenderer_typeof(data);
      if (to === 'string') {
        return data;
      } else if (to === 'function') {
        // Render custom function
        var result;
        try {
          result = data(trace);
        } catch (e) {
          throw new UiTemplateRendererException('Failed to render custom callback [' + trace + ']', e);
        }
        if (typeof result !== 'string') throw new UiTemplateRendererException('A custom callback must always return a string [' + trace + ']');
        return result;
      } else if (data instanceof Array) {
        // Render array of unknowns
        var _result = [];
        for (var i = 0; i < data.length; i++) {
          _result.push(this.recursive(data[i], trace + "[".concat(i, "]")));
        }

        // Keep array structure for processing inside template
        if (_result[0] === this.keepMarker) {
          _result.shift();
          return _result;
        }
        return _result.join('');
      } else if (this.isRenderData(data)) {
        return this.data(data, trace);
      } else if (isPojo_isPojo(data) && data[this.keepMarker] === true) {
        return data;
      } else if (typeof data.toString === 'function') {
        return data.toString();
      } else {
        if (this.debug) this.debug.error(this.name + '::render', data);
        throw new UiTemplateRendererException('Unknown data type: ' + UiTemplateRenderer_typeof(data) + ' [' + trace + ']');
      }
    }

    /**
     * Render
     * @public
     * @static
     * @param {UiTemplateRendererData} data - Render object or array
     * @return {string} - Rendered data
     */
  }, {
    key: "render",
    value: function render(data) {
      if (this.debug) this.debug.groupCollapsed(this.name + '::render');
      var result = this.recursive(data, 'data');
      if (this.debug) this.debug.groupEnd();
      return result;
    }

    /**
     * Render as node
     * @public
     * @static
     * @param {null|UiTemplateData|Object|Array<UiTemplateData|Object>} data - Template data /list
     * @return {NodeList|Array} - Rendered nodes or empty array
     */
  }, {
    key: "node",
    value: function node() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var rendered = this.render(data);
      if (rendered) return str2node_str2node(rendered);
      return [];
    }

    /**
     * Append rendered data
     * @public
     * @static
     * @param {HTMLElement} to - Element to append to
     * @param {null|Object|Array} data - Template data /list
     * @return {NodeList|Array} - Rendered nodes or empty array
     */
  }, {
    key: "append",
    value: function append(to) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (!(to instanceof HTMLElement)) throw new UiTemplateException('Requires a HTMLElement to append to');
      var nodes = this.node(data);
      for (var i = 0; i < nodes.length; i++) {
        to.appendChild(nodes[i]);
      }
      return nodes;
    }
  }]);
}();
UiTemplateRenderer_defineProperty(UiTemplateRenderer, "debug", null);
/**
 * Templates reference
 * @public
 * @static
 * @type {Object}
 */
UiTemplateRenderer_defineProperty(UiTemplateRenderer, "tmpl", {});
/**
 * Keep marker
 * @public
 * @static
 * @property
 * @type {string}
 */
UiTemplateRenderer_defineProperty(UiTemplateRenderer, "keepMarker", '__keep__');
;// CONCATENATED MODULE: ../../../ui-core/src/js/States/ElementClassStates.js
function ElementClassStates_typeof(o) { "@babel/helpers - typeof"; return ElementClassStates_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ElementClassStates_typeof(o); }
function ElementClassStates_classPrivateMethodInitSpec(obj, privateSet) { ElementClassStates_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function ElementClassStates_classPrivateFieldInitSpec(obj, privateMap, value) { ElementClassStates_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function ElementClassStates_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function ElementClassStates_classPrivateFieldGet(s, a) { return s.get(ElementClassStates_assertClassBrand(s, a)); }
function ElementClassStates_classPrivateFieldSet(s, a, r) { return s.set(ElementClassStates_assertClassBrand(s, a), r), r; }
function ElementClassStates_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function ElementClassStates_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ElementClassStates_toPropertyKey(descriptor.key), descriptor); } }
function ElementClassStates_createClass(Constructor, protoProps, staticProps) { if (protoProps) ElementClassStates_defineProperties(Constructor.prototype, protoProps); if (staticProps) ElementClassStates_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function ElementClassStates_toPropertyKey(t) { var i = ElementClassStates_toPrimitive(t, "string"); return "symbol" == ElementClassStates_typeof(i) ? i : i + ""; }
function ElementClassStates_toPrimitive(t, r) { if ("object" != ElementClassStates_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ElementClassStates_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ElementClassStates_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function ElementClassStates_callSuper(t, o, e) { return o = ElementClassStates_getPrototypeOf(o), ElementClassStates_possibleConstructorReturn(t, ElementClassStates_isNativeReflectConstruct() ? Reflect.construct(o, e || [], ElementClassStates_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function ElementClassStates_possibleConstructorReturn(self, call) { if (call && (ElementClassStates_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ElementClassStates_assertThisInitialized(self); }
function ElementClassStates_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function ElementClassStates_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (ElementClassStates_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ElementClassStates_getPrototypeOf(o) { ElementClassStates_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ElementClassStates_getPrototypeOf(o); }
function ElementClassStates_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ElementClassStates_setPrototypeOf(subClass, superClass); }
function ElementClassStates_setPrototypeOf(o, p) { ElementClassStates_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ElementClassStates_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Element class states exception
 * @class
 * @extends Exception
 */
var ElementClassStatesException = /*#__PURE__*/function (_Exception) {
  function ElementClassStatesException() {
    ElementClassStates_classCallCheck(this, ElementClassStatesException);
    return ElementClassStates_callSuper(this, ElementClassStatesException, arguments);
  }
  ElementClassStates_inherits(ElementClassStatesException, _Exception);
  return ElementClassStates_createClass(ElementClassStatesException);
}(Exception);
/**
 * @typedef {Object|true} ElementClassStateDefinition - Component state definition
 * @property {undefined|null|string} classOn - CSS class to set when active
 * @property {undefined|null|Array<string>} unsets - Unset given states when this one becomes active
 */
/**
 * Element class states
 * @class
 */
var ElementClassStates_states = /*#__PURE__*/new WeakMap();
var _autoUnsetRefs = /*#__PURE__*/new WeakMap();
var _defaultTimeout = /*#__PURE__*/new WeakMap();
var _ElementClassStates_brand = /*#__PURE__*/new WeakSet();
var ElementClassStates_ElementClassStates = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} states - States map
   */
  function ElementClassStates() {
    var states = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    ElementClassStates_classCallCheck(this, ElementClassStates);
    /**
     * Clear auto unset timeout
     * @private
     * @param {string} id - Element id
     * @return {void}
     */
    ElementClassStates_classPrivateMethodInitSpec(this, _ElementClassStates_brand);
    /**
     * Class states
     * @private
     * @property
     * @type {null|Object}
     */
    ElementClassStates_classPrivateFieldInitSpec(this, ElementClassStates_states, null);
    /**
     * Auto unset reference data
     * @private
     * @property
     * @type {Object}
     */
    ElementClassStates_classPrivateFieldInitSpec(this, _autoUnsetRefs, {});
    /**
     * Default timeout delay
     * @private
     * @property
     * @type {number}
     */
    ElementClassStates_classPrivateFieldInitSpec(this, _defaultTimeout, 600);
    if (!isPojo(states)) {
      throw new ElementClassStatesException('Argument states must be null or a plain Object');
    }
    ElementClassStates_classPrivateFieldSet(ElementClassStates_states, this, states);
  }

  /**
   * Direct states access
   * @public
   * @return {Object} - States data object
   */
  return ElementClassStates_createClass(ElementClassStates, [{
    key: "exposed",
    get: function get() {
      return ElementClassStates_classPrivateFieldGet(ElementClassStates_states, this);
    }

    /**
     * Extend states
     * @public
     * @param {Object} states - States map
     * @return {void}
     */
  }, {
    key: "extend",
    value: function extend(states) {
      mergeObject(ElementClassStates_classPrivateFieldGet(ElementClassStates_states, this), states, true, true, true, false);
    }

    /**
     * State active
     * @public
     * @param {string} name - State name
     * @param {HTMLElement} element - Element target
     * @return {boolean} - State is active
     */
  }, {
    key: "is",
    value: function is(name, element) {
      var state = this.get(name);
      if (state.classOn) {
        return element.classList.contains(state.classOn);
      }
      return false;
    }

    /**
     * State defined
     * @public
     * @param {string} name - State name
     * @return {boolean} - State exists
     */
  }, {
    key: "has",
    value: function has(name) {
      return !!ElementClassStates_classPrivateFieldGet(ElementClassStates_states, this)[name];
    }

    /**
     * Get state info
     * @public
     * @param {string} name - State name
     * @return {Object} - State info object
     */
  }, {
    key: "get",
    value: function get(name) {
      var state = ElementClassStates_classPrivateFieldGet(ElementClassStates_states, this)[name];
      if (!state) throw new ElementClassStatesException('Unknown state: ' + name);
      return state;
    }

    /**
     * Set state by name
     * @public
     * @param {string} name - State name
     * @param {HTMLElement} element - Element target
     * @return {void}
     */
  }, {
    key: "set",
    value: function set(name, element) {
      var _this = this;
      var state = this.get(name);

      // Unset states
      if (state.unsets instanceof Array) {
        for (var i = 0; i < state.unsets.length; i++) {
          this.unset(state.unsets[i], element);
        }
      }

      // Set state class
      if (state.classOn) element.classList.add(state.classOn);

      // Callback on
      if (state.callbackOn) state.callbackOn(name, element, state);

      // Automatic unset
      if (state.autoUnset) {
        // Get or create unique element id
        var state_unset_id = requireUniqid(element, 'ecs-', true) + '-' + name;

        // Clear any existing timeout
        ElementClassStates_assertClassBrand(_ElementClassStates_brand, this, _clear_auto_unset).call(this, state_unset_id);

        // Setup new timeout for remove
        var timeout = typeof state.autoUnset === 'number' ? state.autoUnset : ElementClassStates_classPrivateFieldGet(_defaultTimeout, this);
        ElementClassStates_classPrivateFieldGet(_autoUnsetRefs, this)[state_unset_id] = window.setTimeout(function () {
          // Clear and unset state if reached
          ElementClassStates_assertClassBrand(_ElementClassStates_brand, _this, _clear_auto_unset).call(_this, state_unset_id);
          _this.unset(name, element);
        }, timeout);
      }
    }
  }, {
    key: "unset",
    value:
    /**
     * Set state by name
     * @public
     * @param {string} name - State name
     * @param {HTMLElement} element - Element target
     * @return {void}
     */
    function unset(name, element) {
      var state = this.get(name);

      // Complex state options
      if (state.classOn) element.classList.remove(state.classOn);

      // Callback off
      if (state.callbackOff) state.callbackOff(name, element, state);
    }
  }]);
}()));
function _clear_auto_unset(id) {
  if (ElementClassStates_classPrivateFieldGet(_autoUnsetRefs, this)[id]) {
    window.clearTimeout(ElementClassStates_classPrivateFieldGet(_autoUnsetRefs, this)[id]);
    ElementClassStates_classPrivateFieldGet(_autoUnsetRefs, this)[id] = null;
  }
}
;// CONCATENATED MODULE: ../../../ui-core/src/js/index.js
/* !
 * @module      : @squirrel-forge/ui-core
 * @version     : 0.11.4
 * @license     : MIT
 * @copyright   : 2022 squirrel-forge
 * @author      : Daniel Hartwell aka. siux <me@siux.info>
 * @description : A collection of interface, classes, functions and abstracts made for the browser and babel compatible.
 */

/**
 * Abstracts
 */




/**
 * Renderers
 */


/**
 * States
 */


;// CONCATENATED MODULE: ../../../ui-form/src/js/Form/FormValues.js
function FormValues_typeof(o) { "@babel/helpers - typeof"; return FormValues_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, FormValues_typeof(o); }
function FormValues_toConsumableArray(arr) { return FormValues_arrayWithoutHoles(arr) || FormValues_iterableToArray(arr) || FormValues_unsupportedIterableToArray(arr) || FormValues_nonIterableSpread(); }
function FormValues_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function FormValues_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return FormValues_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return FormValues_arrayLikeToArray(o, minLen); }
function FormValues_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function FormValues_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return FormValues_arrayLikeToArray(arr); }
function FormValues_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function FormValues_classPrivateMethodInitSpec(obj, privateSet) { FormValues_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function FormValues_classPrivateFieldInitSpec(obj, privateMap, value) { FormValues_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function FormValues_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function FormValues_classPrivateFieldGet(s, a) { return s.get(FormValues_assertClassBrand(s, a)); }
function FormValues_classPrivateFieldSet(s, a, r) { return s.set(FormValues_assertClassBrand(s, a), r), r; }
function FormValues_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function FormValues_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, FormValues_toPropertyKey(descriptor.key), descriptor); } }
function FormValues_createClass(Constructor, protoProps, staticProps) { if (protoProps) FormValues_defineProperties(Constructor.prototype, protoProps); if (staticProps) FormValues_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function FormValues_toPropertyKey(t) { var i = FormValues_toPrimitive(t, "string"); return "symbol" == FormValues_typeof(i) ? i : i + ""; }
function FormValues_toPrimitive(t, r) { if ("object" != FormValues_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != FormValues_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function FormValues_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function FormValues_callSuper(t, o, e) { return o = FormValues_getPrototypeOf(o), FormValues_possibleConstructorReturn(t, FormValues_isNativeReflectConstruct() ? Reflect.construct(o, e || [], FormValues_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function FormValues_possibleConstructorReturn(self, call) { if (call && (FormValues_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return FormValues_assertThisInitialized(self); }
function FormValues_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function FormValues_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (FormValues_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function FormValues_getPrototypeOf(o) { FormValues_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return FormValues_getPrototypeOf(o); }
function FormValues_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) FormValues_setPrototypeOf(subClass, superClass); }
function FormValues_setPrototypeOf(o, p) { FormValues_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return FormValues_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Form values exception
 * @class
 * @extends Exception
 */
var FormValuesException = /*#__PURE__*/function (_Exception) {
  function FormValuesException() {
    FormValues_classCallCheck(this, FormValuesException);
    return FormValues_callSuper(this, FormValuesException, arguments);
  }
  FormValues_inherits(FormValuesException, _Exception);
  return FormValues_createClass(FormValuesException);
}(Exception);
/**
 * Form values
 * @class
 */
var FormValues_debug = /*#__PURE__*/new WeakMap();
var _form = /*#__PURE__*/new WeakMap();
var _includeDisabled = /*#__PURE__*/new WeakMap();
var _setValuesAsDefault = /*#__PURE__*/new WeakMap();
var _FormValues_brand = /*#__PURE__*/new WeakSet();
var FormValues_FormValues = /*#__PURE__*/function () {
  /**
   * Constructor
   * @constructor
   * @param {HTMLElement} form - Form or container element
   * @param {boolean} includeDisabled - Include disabled input values
   * @param {null|console|Object} debug - Debug object
   */
  function FormValues(form) {
    var includeDisabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    FormValues_classCallCheck(this, FormValues);
    /**
     * Set values recursive
     * @private
     * @param {*|Array|Object} values - Values object
     * @param {Array} path - Current path
     * @param {null|string} name - Name
     * @param {boolean} supply - Return data
     * @param {boolean} errors - Throw input errors
     * @return {null|Array|NodeList} - Data
     */
    FormValues_classPrivateMethodInitSpec(this, _FormValues_brand);
    /**
     * Debug object
     * @private
     * @property
     * @type {null|console|Object}
     */
    FormValues_classPrivateFieldInitSpec(this, FormValues_debug, null);
    /**
     * Form element
     * @private
     * @property
     * @type {null|HTMLFormElement}
     */
    FormValues_classPrivateFieldInitSpec(this, _form, null);
    /**
     * Include disabled input values
     * @private
     * @property
     * @type {boolean}
     */
    FormValues_classPrivateFieldInitSpec(this, _includeDisabled, false);
    /**
     * Set values as default input values
     * @private
     * @property
     * @type {boolean}
     */
    FormValues_classPrivateFieldInitSpec(this, _setValuesAsDefault, true);
    // Debugger instance
    FormValues_classPrivateFieldSet(FormValues_debug, this, debug);

    // Dom reference
    if (!(form instanceof HTMLElement)) {
      throw new FormValuesException('Argument form must be an instance of HTMLElement');
    }
    FormValues_classPrivateFieldSet(_form, this, form);

    // Set include option
    this.includeDisabled = includeDisabled;
  }

  /**
   * Debug getter
   * @public
   * @return {null|console|Object} - Debug reference
   */
  return FormValues_createClass(FormValues, [{
    key: "debug",
    get: function get() {
      return FormValues_classPrivateFieldGet(FormValues_debug, this);
    }

    /**
     * Form getter
     * @public
     * @return {HTMLFormElement} - Form element
     */
  }, {
    key: "form",
    get: function get() {
      return FormValues_classPrivateFieldGet(_form, this);
    }

    /**
     * Set as default values getter
     * @public
     * @return {boolean} - True if values are set as default
     */
  }, {
    key: "setAsDefault",
    get: function get() {
      return FormValues_classPrivateFieldGet(_setValuesAsDefault, this);
    }

    /**
     * Set as default values setter
     * @public
     * @param {boolean} state - True to set as default values
     * @return {void}
     */,
    set: function set(state) {
      FormValues_classPrivateFieldSet(_setValuesAsDefault, this, !!state);
    }

    /**
     * Include disabled getter
     * @public
     * @return {boolean} - True if enabled
     */
  }, {
    key: "includeDisabled",
    get: function get() {
      return FormValues_classPrivateFieldGet(_includeDisabled, this);
    }

    /**
     * Include disabled setter
     * @param {boolean} state - State
     * @return {void}
     */,
    set: function set(state) {
      FormValues_classPrivateFieldSet(_includeDisabled, this, !!state);
    }

    /**
     * Get input dot syntax info
     * @param {string} name - Input name
     * @param {*} value - Input value
     * @return {{name: string, value: Array}} - Input info
     */
  }, {
    key: "get",
    value:
    /**
     * Get values
     * @param {boolean} flat - True to get a flat map
     * @param {string} selector - Input selector
     * @return {Object} - Values data
     */
    function get() {
      var flat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'input, select, textarea';
      var values = {};
      var inputs = FormValues_classPrivateFieldGet(_form, this).querySelectorAll(selector);

      // Parse input elements
      for (var i = 0; i < inputs.length; i++) {
        // Input shorthand
        var input = inputs[i];

        // Value getter
        var method = 'get_' + input.tagName.toLowerCase() + '_value';

        // Disabled check
        if (FormValues_classPrivateFieldGet(_includeDisabled, this) || !FormValues_classPrivateFieldGet(_includeDisabled, this) && !input.disabled) {
          if (this[method]) {
            // Input value
            var value = this[method](input);

            // Only set if there is an actual value
            // Selected disabled options or unchecked radio/checkbox fields will be null
            if (value !== null) {
              // Get name and value
              var info = this.constructor.input_info(input.name, value);

              // Flat mode
              if (flat) {
                // Value exists
                if (values[info.name]) {
                  // Append only if both are arrays
                  if (values[info.name] instanceof Array && info.value instanceof Array) {
                    values[info.name] = values[info.name].concat(info.value);
                  }
                } else {
                  // Create value
                  values[info.name] = info.value;
                }
              } else {
                // Default auto dimensional mode
                var exists = strAccess(info.name, values, true);

                // Value exists
                if (exists !== null) {
                  // Append only if both are arrays
                  if (exists instanceof Array && info.value instanceof Array) {
                    strCreate(info.name, exists.concat(info.value), values, true);
                  }
                } else {
                  // Create value
                  strCreate(info.name, info.value, values);
                }
              }
            }
          }
        }
      }
      return values;
    }

    /**
     * Set values
     * @public
     * @param {Object} values - Values map
     * @param {boolean} flat - Is flat values
     * @param {boolean} errors - Throw input errors
     * @return {void}
     */
  }, {
    key: "set",
    value: function set(values) {
      var flat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var errors = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      // Convert to dimensional data
      if (flat) {
        values = this.constructor.convert_from_flat(values);
      }

      // Set values recursive
      FormValues_assertClassBrand(_FormValues_brand, this, _set_recursive).call(this, values, [], null, false, errors);
    }

    /**
     * Get inputs related to given dot path
     * @public
     * @param {string} field - Field
     * @param {boolean} errors - Throw input errors
     * @return {Array|NodeList} - Input elements
     */
  }, {
    key: "inputs",
    value: function inputs(field) {
      var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      // Create values dimensional object from field name
      var values = {};
      strCreate(field, true, values);

      // Use the set value recursive but return selected results
      return FormValues_assertClassBrand(_FormValues_brand, this, _set_recursive).call(this, values, [], null, true, errors) || [];
    }

    /**
     * Get fieldname related to given input
     * @param {HTMLElement} input - Input element
     * @return {string} - Input name
     */
  }, {
    key: "fieldname",
    value: function fieldname(input) {
      if (!input || typeof input.name !== 'string' || !input.name.length) {
        throw new FormValuesException('Argument input must be a HTMLElement with a name property');
      }
      var name = input.name;

      // Convert name to dot syntax
      name = name.replace(/\[/g, '.').replace(/]/g, '');

      // Require explicit name for all that have two unknowns
      if (name.includes('..')) {
        if (input.hasAttribute('data-fieldname')) {
          name = input.getAttribute('data-fieldname');
          if (name && name.length) return name;
        }
        throw new FormValuesException('Complex fields require a data-fieldname attribute');
      }

      // Get array position
      if (name[name.length - 1] === '.') {
        name = name.substr(0, name.length - 1);
        var selector = '[name^="' + input.name.substr(0, input.name.length - 2) + '"]';
        var inputs = FormValues_classPrivateFieldGet(_form, this).querySelectorAll(selector);
        for (var i = 0; i < inputs.length; i++) {
          if (inputs[i] === input) {
            name += '.' + i;
            break;
          }
        }
      }
      return name;
    }
  }, {
    key: "get_input_value",
    value:
    /**
     * Get input value
     * @public
     * @param {HTMLInputElement} input - Input element
     * @return {null|string|number|boolean|FileList|File} - Input value
     */
    function get_input_value(input) {
      if (FormValues_classPrivateFieldGet(_includeDisabled, this) || !input.disabled) {
        var v = input.value;
        switch (input.type) {
          case 'checkbox':
          case 'radio':
            if (typeof v !== 'string' || v.toLowerCase() === 'on' || !v.length && !input.hasAttribute('value')) v = true;
            return input.checked ? v : null;
          case 'file':
            if (input.files && input.files.length) {
              if (input.multiple) return input.files;
              return input.files[0];
            }
            return null;
          case 'number':
            return "".concat(v).length ? parseFloat(v) : null;
          case 'text':
          default:
            return v;
        }
      }
      return null;
    }

    /**
     * Get select value
     * @public
     * @param {HTMLSelectElement} select - Select element
     * @return {null|string|Array} - Select value/s
     */
  }, {
    key: "get_select_value",
    value: function get_select_value(select) {
      if (FormValues_classPrivateFieldGet(_includeDisabled, this) || !select.disabled) {
        var value = [];
        for (var i = 0; i < select.options.length; i++) {
          var option = select.options[i];
          if (FormValues_classPrivateFieldGet(_includeDisabled, this) || !option.disabled) {
            if (option.selected) value.push(option.hasAttribute('value') ? option.value : option.innerText);
          }
        }
        if (!select.multiple) return value.shift();
        return value;
      }
      return null;
    }

    /**
     * Get textarea value
     * @public
     * @param {HTMLTextAreaElement} textarea - Textarea element
     * @return {null|string} - Value or null if empty or disabled
     */
  }, {
    key: "get_textarea_value",
    value: function get_textarea_value(textarea) {
      if (FormValues_classPrivateFieldGet(_includeDisabled, this) || !textarea.disabled) {
        return textarea.value;
      }
      return null;
    }
  }], [{
    key: "input_info",
    value: function input_info(name, value) {
      // Convert name to dot syntax
      name = name.replace(/\[/g, '.').replace(/]/g, '');

      // Check trailing dot
      if (name[name.length - 1] === '.') {
        name = name.substr(0, name.length - 1);

        // Value should be an array
        if (!(value instanceof Array)) {
          value = [value];
        }
      }
      return {
        name: name,
        value: value
      };
    }

    /**
     * Convert flat values to dimensional
     * @param {Object} values - Flat values map
     * @return {Object} - Dimensional values map
     */
  }, {
    key: "convert_from_flat",
    value: function convert_from_flat(values) {
      var new_values = {};
      var names = Object.keys(values);
      for (var i = 0; i < names.length; i++) {
        strCreate(names[i], values[names[i]], new_values);
      }
      return new_values;
    }
  }]);
}();
function _set_recursive(values) {
  var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var supply = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var errors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  // Skip any undefined values, they come from empty array elements
  if (typeof values === 'undefined') {
    return null;
  }

  // Array values
  if (values instanceof Array) {
    // List of array inputs
    var inputs = FormValues_classPrivateFieldGet(_form, this).querySelectorAll('[name="' + name + '[]"]');
    if (inputs && inputs.length) {
      if (supply) {
        var collect = [];
        for (var i = 0; i < inputs.length; i++) {
          if (values[i] === true) {
            collect.push(inputs[i]);
          }
        }
        return collect;
      }
      FormValues_assertClassBrand(_FormValues_brand, this, _set_inputs_values).call(this, inputs, values);
    } else {
      // Multi select
      inputs = FormValues_classPrivateFieldGet(_form, this).querySelectorAll('[name="' + name + '"]');
      if (inputs && inputs.length === 1) {
        if (supply) {
          return inputs;
        }
        FormValues_assertClassBrand(_FormValues_brand, this, _set_inputs_values).call(this, inputs, values);
      } else {
        // Not a multiselect
        var _collect = [];
        for (var _i = 0; _i < values.length; _i++) {
          var new_name = name + '[' + _i + ']';
          var res = FormValues_assertClassBrand(_FormValues_brand, this, _set_recursive).call(this, values[_i], [].concat(FormValues_toConsumableArray(path), [_i]), new_name, supply, errors);
          if (res && res.length) {
            _collect = _collect.concat(Array.prototype.slice.call(res));
          }
        }
        if (supply) {
          return _collect;
        }
      }
    }
  } else if (isPojo_isPojo(values)) {
    // Named child object
    var _collect2 = [];
    var names = Object.keys(values);
    for (var _i2 = 0; _i2 < names.length; _i2++) {
      var _new_name = void 0;
      if (name === null) {
        _new_name = names[_i2];
      } else {
        _new_name = name + '[' + names[_i2] + ']';
      }
      var _res = FormValues_assertClassBrand(_FormValues_brand, this, _set_recursive).call(this, values[names[_i2]], [].concat(FormValues_toConsumableArray(path), [names[_i2]]), _new_name, supply, errors);
      if (_res && _res.length) {
        _collect2 = _collect2.concat(Array.prototype.slice.call(_res));
      }
    }
    if (supply) {
      return _collect2;
    }
  } else {
    // Primitive values
    var _inputs = FormValues_classPrivateFieldGet(_form, this).querySelectorAll('[name="' + name + '"]');
    if (_inputs.length) {
      if (supply) {
        return _inputs;
      }
      FormValues_assertClassBrand(_FormValues_brand, this, _set_inputs_values).call(this, _inputs, values);
    } else if (errors) {
      // Throw exception if field does not exist
      throw new FormValuesException('Undefined field: ' + name);
    } else if (FormValues_classPrivateFieldGet(FormValues_debug, this)) {
      FormValues_classPrivateFieldGet(FormValues_debug, this).error(this.constructor.name + '::set_recursive Undefined field: ' + name);
    }
  }
  return null;
}
/**
 * Set inputs values
 * @private
 * @param {NodeList} inputs - Input elements
 * @param {*|Array|Object} value - Value
 * @return {void}
 */
function _set_inputs_values(inputs, value) {
  // Handle select inputs with multiple array values
  if (value instanceof Array && inputs.length === 1 && inputs[0].tagName.toLowerCase() === 'select') {
    for (var i = 0; i < inputs[0].options.length; i++) {
      var is_selected = value.includes(inputs[0].options[i].value);
      inputs[0].options[i].selected = is_selected;
      if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
        inputs[0].options[i][is_selected ? 'setAttribute' : 'removeAttribute']('selected', '');
      }
    }
    if (FormValues_classPrivateFieldGet(FormValues_debug, this)) FormValues_classPrivateFieldGet(FormValues_debug, this).log(this.constructor.name + '::set_inputs_values > select.array.value', inputs[0], value);
    return;
  }

  // Cycle all inputs
  for (var _i3 = 0; _i3 < inputs.length; _i3++) {
    if (value instanceof Array) {
      // Skip undefined values
      if (typeof value[_i3] !== 'undefined') {
        if (inputs[_i3].type === 'radio' || inputs[_i3].type === 'checkbox') {
          FormValues_assertClassBrand(_FormValues_brand, this, _set_radio_checkbox_value).call(this, inputs, value, _i3);
        } else {
          // Set value property
          if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
            if (inputs[_i3].type === 'textarea') {
              inputs[_i3].innerText = value;
            } else {
              inputs[_i3].setAttribute('value', value);
            }
          } else {
            inputs[_i3].value = value;
          }
          if (FormValues_classPrivateFieldGet(FormValues_debug, this)) {
            FormValues_classPrivateFieldGet(FormValues_debug, this).log(this.constructor.name + '::set_inputs_values > array.value', inputs[_i3], value);
          }
        }
      }
    } else if (inputs[_i3].type === 'radio' || inputs[_i3].type === 'checkbox') {
      // Primitive value
      FormValues_assertClassBrand(_FormValues_brand, this, _set_radio_checkbox_value).call(this, inputs, value, _i3, true);
    } else if (inputs[_i3].tagName.toLowerCase() === 'select') {
      // Primitive value
      FormValues_assertClassBrand(_FormValues_brand, this, _set_select_single_value).call(this, inputs, value, _i3);
    } else if (inputs[_i3].type === 'file') {
      // Cannot set file input value
      if (FormValues_classPrivateFieldGet(FormValues_debug, this)) FormValues_classPrivateFieldGet(FormValues_debug, this).warn(this.constructor.name + '::set_inputs_values > file not settable', inputs[_i3], value);
    } else if (value !== null) {
      // Set value property
      inputs[_i3].value = value;
      if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
        if (inputs[_i3].type === 'textarea') {
          // How and why it must be innerHTML to set the textarea default value
          // @url https://stackoverflow.com/questions/19030742/difference-between-innertext-innerhtml-and-value
          inputs[_i3].innerHTML = value;
        } else {
          inputs[_i3].setAttribute('value', value);
        }
      }
      if (FormValues_classPrivateFieldGet(FormValues_debug, this)) FormValues_classPrivateFieldGet(FormValues_debug, this).log(this.constructor.name + '::set_inputs_values > value', inputs[_i3], value);
    } else {
      if (FormValues_classPrivateFieldGet(FormValues_debug, this)) FormValues_classPrivateFieldGet(FormValues_debug, this).warn(this.constructor.name + '::set_inputs_values > null', inputs[_i3], value);
    }
  }
}
/**
 * Set single select value
 * @private
 * @param {NodeList<HTMLInputElement>} inputs - Input elements
 * @param {*|Array} value - Value
 * @param {number} j - Position in array
 * @return {void}
 */
function _set_select_single_value(inputs, value, j) {
  for (var i = 0; i < inputs[j].options.length; i++) {
    var is_selected = value === inputs[j].options[i].value;
    inputs[j].options[i].selected = is_selected;
    if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
      inputs[j].options[i][is_selected ? 'setAttribute' : 'removeAttribute']('selected', '');
    }
  }
  if (FormValues_classPrivateFieldGet(FormValues_debug, this)) FormValues_classPrivateFieldGet(FormValues_debug, this).log(this.constructor.name + '::set_select_single_value > select.value', inputs[j], value);
}
/**
 * Set radio or checkbox value
 * @private
 * @param {NodeList<HTMLInputElement>} inputs - Input elements
 * @param {*|Array} value - Value
 * @param {number} i - Position in array
 * @param {boolean} no_array - Convert value to array
 * @return {void}
 */
function _set_radio_checkbox_value(inputs, value, i) {
  var no_array = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  // Convert value to array for valid access
  if (no_array) {
    var fake = [];
    fake[i] = value;
    value = fake;
  }

  // Radio checkbox has value attribute
  if (inputs[i].hasAttribute('value')) {
    var set = false;
    if (inputs[i].value === value[i] || value[i] === true || value[i] && value[i].toLowerCase && value[i].toLowerCase() === 'on') {
      if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
        inputs[i].setAttribute('checked', '');
      }
      inputs[i].checked = true;
      set = true;
    } else if (value[i] === null || value[i] === false) {
      if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
        inputs[i].removeAttribute('checked');
      }
      inputs[i].checked = false;
      set = true;
    }
    if (set && FormValues_classPrivateFieldGet(FormValues_debug, this)) {
      FormValues_classPrivateFieldGet(FormValues_debug, this).log(this.constructor.name + '::set_radio_checkbox_value > value', inputs[i], inputs[i].checked);
    }
  } else {
    // Radio checkbox without custom value
    var _set = false;
    if (value[i] === true || value[i] && value[i].toLowerCase && value[i].toLowerCase() === 'on') {
      if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
        inputs[i].setAttribute('checked', '');
      }
      inputs[i].checked = true;
      _set = true;
    } else if (value[i] === null || value[i] === false) {
      if (FormValues_classPrivateFieldGet(_setValuesAsDefault, this)) {
        inputs[i].removeAttribute('checked');
      }
      inputs[i].checked = false;
      _set = true;
    }
    if (_set && FormValues_classPrivateFieldGet(FormValues_debug, this)) {
      FormValues_classPrivateFieldGet(FormValues_debug, this).log(this.constructor.name + '::set_radio_checkbox_value', inputs[i], inputs[i].checked);
    }
  }
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Form/Html5Validator.js
function Html5Validator_typeof(o) { "@babel/helpers - typeof"; return Html5Validator_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Html5Validator_typeof(o); }
function Html5Validator_toConsumableArray(arr) { return Html5Validator_arrayWithoutHoles(arr) || Html5Validator_iterableToArray(arr) || Html5Validator_unsupportedIterableToArray(arr) || Html5Validator_nonIterableSpread(); }
function Html5Validator_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Html5Validator_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Html5Validator_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Html5Validator_arrayLikeToArray(o, minLen); }
function Html5Validator_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Html5Validator_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Html5Validator_arrayLikeToArray(arr); }
function Html5Validator_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Html5Validator_classPrivateMethodInitSpec(obj, privateSet) { Html5Validator_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function Html5Validator_defineProperty(obj, key, value) { key = Html5Validator_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Html5Validator_classPrivateFieldInitSpec(obj, privateMap, value) { Html5Validator_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Html5Validator_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Html5Validator_classPrivateFieldGet(s, a) { return s.get(Html5Validator_assertClassBrand(s, a)); }
function Html5Validator_classPrivateFieldSet(s, a, r) { return s.set(Html5Validator_assertClassBrand(s, a), r), r; }
function Html5Validator_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Html5Validator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Html5Validator_toPropertyKey(descriptor.key), descriptor); } }
function Html5Validator_createClass(Constructor, protoProps, staticProps) { if (protoProps) Html5Validator_defineProperties(Constructor.prototype, protoProps); if (staticProps) Html5Validator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Html5Validator_toPropertyKey(t) { var i = Html5Validator_toPrimitive(t, "string"); return "symbol" == Html5Validator_typeof(i) ? i : i + ""; }
function Html5Validator_toPrimitive(t, r) { if ("object" != Html5Validator_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Html5Validator_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Html5Validator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Html5Validator_callSuper(t, o, e) { return o = Html5Validator_getPrototypeOf(o), Html5Validator_possibleConstructorReturn(t, Html5Validator_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Html5Validator_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Html5Validator_possibleConstructorReturn(self, call) { if (call && (Html5Validator_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Html5Validator_assertThisInitialized(self); }
function Html5Validator_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Html5Validator_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Html5Validator_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Html5Validator_getPrototypeOf(o) { Html5Validator_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Html5Validator_getPrototypeOf(o); }
function Html5Validator_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Html5Validator_setPrototypeOf(subClass, superClass); }
function Html5Validator_setPrototypeOf(o, p) { Html5Validator_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Html5Validator_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * @typedef {Function} HTML5FieldValidator
 * @param {string} attr - Field validation attribute
 * @param {HTMLInputElement|HTMLTextAreaElement} field - Field to be validated
 * @return {null|string|string[]} - Null, override error or list of errors to append
 */

/**
 * Html5 validator exception
 * @class
 * @extends Exception
 */
var Html5ValidatorException = /*#__PURE__*/function (_Exception) {
  function Html5ValidatorException() {
    Html5Validator_classCallCheck(this, Html5ValidatorException);
    return Html5Validator_callSuper(this, Html5ValidatorException, arguments);
  }
  Html5Validator_inherits(Html5ValidatorException, _Exception);
  return Html5Validator_createClass(Html5ValidatorException);
}(Exception);
/**
 * Html5 validator
 * @class
 */
var Html5Validator_debug = /*#__PURE__*/new WeakMap();
var Html5Validator_form = /*#__PURE__*/new WeakMap();
var _fields = /*#__PURE__*/new WeakMap();
var _errors = /*#__PURE__*/new WeakMap();
var _Html5Validator_brand = /*#__PURE__*/new WeakSet();
var Html5Validator = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {
  /**
   * Constructor
   * @constructor
   * @param {HTMLFormElement} form - Form element
   * @param {string|NodeList|Array} fields - Fields selector or list
   * @param {null|console|Object} debug - Debug object
   */
  function Html5Validator(form) {
    var _fields2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'input, select, textarea';
    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    Html5Validator_classCallCheck(this, Html5Validator);
    Html5Validator_classPrivateMethodInitSpec(this, _Html5Validator_brand);
    /**
     * Debug object
     * @private
     * @property
     * @type {null|console|Object}
     */
    Html5Validator_classPrivateFieldInitSpec(this, Html5Validator_debug, null);
    /**
     * Form element
     * @private
     * @property
     * @type {null|HTMLFormElement}
     */
    Html5Validator_classPrivateFieldInitSpec(this, Html5Validator_form, null);
    /**
     * Form fields references
     * @private
     * @property
     * @type {null|NodeList|Array}
     */
    Html5Validator_classPrivateFieldInitSpec(this, _fields, null);
    /**
     * Validation errors
     * @private
     * @property
     * @type {null|Object}
     */
    Html5Validator_classPrivateFieldInitSpec(this, _errors, null);
    /**
     * Custom error attribute name
     * @public
     * @property
     * @type {string}
     */
    Html5Validator_defineProperty(this, "errorAttribute", 'data-ui-form-html5-error');
    /**
     * Custom validation attribute name
     * @public
     * @property
     * @type {string}
     */
    Html5Validator_defineProperty(this, "validateAttribute", 'data-ui-form-html5-validate');
    /**
     * Custom field validator
     * @public
     * @property
     * @type {null|HTML5FieldValidator}
     */
    Html5Validator_defineProperty(this, "validateField", null);
    if (!(form instanceof HTMLFormElement)) {
      throw new Html5ValidatorException('Argument form must be a HTMLFormElement');
    }
    Html5Validator_classPrivateFieldSet(Html5Validator_debug, this, debug);
    Html5Validator_classPrivateFieldSet(Html5Validator_form, this, form);
    Html5Validator_classPrivateFieldSet(_fields, this, _fields2);
    if (typeof _fields2 === 'string') {
      _fields2 = form.querySelectorAll(_fields2);
    }
    if (!(_fields2 instanceof NodeList || _fields2 instanceof Array)) {
      throw new Html5ValidatorException('Argument fields must be a string selector, NodeList or an Array of Elements');
    }
  }
  return Html5Validator_createClass(Html5Validator, [{
    key: "reset",
    value:
    /**
     * Reset validator
     * @public
     * @return {Html5Validator} - Validator instance
     */
    function reset() {
      Html5Validator_classPrivateFieldSet(_errors, this, null);
      return this;
    }

    /**
     * Set data interface not required for html5 validation
     * @public
     * @return {Html5Validator} - Validator instance
     */
  }, {
    key: "data",
    value: function data() {
      return this;
    }

    /**
     * Validate
     * @param {null|string|Array} only - Limit to fieldname/s
     * @return {boolean} - Validation state
     */
  }, {
    key: "valid",
    value: function valid() {
      var only = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      if (Html5Validator_classPrivateFieldGet(Html5Validator_debug, this)) Html5Validator_classPrivateFieldGet(Html5Validator_debug, this).log(this.constructor.name + '::valid', only);
      var status = Html5Validator_assertClassBrand(_Html5Validator_brand, this, Html5Validator_validate).call(this, only);
      Html5Validator_classPrivateFieldSet(_errors, this, status.valid ? null : status.errors);
      return status.valid;
    }

    /**
     * Get last validation errors
     * @return {Object|null} - Errors object
     */
  }, {
    key: "errors",
    value: function errors() {
      return Html5Validator_classPrivateFieldGet(_errors, this);
    }
  }]);
}()));
function _get_fields() {
  var fields = Html5Validator_classPrivateFieldGet(_fields, this);
  if (typeof fields === 'string') {
    fields = Html5Validator_classPrivateFieldGet(Html5Validator_form, this).querySelectorAll(fields);
  }
  if (!fields.length) {
    throw new Html5ValidatorException('Argument fields must resolve to at least one element');
  }
  return fields;
}
/**
 * Validate internal
 * @private
 * @param {null|string|Array} only - Limit to fieldname/s
 * @return {{valid: boolean, errors: {}}} - Status object
 */
function Html5Validator_validate(only) {
  var fields = Html5Validator_assertClassBrand(_Html5Validator_brand, this, _get_fields).call(this);
  var status = {
    valid: true,
    errors: {}
  };
  for (var i = 0; i < fields.length; i++) {
    var field = fields[i];
    var _FormValues$input_inf = FormValues.input_info(field.name, null),
      name = _FormValues$input_inf.name;
    if (only === null || only === name || only instanceof Array && only.includes(name)) {
      if (Html5Validator_classPrivateFieldGet(Html5Validator_debug, this)) Html5Validator_classPrivateFieldGet(Html5Validator_debug, this).log(this.constructor.name + '::validate', name);
      Html5Validator_assertClassBrand(_Html5Validator_brand, this, _validate_field).call(this, field, name, status);
    } else if (Html5Validator_classPrivateFieldGet(Html5Validator_debug, this)) {
      Html5Validator_classPrivateFieldGet(Html5Validator_debug, this).log(this.constructor.name + '::validate Did not match criteria:', only, name, field);
    }
  }
  return status;
}
/**
 * Validate field
 * @private
 * @param {HTMLElement} field - Input field
 * @param {string} name - Fieldname
 * @param {Object} status - Status object
 * @return {void}
 */
function _validate_field(field, name, status) {
  // Validate the field and get the default message
  var valid = field.checkValidity(),
    message = field.validationMessage,
    validator,
    custom_errors;

  // Radio groups must be validated as a group, or one might be valid while all others are not
  if (field.type === 'radio') {
    var group = Html5Validator_classPrivateFieldGet(Html5Validator_form, this).querySelectorAll('[name="' + field.getAttribute('name') + '"]');
    message = group[0].validationMessage;

    // Catch custom validation info from first element only
    if (group[0].hasAttribute(this.validateAttribute)) {
      validator = group[0].getAttribute(this.validateAttribute);
    }
    valid = false;
    for (var i = 0; i < group.length; i++) {
      if (group[i].checkValidity()) {
        valid = true;
        break;
      }
    }
  } else if (field.hasAttribute(this.validateAttribute)) {
    // If not a radio catch custom validation info if set
    validator = field.getAttribute(this.validateAttribute);
  }

  // Run the custom validation info
  if (validator) custom_errors = Html5Validator_assertClassBrand(_Html5Validator_brand, this, _run_validator).call(this, validator, field);

  // If not valid or has custom errors
  if (!valid || custom_errors) {
    status.valid = false;

    // Allow multiple errors
    if (!status.errors[name]) status.errors[name] = [];

    // Get error message
    if (!valid && field.hasAttribute(this.errorAttribute)) {
      message = field.getAttribute(this.errorAttribute);
    }

    // Custom errors string overrides any other error message
    if (typeof custom_errors === 'string') {
      message = custom_errors;
    }

    // Append error message
    if (message && message.length) {
      status.errors[name].push(message);
    }

    // Append any custom errors
    if (custom_errors instanceof Array && custom_errors.length) {
      var _status$errors$name;
      (_status$errors$name = status.errors[name]).push.apply(_status$errors$name, Html5Validator_toConsumableArray(custom_errors));
    }
  }
}
/**
 * Run custom validator
 * @private
 * @param {string} info - Attribute value
 * @param {HTMLInputElement|HTMLTextAreaElement} field - Field element
 * @return {string|string[]|null} - Null or error/s
 */
function _run_validator(info, field) {
  if (Html5Validator_classPrivateFieldGet(Html5Validator_debug, this)) Html5Validator_classPrivateFieldGet(Html5Validator_debug, this).log(this.constructor.name + '::run_validator', info, field);
  if (this.validateField) {
    try {
      return this.validateField(info, field);
    } catch (err) {
      throw new Html5ValidatorException('Field validator caused an error', err);
    }
  }
  return null;
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Form/UiFormComponent.js
function UiFormComponent_typeof(o) { "@babel/helpers - typeof"; return UiFormComponent_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormComponent_typeof(o); }
function UiFormComponent_slicedToArray(arr, i) { return UiFormComponent_arrayWithHoles(arr) || UiFormComponent_iterableToArrayLimit(arr, i) || UiFormComponent_unsupportedIterableToArray(arr, i) || UiFormComponent_nonIterableRest(); }
function UiFormComponent_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiFormComponent_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiFormComponent_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiFormComponent_arrayLikeToArray(o, minLen); }
function UiFormComponent_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiFormComponent_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function UiFormComponent_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function UiFormComponent_get() { if (typeof Reflect !== "undefined" && Reflect.get) { UiFormComponent_get = Reflect.get.bind(); } else { UiFormComponent_get = function _get(target, property, receiver) { var base = UiFormComponent_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return UiFormComponent_get.apply(this, arguments); }
function UiFormComponent_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = UiFormComponent_getPrototypeOf(object); if (object === null) break; } return object; }
function UiFormComponent_classPrivateMethodInitSpec(obj, privateSet) { UiFormComponent_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiFormComponent_classPrivateFieldInitSpec(obj, privateMap, value) { UiFormComponent_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiFormComponent_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiFormComponent_classPrivateFieldSet(s, a, r) { return s.set(UiFormComponent_assertClassBrand(s, a), r), r; }
function UiFormComponent_classPrivateFieldGet(s, a) { return s.get(UiFormComponent_assertClassBrand(s, a)); }
function UiFormComponent_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiFormComponent_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormComponent_toPropertyKey(descriptor.key), descriptor); } }
function UiFormComponent_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormComponent_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormComponent_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormComponent_toPropertyKey(t) { var i = UiFormComponent_toPrimitive(t, "string"); return "symbol" == UiFormComponent_typeof(i) ? i : i + ""; }
function UiFormComponent_toPrimitive(t, r) { if ("object" != UiFormComponent_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormComponent_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormComponent_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormComponent_callSuper(t, o, e) { return o = UiFormComponent_getPrototypeOf(o), UiFormComponent_possibleConstructorReturn(t, UiFormComponent_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormComponent_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormComponent_possibleConstructorReturn(self, call) { if (call && (UiFormComponent_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormComponent_assertThisInitialized(self); }
function UiFormComponent_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormComponent_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormComponent_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormComponent_getPrototypeOf(o) { UiFormComponent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormComponent_getPrototypeOf(o); }
function UiFormComponent_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormComponent_setPrototypeOf(subClass, superClass); }
function UiFormComponent_setPrototypeOf(o, p) { UiFormComponent_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormComponent_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui form component exception
 * @class
 * @extends Exception
 */
var UiFormComponentException = /*#__PURE__*/function (_Exception) {
  function UiFormComponentException() {
    UiFormComponent_classCallCheck(this, UiFormComponentException);
    return UiFormComponent_callSuper(this, UiFormComponentException, arguments);
  }
  UiFormComponent_inherits(UiFormComponentException, _Exception);
  return UiFormComponent_createClass(UiFormComponentException);
}(Exception);
/**
 * Ui form component
 * @class
 * @extends UiComponent
 */
var UiFormComponent_request = /*#__PURE__*/new WeakMap();
var _clicked_submit = /*#__PURE__*/new WeakMap();
var _UiFormComponent_brand = /*#__PURE__*/new WeakSet();
var UiFormComponent = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiComponent) {
  /**
   * Constructor
   * @constructor
   * @param {HTMLFormElement} element - Form element
   * @param {null|Object} settings - Config object
   * @param {Object} defaults - Default config
   * @param {Array<Object>} extend - Extend default config
   * @param {Object} states - States definition
   * @param {Array<Function|Array<Function,*>>} plugins - Plugins to load
   * @param {null|UiComponent} parent - Parent object
   * @param {null|console|Object} debug - Debug object
   * @param {boolean} init - Run init method
   */
  function UiFormComponent(element) {
    var _this;
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var extend = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var states = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var plugins = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var parent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var debug = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
    var init = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : true;
    UiFormComponent_classCallCheck(this, UiFormComponent);
    // Check element type
    if (!(element instanceof HTMLFormElement)) throw new UiFormComponentException('Argument element must be a HTMLFormElement');

    /**
     * Default config
     * @type {Object}
     */
    defaults = defaults || {
      // Event prefix
      // @type {string}
      eventPrefix: 'form.',
      // Disabled state
      // @type {boolean}
      disabled: false,
      // Run in async mode, default true
      // @type {boolean}
      async: true,
      // AsyncRequest default options see @squirrel-forge/ui-util for details
      // @type {Object}
      asyncOptions: {},
      // Skip validation code
      // @type {boolean}
      skipValidate: true,
      // Pure HTML5 validation only, no plugins will run
      // @type {boolean}
      validatePureHtml5: false,
      // Validation report level
      // @type {boolean}
      validateReport: true,
      // Default state
      // @type {string}
      defaultState: 'initialized',
      // Default event
      // @type {string}
      defaultEvent: 'form.initialized',
      // States that allow the form to be sent
      // @type {Array<string>}
      sendableStates: ['initialized'],
      // Reset the form if async submit encountered an error
      // @type {boolean}
      resetOnError: true,
      // Do only soft reset on error
      // @type {boolean}
      resetOnErrorSoft: true,
      // Add the submit button value to async request if available
      // @type {boolean}
      addSubmitValue: true,
      // Fake/hidden submit button used for internal submit handling
      // @type {string}
      fake: '<button data-ui-form-fake-submit type="submit" style="' + 'z-index:-1;position:fixed;left:-1000px;width:1px;height:1px;' + 'padding:0;margin:0;border:0;opacity:0.01' + '" tabindex="-1" />',
      // Dom references
      // @type {Object}
      dom: {
        // Reset buttons
        // @type {string}
        reset: 'button[type="reset"], input[type="reset"]',
        // Submit buttons
        // @type {string}
        submit: 'button:not([type]), button[type="submit"], input[type="submit"]',
        // Fake/hidden internal submit button created through the fake option
        // @type {string}
        fake: '[data-ui-form-fake-submit]'
      }
    };

    /**
     * Default states
     * @type {Object}
     */
    states = states || {
      initialized: {
        classOn: 'ui-form--initialized',
        unsets: ['disabled', 'sending', 'success', 'error', 'complete']
      },
      sending: {
        classOn: 'ui-form--sending'
      },
      success: {
        classOn: 'ui-form--success',
        unsets: ['sending']
      },
      error: {
        classOn: 'ui-form--error',
        unsets: ['sending']
      },
      complete: {
        global: false,
        classOn: 'ui-form--complete'
      },
      disabled: {
        classOn: 'ui-form--disabled',
        unsets: ['initialized', 'sending', 'success', 'error', 'complete']
      }
    };

    // Initialize parent
    _this = UiFormComponent_callSuper(this, UiFormComponent, [element, settings, defaults, extend, states, plugins, parent, debug, init]);
    /**
     * Event complete handler
     * @param {Event} event - Complete event
     * @param {string|null} prefix - Event type prefix
     * @return {void}
     */
    UiFormComponent_classPrivateMethodInitSpec(_this, _UiFormComponent_brand);
    /**
     * Async request
     * @private
     * @property
     * @type {null|AsyncRequest}
     */
    UiFormComponent_classPrivateFieldInitSpec(_this, UiFormComponent_request, null);
    /**
     * Clicked submit button
     * @private
     * @property
     * @type {null|HTMLButtonElement|HTMLInputElement}
     */
    UiFormComponent_classPrivateFieldInitSpec(_this, _clicked_submit, null);
    return _this;
  }

  /**
   * Initialize component
   * @public
   * @return {void}
   */
  UiFormComponent_inherits(UiFormComponent, _UiComponent);
  return UiFormComponent_createClass(UiFormComponent, [{
    key: "init",
    value: function init() {
      // No default html5 validation
      // it's triggered by code in the isValid method
      this.dom.noValidate = true;

      // Add fake submit
      var fake = this.config.get('fake');
      if (fake) appendHTML(this.dom, fake);

      // Bind events
      this.bind();

      // Complete init
      UiFormComponent_get(UiFormComponent_getPrototypeOf(UiFormComponent.prototype), "init", this).call(this, function (instance) {
        // Check initial disabled state
        if (instance.config.get('disabled')) instance.disabled = true;
      });
    }

    /**
     * Bind component related events
     * @public
     * @return {void}
     */
  }, {
    key: "bind",
    value: function bind() {
      var _this2 = this;
      // Reset buttons
      var resets = this.getDomRefs('reset');
      if (resets && resets.length) this.bindResets(resets);

      // Submit buttons
      var submits = this.getDomRefs('submit');
      if (!submits || !submits.length) {
        throw new UiFormComponentException('Form requires at least one submit button');
      }
      this.bindSubmits(submits);

      // Event prefix
      var prefix = this.config.get('eventPrefix') || '';

      // Form events
      this.addEventList([['valid', function (event) {
        _this2.event_state(event);
      }], ['invalid', function (event) {
        _this2.event_state(event);
      }], ['submit', function (event) {
        UiFormComponent_assertClassBrand(_UiFormComponent_brand, _this2, _event_submit).call(_this2, event);
      }], [prefix + 'sending', function (event) {
        _this2.event_state(event, prefix);
      }], [prefix + 'success', function (event) {
        _this2.event_state(event, prefix);
      }], [prefix + 'error', function (event) {
        _this2.event_state(event, prefix);
      }], [prefix + 'complete', function (event) {
        UiFormComponent_assertClassBrand(_UiFormComponent_brand, _this2, _event_complete).call(_this2, event, prefix);
      }]]);
    }
  }, {
    key: "disabled",
    get:
    /**
     * Disabled getter
     * @public
     * @return {boolean} - Disabled state
     */
    function get() {
      return this.config.get('disabled');
    }

    /**
     * Disabled setter
     * @public
     * @param {boolean} state - Disabled state
     * @return {void}
     */,
    set: function set(state) {
      var disabled = !!state;
      this.config.set('disabled', disabled);

      // Event prefix
      var prefix = this.config.get('eventPrefix') || '';
      if (disabled) {
        this.states.set('disabled');
        this.dispatchEvent(prefix + 'disabled');
      } else {
        this.states.set(this.config.get('defaultState'));
        this.dispatchEvent(this.config.get('defaultEvent'));
      }
    }

    /**
     * Clicked submit getter
     * @public
     * @return {null|HTMLButtonElement} - Submit button if available
     */
  }, {
    key: "clickedSubmit",
    get: function get() {
      return UiFormComponent_classPrivateFieldGet(_clicked_submit, this);
    }

    /**
     * Valid state getter
     * @public
     * @return {boolean} - True if valid
     */
  }, {
    key: "valid",
    get: function get() {
      return this.isValid(false);
    }

    /**
     * Bind reset buttons
     * @public
     * @param {Array|NodeList} resets - List of reset buttons
     * @return {void}
     */
  }, {
    key: "bindResets",
    value: function bindResets(resets) {
      var _this3 = this;
      if (resets instanceof Array || resets instanceof NodeList && resets.length) {
        bindNodeList(resets, [['click', function (event) {
          event.preventDefault();
          _this3.reset(event.currentTarget.getAttribute('data-ui-form-soft-reset') === 'true');
        }]]);
      }
    }

    /**
     * Bind list of submit buttons
     * @public
     * @param {Array|NodeList} submits List of submit buttons
     * @return {void}
     */
  }, {
    key: "bindSubmits",
    value: function bindSubmits(submits) {
      var _this4 = this;
      if (submits instanceof Array || submits instanceof NodeList && submits.length) {
        bindNodeList(submits, [['click', function (event) {
          UiFormComponent_assertClassBrand(_UiFormComponent_brand, _this4, _event_submitClick).call(_this4, event, event.currentTarget);
        }]]);
      }
    }

    /**
     * Check if form is valid
     * @public
     * @param {boolean} report - Report errors
     * @return {boolean} - True if valid
     */
  }, {
    key: "isValid",
    value: function isValid() {
      var report = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      // Skip validation
      if (this.config.get('skipValidate')) return true;

      // Pure html5 validation
      if (this.config.get('validatePureHtml5')) {
        var check = report ? 'reportValidity' : 'checkValidity';
        if (!this.dom[check]()) {
          if (this.debug) this.debug.log(this.constructor.name + '::isValid Form data invalid using:', check);
          return false;
        }
        return true;
      }

      // Plugin validation
      var results = this.plugins.run('validateForm', [report]);
      var is_valid = true;
      var reasons = [];
      var entries = Object.entries(results);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i = UiFormComponent_slicedToArray(entries[i], 2),
          plugin = _entries$i[0],
          result = _entries$i[1];
        if (result === false) {
          is_valid = false;
          reasons.push(plugin);
        }
      }

      // Notify reasons
      if (this.debug && !is_valid) {
        this.debug.log(this.constructor.name + '::isValid Form invalid, reasons:', reasons);
      }
      return is_valid;
    }

    /**
     * Event submit click
     * @private
     * @param {Event} event - Click event
     * @param {HTMLButtonElement} button - Button element
     * @return {void}
     */
  }, {
    key: "canSubmit",
    value:
    /**
     * Can submit
     * @public
     * @param {boolean} silent - Set true for a boolean result
     * @return {boolean} - Submittable state
     */
    function canSubmit() {
      var silent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var can_submit = true;
      if (!this.config.get('sendableStates').includes(this.states.global)) {
        if (!silent) {
          if (this.states.is('complete')) throw new UiFormComponentException('Form already sent');
          throw new UiFormComponentException('Form not submittable');
        }
        can_submit = false;
      }
      return can_submit;
    }

    /**
     * Submit form
     * @public
     * @param {undefined|null|'state'|'error'|boolean} report - Report errors
     * @param {boolean} silent - Set true for a boolean result
     * @return {boolean} - Submitted state
     */
  }, {
    key: "submit",
    value: function submit(report) {
      var silent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (this.canSubmit(silent)) {
        var fake = this.getDomRefs('fake', false);
        if (!fake || !fake.click) {
          throw new UiFormComponentException('No fake submit available');
        }
        if (typeof report === 'undefined') report = this.config.get('validateReport');
        if (this.isValid(report)) {
          fake.click();
          return true;
        }
      } else if (this.debug) {
        this.debug.error(this.constructor.name + '::submit Not a submittable state or no fake submit defined');
      }
      return false;
    }

    /**
     * Abort async submit
     * @public
     * @param {boolean} reset - Reset from
     * @param {boolean} soft - Only soft reset form
     * @return {void}
     */
  }, {
    key: "abortSubmit",
    value: function abortSubmit() {
      var reset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var soft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (UiFormComponent_classPrivateFieldGet(UiFormComponent_request, this)) {
        UiFormComponent_classPrivateFieldGet(UiFormComponent_request, this).abort();
        UiFormComponent_classPrivateFieldSet(UiFormComponent_request, this, null);
        this.dispatchEvent((this.config.get('eventPrefix') || '') + 'sending.aborted');
        if (reset) this.reset(soft);
      }
    }

    /**
     * Reset form
     * @public
     * @param {boolean} soft - True to perform soft reset only
     * @return {void}
     */
  }, {
    key: "reset",
    value: function reset() {
      var soft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.abortSubmit();
      if (!soft) this.dom.reset();
      UiFormComponent_classPrivateFieldSet(_clicked_submit, this, null);
      this.states.set(this.config.get('defaultState'));
      this.dispatchEvent((this.config.get('eventPrefix') || '') + 'reset', {
        soft: soft
      });
    }
  }], [{
    key: "selector",
    get:
    /**
     * Element selector getter
     * @public
     * @return {string} - Element selector
     */
    function get() {
      return 'form[is="ui-form"]:not([data-state])';
    }
  }]);
}(UiComponent)));
function _event_complete(event, prefix) {
  this.event_state(event, prefix);

  // Reset after submit failed with an error response
  if (event.detail.target.error && this.config.get('resetOnError')) {
    this.reset(this.config.get('resetOnErrorSoft'));
  }
}
/**
 * Event submit handler
 * @param {Event} event - Submit event
 * @return {void}
 */
function _event_submit(event) {
  // TODO: check for no submit and if a submit button is focused within the form
  // if ( !this.#clicked_submit && this.config.get( 'clickedSubmitDetect' ) ) {}

  // Cannot be submitted
  if (!this.canSubmit(true)) {
    event.preventDefault();
    if (this.debug) this.debug.log(this.constructor.name + '::event_submit form not submittable');
    return;
  }

  // Add some info to the sending event
  var event_data = {
    event: event,
    button: UiFormComponent_classPrivateFieldGet(_clicked_submit, this)
  };

  // Event prefix
  var prefix = this.config.get('eventPrefix') || '';

  // Allow plugins and external handlers to prevent submission even if it was prevented via the actual submit event
  if (!this.dispatchEvent(prefix + 'submit.before', event_data, true, true) || event.defaultPrevented) {
    if (this.debug) {
      this.debug.log(this.constructor.name + '::event_submit default prevented via form.submit.before event');
    }
    return;
  }

  // Prevent actual submit for ajax mode
  if (this.config.get('async')) {
    // Prevent default form submission
    event.preventDefault();

    // Send via async request
    UiFormComponent_assertClassBrand(_UiFormComponent_brand, this, _submit_async).call(this);
  }

  // Begin sending
  this.states.set('sending');
  this.dispatchEvent(prefix + 'sending', event_data);
}
function _event_submitClick(event, button) {
  if (this.debug) this.debug.log(this.constructor.name + '::event_submitClick', event, button);

  // Submit click validation
  if (!this.isValid(this.config.get('validateReport'))) {
    // Swallow the event and pretend it never happened
    event.preventDefault();
    event.stopPropagation();

    // Prevents other click handlers, like the recaptcha plugin from running
    event.stopImmediatePropagation();
    return;
  }

  // Run preventable submit click event
  if (!this.dispatchEvent((this.config.get('eventPrefix') || '') + 'submit.click', {
    event: event,
    button: button
  }, true, true)) {
    event.preventDefault();
    event.stopPropagation();
  }

  // Remember click target
  if (this.getDomRefs('fake', false) !== button) UiFormComponent_classPrivateFieldSet(_clicked_submit, this, button);
}
/**
 * Async form submit
 * @private
 * @return {void}
 */
function _submit_async() {
  var _this5 = this;
  // Get async default options
  var options = cloneObject(this.config.get('asyncOptions'));

  // Set url and method from form element only if not specified
  if (!options.url) options.url = this.dom.getAttribute('action');
  if (!options.method) options.method = this.dom.getAttribute('method');

  // Enforce event name prefix
  options.eventPrefix = this.config.get('eventPrefix') || '';

  // Create request and set self as parent, to allow event bubbling of: progress, success, error and complete
  UiFormComponent_classPrivateFieldSet(UiFormComponent_request, this, new AsyncRequest(options, this, this.debug));

  // Send as form data
  var data = new FormData(this.dom);

  // Add submit value
  if (this.config.get('addSubmitValue') && UiFormComponent_classPrivateFieldGet(_clicked_submit, this) && UiFormComponent_classPrivateFieldGet(_clicked_submit, this).name && UiFormComponent_classPrivateFieldGet(_clicked_submit, this).value) data.append(UiFormComponent_classPrivateFieldGet(_clicked_submit, this).name, UiFormComponent_classPrivateFieldGet(_clicked_submit, this).value);
  if (this.debug) this.debug.log(this.constructor.name + '::submit_async', options, data);

  // Send
  UiFormComponent_classPrivateFieldGet(UiFormComponent_request, this).send(data, function (processed, request) {
    // Allow plugins and external handlers to modify submission data
    _this5.dispatchEvent(options.eventPrefix + 'async.modify', {
      processed: processed,
      request: request
    });
  });
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Form/UiFieldsetTemplate.js
function UiFieldsetTemplate_typeof(o) { "@babel/helpers - typeof"; return UiFieldsetTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFieldsetTemplate_typeof(o); }
function UiFieldsetTemplate_toConsumableArray(arr) { return UiFieldsetTemplate_arrayWithoutHoles(arr) || UiFieldsetTemplate_iterableToArray(arr) || UiFieldsetTemplate_unsupportedIterableToArray(arr) || UiFieldsetTemplate_nonIterableSpread(); }
function UiFieldsetTemplate_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiFieldsetTemplate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiFieldsetTemplate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiFieldsetTemplate_arrayLikeToArray(o, minLen); }
function UiFieldsetTemplate_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function UiFieldsetTemplate_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return UiFieldsetTemplate_arrayLikeToArray(arr); }
function UiFieldsetTemplate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiFieldsetTemplate_defineProperty(obj, key, value) { key = UiFieldsetTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function UiFieldsetTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFieldsetTemplate_toPropertyKey(descriptor.key), descriptor); } }
function UiFieldsetTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFieldsetTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFieldsetTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFieldsetTemplate_toPropertyKey(t) { var i = UiFieldsetTemplate_toPrimitive(t, "string"); return "symbol" == UiFieldsetTemplate_typeof(i) ? i : i + ""; }
function UiFieldsetTemplate_toPrimitive(t, r) { if ("object" != UiFieldsetTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFieldsetTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFieldsetTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFieldsetTemplate_callSuper(t, o, e) { return o = UiFieldsetTemplate_getPrototypeOf(o), UiFieldsetTemplate_possibleConstructorReturn(t, UiFieldsetTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFieldsetTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFieldsetTemplate_possibleConstructorReturn(self, call) { if (call && (UiFieldsetTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFieldsetTemplate_assertThisInitialized(self); }
function UiFieldsetTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFieldsetTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFieldsetTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFieldsetTemplate_getPrototypeOf(o) { UiFieldsetTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFieldsetTemplate_getPrototypeOf(o); }
function UiFieldsetTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFieldsetTemplate_setPrototypeOf(subClass, superClass); }
function UiFieldsetTemplate_setPrototypeOf(o, p) { UiFieldsetTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFieldsetTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui fieldset template exception
 * @class
 * @extends Exception
 */
var UiFieldsetTemplateException = /*#__PURE__*/function (_Exception) {
  function UiFieldsetTemplateException() {
    UiFieldsetTemplate_classCallCheck(this, UiFieldsetTemplateException);
    return UiFieldsetTemplate_callSuper(this, UiFieldsetTemplateException, arguments);
  }
  UiFieldsetTemplate_inherits(UiFieldsetTemplateException, _Exception);
  return UiFieldsetTemplate_createClass(UiFieldsetTemplateException);
}(Exception);
/**
 * Ui fieldset template data
 * @typedef {Object} UiFieldsetTemplateData
 * @property {null|string} legend - Fieldset legend
 * @property {null|string} contentBefore - Fieldset content before rows
 * @property {null|string} content - Fieldset content
 * @property {null|string} contentAfter - Fieldset content after rows
 * @property {null|string} required - Fieldset required notice
 * @property {null|Array<string>} classes - List of fieldset classes
 * @property {null|Array<string>} attributes - List of fieldset attributes
 * @property {null|Array<string>} wrapper - List of wrapper classes
 * @property {null|Array<string>} rows - List of rows
 * @property {null|Array<string>} row_classes - List of row classes
 */
/**
 * Ui fieldset template
 * @class
 * @extends UiTemplate
 */
var UiFieldsetTemplate = /*#__PURE__*/function (_UiTemplate) {
  function UiFieldsetTemplate() {
    var _this;
    UiFieldsetTemplate_classCallCheck(this, UiFieldsetTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = UiFieldsetTemplate_callSuper(this, UiFieldsetTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {UiFieldsetTemplateData}
     */
    UiFieldsetTemplate_defineProperty(_this, "_defaults", {
      legend: null,
      contentBefore: null,
      content: null,
      contentAfter: null,
      required: null,
      classes: [],
      attributes: [],
      wrapper: ['ui-wrap', 'ui-wrap--fieldset'],
      rows: [],
      row_classes: ['ui-wrap', 'ui-wrap--fieldset-row']
    });
    return _this;
  }
  UiFieldsetTemplate_inherits(UiFieldsetTemplate, _UiTemplate);
  return UiFieldsetTemplate_createClass(UiFieldsetTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {UiFieldsetTemplateData} data - Template data
     * @return {boolean} - True if data can be rendered
     */
    function _validate(data) {
      var contentBefore = typeof data.contentBefore === 'string' && data.contentBefore.length;
      var content = typeof data.content === 'string' && data.content.length;
      var contentAfter = typeof data.contentAfter === 'string' && data.contentAfter.length;
      var rows = !!data.rows.length;
      if (!contentBefore && !content && !contentAfter && !rows) {
        throw new UiFieldsetTemplateException('Requires content, before/after or rows');
      }
    }

    /**
     * Render template
     * @protected
     * @param {UiFieldsetTemplateData} data - Ui fieldset template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      var _data$contentBefore, _data$content, _data$contentAfter;
      // Set any default classes and attributes for the component
      var classes = ['ui-fieldset'];
      if (data.legend) classes.push('ui-fieldset--legend');
      if (data.classes instanceof Array) classes.push.apply(classes, UiFieldsetTemplate_toConsumableArray(data.classes));
      var wrapper = [];
      if (data.wrapper instanceof Array) wrapper.push.apply(wrapper, UiFieldsetTemplate_toConsumableArray(data.wrapper));
      var attributes = [];
      if (data.attributes instanceof Array) attributes.push.apply(attributes, UiFieldsetTemplate_toConsumableArray(data.attributes));

      // Required notice
      var required = data.required;
      if (required) {
        required = "<div class=\"ui-fieldset__required\"><p><em>".concat(required, "</em></p></div>");
      }

      // Setup row wrapping
      var wrapper_tag = 'div';
      var content = [];
      if (data.rows.length) {
        wrapper_tag = 'ul';
        var row_classes = ['ui-fieldset__row'];
        if (data.row_classes instanceof Array) row_classes.push.apply(row_classes, UiFieldsetTemplate_toConsumableArray(data.row_classes));
        for (var i = 0; i < data.rows.length; i++) {
          content.push("<li class=\"".concat(row_classes.join(' '), "\">").concat(data.rows[i], "</li>"));
        }
      }

      // Component markup
      return "<fieldset class=\"".concat(classes.join(' '), "\" ").concat(attributes.join(' '), ">") + (data.legend ? "<legend class=\"ui-fieldset__legend\"><strong>".concat(data.legend, "</strong></legend>") : '') + '<div class="ui-fieldset__content">' + "<".concat(wrapper_tag, " class=\"").concat(wrapper.join(' '), "\">") + ((_data$contentBefore = data.contentBefore) !== null && _data$contentBefore !== void 0 ? _data$contentBefore : '') + ((_data$content = data.content) !== null && _data$content !== void 0 ? _data$content : '') + (content.length ? content.join('') : '') + ((_data$contentAfter = data.contentAfter) !== null && _data$contentAfter !== void 0 ? _data$contentAfter : '') + (required ? required : '') + "</".concat(wrapper_tag, ">") + '</div>' + "</fieldset>";
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ../../../ui-form/src/js/Form/UiFormTemplate.js
function UiFormTemplate_typeof(o) { "@babel/helpers - typeof"; return UiFormTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormTemplate_typeof(o); }
function UiFormTemplate_toConsumableArray(arr) { return UiFormTemplate_arrayWithoutHoles(arr) || UiFormTemplate_iterableToArray(arr) || UiFormTemplate_unsupportedIterableToArray(arr) || UiFormTemplate_nonIterableSpread(); }
function UiFormTemplate_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiFormTemplate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiFormTemplate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiFormTemplate_arrayLikeToArray(o, minLen); }
function UiFormTemplate_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function UiFormTemplate_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return UiFormTemplate_arrayLikeToArray(arr); }
function UiFormTemplate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiFormTemplate_defineProperty(obj, key, value) { key = UiFormTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function UiFormTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormTemplate_toPropertyKey(descriptor.key), descriptor); } }
function UiFormTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormTemplate_toPropertyKey(t) { var i = UiFormTemplate_toPrimitive(t, "string"); return "symbol" == UiFormTemplate_typeof(i) ? i : i + ""; }
function UiFormTemplate_toPrimitive(t, r) { if ("object" != UiFormTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormTemplate_callSuper(t, o, e) { return o = UiFormTemplate_getPrototypeOf(o), UiFormTemplate_possibleConstructorReturn(t, UiFormTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormTemplate_possibleConstructorReturn(self, call) { if (call && (UiFormTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormTemplate_assertThisInitialized(self); }
function UiFormTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormTemplate_getPrototypeOf(o) { UiFormTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormTemplate_getPrototypeOf(o); }
function UiFormTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormTemplate_setPrototypeOf(subClass, superClass); }
function UiFormTemplate_setPrototypeOf(o, p) { UiFormTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui form template exception
 * @class
 * @extends Exception
 */
var UiFormTemplateException = /*#__PURE__*/function (_Exception) {
  function UiFormTemplateException() {
    UiFormTemplate_classCallCheck(this, UiFormTemplateException);
    return UiFormTemplate_callSuper(this, UiFormTemplateException, arguments);
  }
  UiFormTemplate_inherits(UiFormTemplateException, _Exception);
  return UiFormTemplate_createClass(UiFormTemplateException);
}(Exception);
/**
 * Ui form template data
 * @typedef {Object} UiFormTemplateData
 * @property {null|string} id - Form id
 * @property {string} url - Form action url
 * @property {string} method - Transmission method
 * @property {boolean} files - Sets enctype multipart
 * @property {null|string} content - Form content
 * @property {null|Array<string>} classes - List of form classes
 * @property {null|Array<string>} attributes - List of form attributes
 * @property {null|Array<string>} wrapper - List of wrapper classes
 */
/**
 * Ui form template
 * @class
 * @extends UiTemplate
 */
var UiFormTemplate = /*#__PURE__*/function (_UiTemplate) {
  function UiFormTemplate() {
    var _this;
    UiFormTemplate_classCallCheck(this, UiFormTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = UiFormTemplate_callSuper(this, UiFormTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {UiFormTemplateData}
     */
    UiFormTemplate_defineProperty(_this, "_defaults", {
      id: null,
      url: '',
      method: 'post',
      files: false,
      content: null,
      classes: [],
      attributes: [],
      wrapper: []
    });
    return _this;
  }
  UiFormTemplate_inherits(UiFormTemplate, _UiTemplate);
  return UiFormTemplate_createClass(UiFormTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {UiFormTemplateData} data - Template data
     * @return {boolean} - True if data can be rendered
     */
    function _validate(data) {
      if (typeof data.content !== 'string' || !data.content.length) throw new UiFormTemplateException('Requires content');
    }

    /**
     * Render template
     * @protected
     * @param {UiFormTemplateData} data - Ui form template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      // Set any default classes and attributes for the component
      var classes = ['ui-form'];
      if (data.classes instanceof Array) classes.push.apply(classes, UiFormTemplate_toConsumableArray(data.classes));
      var wrapper = ['ui-wrap', 'ui-wrap--form'];
      if (data.wrapper instanceof Array) wrapper.push.apply(wrapper, UiFormTemplate_toConsumableArray(data.wrapper));
      var attributes = ["action=\"".concat(data.url, "\""), "method=\"".concat(data.method, "\"")];
      if (data.id) attributes.push("id=\"".concat(data.id, "\""));
      if (data.files) attributes.push('enctype="multipart/form-data"');
      if (data.attributes instanceof Array) attributes.push.apply(attributes, UiFormTemplate_toConsumableArray(data.attributes));

      // Component markup
      return "<form is=\"ui-form\" class=\"".concat(classes.join(' '), "\" ").concat(attributes.join(' '), ">") + "<div class=\"".concat(wrapper.join(' '), "\">").concat(data.content, "</div>") + "</form>";
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ../../../ui-form/src/js/Input/UiInputTemplate.js
function UiInputTemplate_typeof(o) { "@babel/helpers - typeof"; return UiInputTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiInputTemplate_typeof(o); }
function UiInputTemplate_toConsumableArray(arr) { return UiInputTemplate_arrayWithoutHoles(arr) || UiInputTemplate_iterableToArray(arr) || UiInputTemplate_unsupportedIterableToArray(arr) || UiInputTemplate_nonIterableSpread(); }
function UiInputTemplate_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiInputTemplate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiInputTemplate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiInputTemplate_arrayLikeToArray(o, minLen); }
function UiInputTemplate_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function UiInputTemplate_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return UiInputTemplate_arrayLikeToArray(arr); }
function UiInputTemplate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiInputTemplate_defineProperty(obj, key, value) { key = UiInputTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function UiInputTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiInputTemplate_toPropertyKey(descriptor.key), descriptor); } }
function UiInputTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiInputTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiInputTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiInputTemplate_toPropertyKey(t) { var i = UiInputTemplate_toPrimitive(t, "string"); return "symbol" == UiInputTemplate_typeof(i) ? i : i + ""; }
function UiInputTemplate_toPrimitive(t, r) { if ("object" != UiInputTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiInputTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiInputTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiInputTemplate_callSuper(t, o, e) { return o = UiInputTemplate_getPrototypeOf(o), UiInputTemplate_possibleConstructorReturn(t, UiInputTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiInputTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiInputTemplate_possibleConstructorReturn(self, call) { if (call && (UiInputTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiInputTemplate_assertThisInitialized(self); }
function UiInputTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiInputTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiInputTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiInputTemplate_getPrototypeOf(o) { UiInputTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiInputTemplate_getPrototypeOf(o); }
function UiInputTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiInputTemplate_setPrototypeOf(subClass, superClass); }
function UiInputTemplate_setPrototypeOf(o, p) { UiInputTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiInputTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui input template exception
 * @class
 * @extends Exception
 */
var UiInputTemplateException = /*#__PURE__*/function (_Exception) {
  function UiInputTemplateException() {
    UiInputTemplate_classCallCheck(this, UiInputTemplateException);
    return UiInputTemplate_callSuper(this, UiInputTemplateException, arguments);
  }
  UiInputTemplate_inherits(UiInputTemplateException, _Exception);
  return UiInputTemplate_createClass(UiInputTemplateException);
}(Exception);
/**
 * Ui input template data
 * @typedef {Object} UiInputTemplateData
 * @property {null|string} id - Input id
 * @property {string} name - Input name
 * @property {string} type - Input type
 * @property {null|string|number} value - Default value
 * @property {null|boolean} checked - Checkbox/radio checked state
 * @property {null|boolean} required - Required value
 * @property {null|number} maxlen - Max length value
 * @property {null|number} min - Min value
 * @property {null|number} max - Max value
 * @property {null|number} step - Stepped value
 * @property {null|(25,30,33,40,50,60,66,70,75,100,'wide')} width - Input width
 * @property {null|Array<string>} classes - List of wrapper classes
 * @property {null|Array<string>} attr - List of wrapper attributes
 * @property {null|Array<string>} attributes - List of input attributes
 * @property {null|Array<string>} autocomplete - List of autocomplete values
 * @property {null|UiInputLabelTemplateData} label - Input label
 * @property {null|string|Array<string|UiInputOptionTemplateData>} options - Select options
 * @property {null|string} pseudo - Pseudo element content
 * @property {null|string} icon - Pseudo element content as icon
 * @property {null|string} before - Before input content
 * @property {null|string} after - After input content
 * @property {null|string} prefix - Before input prefix text
 * @property {null|string} suffix - After input suffix text
 * @property {null|UiInputErrorTemplateData} error - Error options
 */
/**
 * Ui input label template data
 * @typedef {Object} UiInputLabelTemplateData
 * @property {null|string} tag - Label tag
 * @property {null|boolean} before - Label position
 * @property {null|string} text - Label text
 */
/**
 * @typedef {Object} UiInputOptionTemplateData
 * @param {string} label - Display label
 * @param {string} value - Option value
 * @param {null|string} attributes - Optional attributes
 */
/**
 * @typedef {Object} UiInputErrorTemplateData
 * @property {string} tag - Error tag
 */
/**
 * Ui input template
 * @class
 * @extends UiTemplate
 */
var UiInputTemplate = /*#__PURE__*/function (_UiTemplate) {
  function UiInputTemplate() {
    var _this;
    UiInputTemplate_classCallCheck(this, UiInputTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = UiInputTemplate_callSuper(this, UiInputTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {UiInputTemplateData}
     */
    UiInputTemplate_defineProperty(_this, "_defaults", {
      id: null,
      name: null,
      type: 'text',
      value: null,
      checked: false,
      required: false,
      maxlen: null,
      min: null,
      max: null,
      step: null,
      width: null,
      classes: [],
      attr: [],
      attributes: [],
      autocomplete: null,
      label: {
        tag: 'strong',
        before: true,
        text: null
      },
      before: null,
      after: null,
      prefix: null,
      suffix: null,
      error: {
        tag: 'em'
      },
      options: null,
      pseudo: '',
      icon: null
    });
    return _this;
  }
  UiInputTemplate_inherits(UiInputTemplate, _UiTemplate);
  return UiInputTemplate_createClass(UiInputTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {UiInputTemplateData} data - Template data
     * @return {boolean} - True if data can be rendered
     */
    function _validate(data) {
      if (typeof data.name !== 'string' || !data.name.length) throw new UiInputTemplateException('Requires a valid name');
      if (typeof data.type !== 'string' || !data.type.length) throw new UiInputTemplateException('Requires a valid type');
    }

    /**
     * Render template
     * @protected
     * @param {UiInputTemplateData} data - Ui input template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      // Set any default classes and attributes for the component
      var classes = ['ui-input'];
      var default_types = ['date', 'datetime', 'email', 'number', 'select', 'text'];
      if (default_types.includes(data.type)) classes.push('ui-input--default');
      classes.push("ui-input--".concat(data.type));
      if (data.type === 'checkbox' && data.icon === null) data.icon = 'check';
      if (data.required) classes.push('ui-input--required');
      if (data.width) classes.push("ui-input--".concat(data.width));
      if (data.classes instanceof Array) classes.push.apply(classes, UiInputTemplate_toConsumableArray(data.classes));
      var attr = [];
      if (data.attr instanceof Array) attr.push.apply(attr, UiInputTemplate_toConsumableArray(data.attr));
      var attributes = [];
      if (data.id) attributes.push("id=\"".concat(data.id, "\""));
      if (['checkbox', 'radio'].includes(data.type) && data.checked) attributes.push('checked');
      if (data.required) attributes.push("required");
      if (typeof data.maxlen === 'number') attributes.push("maxlength=\"".concat(data.maxlen, "\""));
      if (typeof data.min === 'number') attributes.push("min=\"".concat(data.min, "\""));
      if (typeof data.max === 'number') attributes.push("max=\"".concat(data.max, "\""));
      if (data.step) attributes.push("step=\"".concat(data.step, "\""));
      if (data.value !== null && typeof data.value !== 'boolean' && !['textarea', 'select'].includes(data.type)) attributes.push("value=\"".concat(data.value, "\""));
      if (data.attributes instanceof Array) attributes.push.apply(attributes, UiInputTemplate_toConsumableArray(data.attributes));
      if (data.icon && (!data.pseudo || !data.pseudo.length)) {
        data.pseudo = "<span class=\"ui-icon\" data-icon=\"".concat(data.icon, "\"><span></span><span></span></span>");
      }
      var autocomplete = '';
      if (data.autocomplete instanceof Array && data.autocomplete.length) {
        attributes.push("list=\"".concat(data.id, "_autocomplete\""));
        attributes.push("autocomplete=\"off\"");
        autocomplete += "<datalist id=\"".concat(data.id, "_autocomplete\">");
        for (var i = 0; i < data.autocomplete.length; i++) {
          autocomplete += '<option>' + data.autocomplete[i] + '</option>';
        }
        autocomplete += '</datalist>';
      }
      var markup_label = data.label.text && data.label.text.length ? "<".concat(data.label.tag, " class=\"ui-input__label\">").concat(data.label.text, "</").concat(data.label.tag, ">") : '';
      var markup_error = data.error.tag && data.error.tag.length ? "<".concat(data.error.tag, " class=\"ui-input__error\"></").concat(data.error.tag, ">") : '';
      if (!data.before && data.prefix) data.before = "<span class=\"ui-input__prefix\">".concat(data.prefix, "</span>");
      if (!data.after && data.suffix) data.after = "<span class=\"ui-input__suffix\">".concat(data.suffix, "</span>");
      var markup_input = "<input type=\"".concat(data.type, "\" name=\"").concat(data.name, "\" ").concat(attributes.join(' '), " />");
      switch (data.type) {
        case 'textarea':
          markup_input = "<textarea name=\"".concat(data.name, "\" ").concat(attributes.join(' '), ">").concat(data.value === null ? '' : data.value, "</textarea>");
          break;
        case 'select':
          markup_input = "<select name=\"".concat(data.name, "\" ").concat(attributes.join(' '), ">");
          if (typeof data.options === 'string') {
            markup_input += data.options;
          } else {
            for (var _i = 0; _i < data.options.length; _i++) {
              var option = data.options[_i];
              if (!isPojo_isPojo(option)) option = {
                value: option,
                label: ucfirst(option)
              };
              if (data.value === option.value) {
                if (!option.attributes) option.attributes = '';
                option.attributes += ' selected';
              }
              markup_input += "<option value=\"".concat(option.value === null ? '' : option.value, "\" ").concat(option.attributes || '', ">").concat(option.label, "</option>");
            }
          }
          markup_input += "</select>";
          markup_input += "<span class=\"ui-input__pseudo\">".concat(data.pseudo, "</span>");
          break;
        case 'checkbox':
        case 'radio':
          markup_input += "<span class=\"ui-input__pseudo\">".concat(data.pseudo, "</span>");
          break;
      }

      // Component markup
      return "<label class=\"".concat(classes.join(' '), "\" ").concat(attr.join(' '), ">") + (data.label.before ? markup_label : '') + '<span class="ui-input__input">' + (data.before || '') + markup_input + (data.after || '') + '</span>' + (!data.label.before ? markup_label : '') + markup_error + autocomplete + "</label>";
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ../../../ui-form/src/js/Input/UiRotateComponent.js
function UiRotateComponent_typeof(o) { "@babel/helpers - typeof"; return UiRotateComponent_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiRotateComponent_typeof(o); }
function UiRotateComponent_get() { if (typeof Reflect !== "undefined" && Reflect.get) { UiRotateComponent_get = Reflect.get.bind(); } else { UiRotateComponent_get = function _get(target, property, receiver) { var base = UiRotateComponent_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return UiRotateComponent_get.apply(this, arguments); }
function UiRotateComponent_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = UiRotateComponent_getPrototypeOf(object); if (object === null) break; } return object; }
function UiRotateComponent_classPrivateMethodInitSpec(obj, privateSet) { UiRotateComponent_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiRotateComponent_classPrivateFieldInitSpec(obj, privateMap, value) { UiRotateComponent_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiRotateComponent_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiRotateComponent_classPrivateFieldGet(s, a) { return s.get(UiRotateComponent_assertClassBrand(s, a)); }
function UiRotateComponent_classPrivateFieldSet(s, a, r) { return s.set(UiRotateComponent_assertClassBrand(s, a), r), r; }
function UiRotateComponent_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiRotateComponent_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiRotateComponent_toPropertyKey(descriptor.key), descriptor); } }
function UiRotateComponent_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiRotateComponent_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiRotateComponent_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiRotateComponent_toPropertyKey(t) { var i = UiRotateComponent_toPrimitive(t, "string"); return "symbol" == UiRotateComponent_typeof(i) ? i : i + ""; }
function UiRotateComponent_toPrimitive(t, r) { if ("object" != UiRotateComponent_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiRotateComponent_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiRotateComponent_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiRotateComponent_callSuper(t, o, e) { return o = UiRotateComponent_getPrototypeOf(o), UiRotateComponent_possibleConstructorReturn(t, UiRotateComponent_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiRotateComponent_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiRotateComponent_possibleConstructorReturn(self, call) { if (call && (UiRotateComponent_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiRotateComponent_assertThisInitialized(self); }
function UiRotateComponent_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiRotateComponent_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiRotateComponent_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiRotateComponent_getPrototypeOf(o) { UiRotateComponent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiRotateComponent_getPrototypeOf(o); }
function UiRotateComponent_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiRotateComponent_setPrototypeOf(subClass, superClass); }
function UiRotateComponent_setPrototypeOf(o, p) { UiRotateComponent_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiRotateComponent_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui rotate component exception
 * @class
 * @extends Exception
 */
var UiRotateComponentException = /*#__PURE__*/function (_Exception) {
  function UiRotateComponentException() {
    UiRotateComponent_classCallCheck(this, UiRotateComponentException);
    return UiRotateComponent_callSuper(this, UiRotateComponentException, arguments);
  }
  UiRotateComponent_inherits(UiRotateComponentException, _Exception);
  return UiRotateComponent_createClass(UiRotateComponentException);
}(Exception);
/**
 * Ui rotate component
 * @class
 * @extends UiComponent
 */
var _disabled = /*#__PURE__*/new WeakMap();
var _readonly = /*#__PURE__*/new WeakMap();
var _value = /*#__PURE__*/new WeakMap();
var _dragging = /*#__PURE__*/new WeakMap();
var _UiRotateComponent_brand = /*#__PURE__*/new WeakSet();
var UiRotateComponent = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiComponent) {
  /**
   * Constructor
   * @constructor
   * @param {HTMLFormElement} element - Component element
   * @param {null|Object} settings - Config object
   * @param {Object} defaults - Default config
   * @param {Array<Object>} extend - Extend default config
   * @param {Object} states - States definition
   * @param {Array<Function|Array<Function,*>>} plugins - Plugins to load
   * @param {null|UiComponent} parent - Parent object
   * @param {null|console|Object} debug - Debug object
   * @param {boolean} init - Run init method
   */
  function UiRotateComponent(element) {
    var _this;
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var extend = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var states = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var plugins = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var parent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var debug = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
    var init = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : true;
    UiRotateComponent_classCallCheck(this, UiRotateComponent);
    /**
     * Default config
     * @type {Object}
     */
    defaults = defaults || {
      // Display angle offset
      // @type {number}
      offset: -90,
      // Set value with unit
      // @type {boolean}
      withUnit: true,
      // Rounding decimals
      // @type {number}
      decimals: 0,
      // Input events
      // @type {boolean}
      events: true,
      // Dom references
      // @type {Object}
      dom: {
        // Value target
        // @type {string}
        input: 'input',
        // Value display target
        // @type {string}
        display: '.ui-rotate__angle',
        // Indicator element
        // @type {string}
        indicator: '.ui-rotate__indicator',
        // Rotate control button
        // @type {string}
        rotator: '.ui-rotate__control'
      }
    };

    /**
     * Default states
     * @type {Object}
     */
    states = states || {
      initialized: {
        classOn: 'ui-rotate--initialized'
      },
      disabled: {
        global: false,
        classOn: 'ui-rotate--disabled'
      },
      readonly: {
        global: false,
        classOn: 'ui-rotate--readonly'
      }
    };

    // Initialize parent
    _this = UiRotateComponent_callSuper(this, UiRotateComponent, [element, settings, defaults, extend, states, plugins, parent, debug, init]);
    /**
     * Event rotator mouse event
     * @private
     * @param {null|MouseEvent} event - Click/down/move/up event
     * @param {string} name - Event trigger name
     * @param {null|number} angle - Override angle
     * @param {boolean} silent - Fire no events
     * @return {void}
     */
    UiRotateComponent_classPrivateMethodInitSpec(_this, _UiRotateComponent_brand);
    UiRotateComponent_classPrivateFieldInitSpec(_this, _disabled, false);
    UiRotateComponent_classPrivateFieldInitSpec(_this, _readonly, false);
    UiRotateComponent_classPrivateFieldInitSpec(_this, _value, 0);
    UiRotateComponent_classPrivateFieldInitSpec(_this, _dragging, false);
    return _this;
  }

  /**
   * Initialize component
   * @public
   * @return {void}
   */
  UiRotateComponent_inherits(UiRotateComponent, _UiComponent);
  return UiRotateComponent_createClass(UiRotateComponent, [{
    key: "init",
    value: function init() {
      // Bind events
      this.bind();

      // Complete init
      UiRotateComponent_get(UiRotateComponent_getPrototypeOf(UiRotateComponent.prototype), "init", this).call(this);
    }

    /**
     * Bind component related events
     * @public
     * @return {void}
     */
  }, {
    key: "bind",
    value: function bind() {
      var _this2 = this;
      var rotator = this.getDomRefs('rotator', false);
      var listener = function listener(event) {
        if (document.elementFromPoint(event.clientX, event.clientY) === rotator) {
          UiRotateComponent_assertClassBrand(_UiRotateComponent_brand, _this2, _event_rotatorMouseEvent).call(_this2, event, 'input');
        }
      };
      rotator.addEventListener('click', function (event) {
        UiRotateComponent_assertClassBrand(_UiRotateComponent_brand, _this2, _event_rotatorMouseEvent).call(_this2, event, 'change');
      });
      rotator.addEventListener('mousedown', function (event) {
        UiRotateComponent_classPrivateFieldSet(_dragging, _this2, true);
        UiRotateComponent_assertClassBrand(_UiRotateComponent_brand, _this2, _event_rotatorMouseEvent).call(_this2, event, 'change');
        rotator.addEventListener('mousemove', listener, {
          passive: true
        });
      });
      rotator.addEventListener('mouseup', function (event) {
        if (UiRotateComponent_classPrivateFieldGet(_dragging, _this2)) {
          UiRotateComponent_classPrivateFieldSet(_dragging, _this2, false);
          UiRotateComponent_assertClassBrand(_UiRotateComponent_brand, _this2, _event_rotatorMouseEvent).call(_this2, event, 'change');
          rotator.removeEventListener('mousemove', listener);
        }
      });
      document.addEventListener('mouseup', function (event) {
        if (UiRotateComponent_classPrivateFieldGet(_dragging, _this2)) {
          UiRotateComponent_classPrivateFieldSet(_dragging, _this2, false);
          var angle = document.elementFromPoint(event.clientX, event.clientY) !== rotator ? UiRotateComponent_classPrivateFieldGet(_value, _this2) : null;
          UiRotateComponent_assertClassBrand(_UiRotateComponent_brand, _this2, _event_rotatorMouseEvent).call(_this2, event, 'change', angle);
          rotator.removeEventListener('mousemove', listener);
        }
      });
    }
  }, {
    key: "value",
    get: function get() {
      return UiRotateComponent_classPrivateFieldGet(_value, this);
    },
    set: function set(value) {
      if (typeof value === 'string') value = parseFloat(value);
      if (typeof value !== 'number' || Number.isNaN(value)) throw new UiRotateComponentException('Value must be a valid angle');
      UiRotateComponent_assertClassBrand(_UiRotateComponent_brand, this, _event_rotatorMouseEvent).call(this, null, 'change', value, true);
    }
  }, {
    key: "disabled",
    get: function get() {
      return UiRotateComponent_classPrivateFieldGet(_disabled, this);
    },
    set: function set(state) {
      UiRotateComponent_classPrivateFieldSet(_disabled, this, !!state);
      var input = this.getDomRefs('input', false);
      var rotator = this.getDomRefs('rotator', false);
      if (!!state) {
        this.states.set('disabled');
        input.disabled = true;
        rotator.disabled = true;
      } else {
        this.states.unset('disabled');
        input.disabled = false;
        rotator.disabled = false;
      }
    }
  }, {
    key: "readonly",
    get: function get() {
      return UiRotateComponent_classPrivateFieldGet(_readonly, this);
    },
    set: function set(state) {
      UiRotateComponent_classPrivateFieldSet(_readonly, this, !!state);
      var input = this.getDomRefs('input', false);
      var rotator = this.getDomRefs('rotator', false);
      if (!!state) {
        this.states.set('readonly');
        input.readonly = true;
        rotator.disabled = true;
      } else {
        this.states.unset('readonly');
        input.readonly = false;
        rotator.disabled = false;
      }
    }
  }], [{
    key: "selector",
    get:
    /**
     * Element selector getter
     * @public
     * @return {string} - Element selector
     */
    function get() {
      return '[is="ui-rotate"]:not([data-state])';
    }
  }]);
}(UiComponent)));
function _event_rotatorMouseEvent(event, name) {
  var angle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var silent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (event) angle = UiRotateComponent_assertClassBrand(_UiRotateComponent_brand, this, _get_angle).call(this, event);
  if (typeof angle !== 'number') throw new UiRotateComponentException('Invalid angle value "' + UiRotateComponent_typeof(angle) + '"');
  var unit = 'deg';
  var input = this.getDomRefs('input', false);
  input.value = angle + (this.config.get('withUnit') ? unit : '');
  UiRotateComponent_classPrivateFieldSet(_value, this, angle);
  this.getDomRefs('indicator', false).style.rotate = angle + unit;
  if (!silent) {
    var events = this.config.get('events');
    var detail = {
      angle: angle,
      unit: unit,
      event: event
    };
    detail.component = this;
    if (events) input.dispatchEvent(new CustomEvent(name, {
      bubbles: true,
      cancelable: false,
      detail: detail
    }));
    this.dispatchEvent(name, detail);
  }
}
function _get_angle(event) {
  var offset = this.config.get('offset');
  var decimals = this.config.get('decimals');
  var target = event.target.getBoundingClientRect();
  var x1 = event.clientX - target.left;
  var y1 = event.clientY - target.top;
  var x2 = target.width / 2;
  var y2 = target.height / 2;
  var angle = Math.atan2(y2 - y1, x2 - x1) * (180 / Math.PI);
  if (y1 > y2 || x1 < x2) angle += 360;
  return round(angle + offset, decimals);
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Plugins/UiFormPluginValues.js
function UiFormPluginValues_typeof(o) { "@babel/helpers - typeof"; return UiFormPluginValues_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormPluginValues_typeof(o); }
function UiFormPluginValues_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormPluginValues_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormPluginValues_toPropertyKey(descriptor.key), descriptor); } }
function UiFormPluginValues_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormPluginValues_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormPluginValues_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormPluginValues_toPropertyKey(t) { var i = UiFormPluginValues_toPrimitive(t, "string"); return "symbol" == UiFormPluginValues_typeof(i) ? i : i + ""; }
function UiFormPluginValues_toPrimitive(t, r) { if ("object" != UiFormPluginValues_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormPluginValues_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormPluginValues_callSuper(t, o, e) { return o = UiFormPluginValues_getPrototypeOf(o), UiFormPluginValues_possibleConstructorReturn(t, UiFormPluginValues_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormPluginValues_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormPluginValues_possibleConstructorReturn(self, call) { if (call && (UiFormPluginValues_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormPluginValues_assertThisInitialized(self); }
function UiFormPluginValues_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormPluginValues_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormPluginValues_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormPluginValues_get() { if (typeof Reflect !== "undefined" && Reflect.get) { UiFormPluginValues_get = Reflect.get.bind(); } else { UiFormPluginValues_get = function _get(target, property, receiver) { var base = UiFormPluginValues_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return UiFormPluginValues_get.apply(this, arguments); }
function UiFormPluginValues_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = UiFormPluginValues_getPrototypeOf(object); if (object === null) break; } return object; }
function UiFormPluginValues_getPrototypeOf(o) { UiFormPluginValues_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormPluginValues_getPrototypeOf(o); }
function UiFormPluginValues_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormPluginValues_setPrototypeOf(subClass, superClass); }
function UiFormPluginValues_setPrototypeOf(o, p) { UiFormPluginValues_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormPluginValues_setPrototypeOf(o, p); }
function UiFormPluginValues_classPrivateMethodInitSpec(obj, privateSet) { UiFormPluginValues_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiFormPluginValues_classPrivateFieldInitSpec(obj, privateMap, value) { UiFormPluginValues_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiFormPluginValues_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiFormPluginValues_classPrivateFieldSet(s, a, r) { return s.set(UiFormPluginValues_assertClassBrand(s, a), r), r; }
function UiFormPluginValues_classPrivateFieldGet(s, a) { return s.get(UiFormPluginValues_assertClassBrand(s, a)); }
function UiFormPluginValues_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */



/**
 * Ui form plugin values
 * @class
 * @extends UiPlugin
 */
var _values = /*#__PURE__*/new WeakMap();
var _last_state = /*#__PURE__*/new WeakMap();
var _UiFormPluginValues_brand = /*#__PURE__*/new WeakSet();
var UiFormPluginValues = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiFormComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiFormPluginValues(options, context, debug) {
    var _this;
    UiFormPluginValues_classCallCheck(this, UiFormPluginValues);
    _this = UiFormPluginValues_callSuper(this, UiFormPluginValues, [options, context, debug]);

    // Extend default config
    /**
     * Default event
     * @private
     * @return {void}
     */
    UiFormPluginValues_classPrivateMethodInitSpec(_this, _UiFormPluginValues_brand);
    /**
     * Form values instance
     * @private
     * @property
     * @type {null|Object|FormValues}
     */
    UiFormPluginValues_classPrivateFieldInitSpec(_this, _values, null);
    /**
     * Last data state
     * @private
     * @property
     * @type {null|string}
     */
    UiFormPluginValues_classPrivateFieldInitSpec(_this, _last_state, null);
    _this.extendConfig = {
      values: {
        // Enable input data change state
        // @type {boolean}
        changeState: false,
        // Set values as default values
        // @type {boolean}
        asDefault: true
      },
      // Dom references
      // @type {Object}
      dom: {
        // Values input selector
        // @type {string}
        values: 'input, select, textarea'
      }
    };
    return _this;
  }

  /**
   * Values getter
   * @public
   * @return {null|Object|FormValues} - Form values object
   */
  UiFormPluginValues_inherits(UiFormPluginValues, _UiPlugin);
  return UiFormPluginValues_createClass(UiFormPluginValues, [{
    key: "values",
    get: function get() {
      return UiFormPluginValues_classPrivateFieldGet(_values, this);
    }

    /**
     * Init component
     * @public
     * @param {Object|UiFormComponent} context - Plugin context
     * @return {void}
     */
  }, {
    key: "initComponent",
    value: function initComponent(context) {
      var _this2 = this;
      // Register events
      //  Must be defined here since the defaultEvent might be modified during init by other plugins
      this.registerEvents = [[this.context.config.exposed.defaultEvent, function () {
        UiFormPluginValues_assertClassBrand(_UiFormPluginValues_brand, _this2, _event_default).call(_this2);
      }]];

      // Bind form element events
      UiFormPluginValues_get(UiFormPluginValues_getPrototypeOf(UiFormPluginValues.prototype), "initComponent", this).call(this, context);

      // Create form values instance
      UiFormPluginValues_classPrivateFieldSet(_values, this, new FormValues(context.dom, false, this.debug));
      UiFormPluginValues_classPrivateFieldGet(_values, this).setAsDefault = this.context.config.get('values.asDefault');
    }
  }, {
    key: "updateValuesState",
    value:
    /**
     * Update value comparison state
     * @public
     * @return {void}
     */
    function updateValuesState() {
      if (this.context.config.exposed.values.changeState) {
        UiFormPluginValues_classPrivateFieldSet(_last_state, this, this.getValues(true));
        if (this.debug) this.debug.log(this.constructor.name + '::updateValuesState  Updated values state', UiFormPluginValues_classPrivateFieldGet(_last_state, this));
      }
    }

    /**
     * Values have changes
     * @public
     * @return {null|boolean} - Null if change state disabled
     */
  }, {
    key: "hasChanges",
    value: function hasChanges() {
      if (!this.context.config.exposed.values.changeState) return null;
      return JSON.stringify(UiFormPluginValues_classPrivateFieldGet(_last_state, this)) !== JSON.stringify(this.getValues(true));
    }

    /**
     * Get fieldname from input
     * @param {HTMLElement} input - Input element
     * @return {string} - Fieldname
     */
  }, {
    key: "getFieldName",
    value: function getFieldName(input) {
      return UiFormPluginValues_classPrivateFieldGet(_values, this).fieldname(input);
    }

    /**
     * Get inputs related to a fieldname
     * @public
     * @param {string} field - Field name
     * @return {Array|NodeList} - Fields
     */
  }, {
    key: "getInputs",
    value: function getInputs(field) {
      return UiFormPluginValues_classPrivateFieldGet(_values, this).inputs(field);
    }

    /**
     * Get values
     * @public
     * @param {boolean} flat - Flat values
     * @param {string} selector - Input selector
     * @return {Object} - Values map
     */
  }, {
    key: "getValues",
    value: function getValues() {
      var flat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (typeof selector !== 'string') {
        selector = this.context.config.exposed.dom.values;
      }
      return UiFormPluginValues_classPrivateFieldGet(_values, this).get(flat, selector);
    }

    /**
     * Set values
     * @param {Object} values - Values map
     * @param {boolean} flat - Is flat map
     * @return {void}
     */
  }, {
    key: "setValues",
    value: function setValues(values) {
      var flat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return UiFormPluginValues_classPrivateFieldGet(_values, this).set(values, flat, false);
    }
  }], [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'values';
    }
  }]);
}(UiPlugin)));
function _event_default() {
  this.updateValuesState();
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Plugins/UiFormPluginPrefetch.js
function UiFormPluginPrefetch_typeof(o) { "@babel/helpers - typeof"; return UiFormPluginPrefetch_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormPluginPrefetch_typeof(o); }
function UiFormPluginPrefetch_classPrivateMethodInitSpec(obj, privateSet) { UiFormPluginPrefetch_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiFormPluginPrefetch_classPrivateFieldInitSpec(obj, privateMap, value) { UiFormPluginPrefetch_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiFormPluginPrefetch_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiFormPluginPrefetch_classPrivateFieldGet(s, a) { return s.get(UiFormPluginPrefetch_assertClassBrand(s, a)); }
function UiFormPluginPrefetch_classPrivateFieldSet(s, a, r) { return s.set(UiFormPluginPrefetch_assertClassBrand(s, a), r), r; }
function UiFormPluginPrefetch_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiFormPluginPrefetch_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormPluginPrefetch_toPropertyKey(descriptor.key), descriptor); } }
function UiFormPluginPrefetch_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormPluginPrefetch_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormPluginPrefetch_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormPluginPrefetch_toPropertyKey(t) { var i = UiFormPluginPrefetch_toPrimitive(t, "string"); return "symbol" == UiFormPluginPrefetch_typeof(i) ? i : i + ""; }
function UiFormPluginPrefetch_toPrimitive(t, r) { if ("object" != UiFormPluginPrefetch_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormPluginPrefetch_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormPluginPrefetch_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormPluginPrefetch_callSuper(t, o, e) { return o = UiFormPluginPrefetch_getPrototypeOf(o), UiFormPluginPrefetch_possibleConstructorReturn(t, UiFormPluginPrefetch_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormPluginPrefetch_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormPluginPrefetch_possibleConstructorReturn(self, call) { if (call && (UiFormPluginPrefetch_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormPluginPrefetch_assertThisInitialized(self); }
function UiFormPluginPrefetch_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormPluginPrefetch_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormPluginPrefetch_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormPluginPrefetch_getPrototypeOf(o) { UiFormPluginPrefetch_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormPluginPrefetch_getPrototypeOf(o); }
function UiFormPluginPrefetch_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormPluginPrefetch_setPrototypeOf(subClass, superClass); }
function UiFormPluginPrefetch_setPrototypeOf(o, p) { UiFormPluginPrefetch_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormPluginPrefetch_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui form plugin prefetch exception
 * @class
 * @extends Exception
 */
var UiFormPluginPrefetchException = /*#__PURE__*/function (_Exception) {
  function UiFormPluginPrefetchException() {
    UiFormPluginPrefetch_classCallCheck(this, UiFormPluginPrefetchException);
    return UiFormPluginPrefetch_callSuper(this, UiFormPluginPrefetchException, arguments);
  }
  UiFormPluginPrefetch_inherits(UiFormPluginPrefetchException, _Exception);
  return UiFormPluginPrefetch_createClass(UiFormPluginPrefetchException);
}(Exception);
/**
 * @typedef {Function} prefetchCallback
 * @param {Function} success - Success callback
 * @param {Function} error - Error callback, can receive an optional error event argument
 * @param {Object|UiFormPluginJSONResponse} plugin - Plugin object
 * @return {void}
 */
/**
 * @typedef {Function} responseCallback
 * @param {Function} success - Success callback
 * @param {Function} error - Error callback, can receive an optional error event argument
 * @param {Object|AsyncRequest} request - Request instance
 * @param {Object|UiFormPluginJSONResponse} plugin - Plugin object
 * @return {void}
 */
/**
 * Ui form plugin prefetch
 * @class
 * @extends UiPlugin
 */
var UiFormPluginPrefetch_request = /*#__PURE__*/new WeakMap();
var _UiFormPluginPrefetch_brand = /*#__PURE__*/new WeakSet();
var UiFormPluginPrefetch = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiFormComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiFormPluginPrefetch(_options, context, debug) {
    var _this;
    UiFormPluginPrefetch_classCallCheck(this, UiFormPluginPrefetch);
    _this = UiFormPluginPrefetch_callSuper(this, UiFormPluginPrefetch, [_options, context, debug]);

    // Extend default config
    /**
     * Initialized event
     * @private
     * @return {void}
     */
    UiFormPluginPrefetch_classPrivateMethodInitSpec(_this, _UiFormPluginPrefetch_brand);
    /**
     * Async request
     * @private
     * @property
     * @type {null|AsyncRequest}
     */
    UiFormPluginPrefetch_classPrivateFieldInitSpec(_this, UiFormPluginPrefetch_request, null);
    _this.extendConfig = {
      // Changes default state to ready
      // @type {string}
      defaultState: 'ready',
      // Changes default event to ready
      // @type {string}
      defaultEvent: 'form.ready',
      // Extends sendable states
      // @type {Array<string>}
      sendableStates: ['ready'],
      // Prefetch options
      // @type {Object}
      prefetch: {
        // AsyncRequest default options see @squirrel-forge/ui-util for details
        // @type {Object}
        asyncOptions: {},
        // Request method for prefetch request
        // @type {string}
        method: 'post',
        // Prefetch url, must be set to use prefetch
        // @type {null|string}
        url: null,
        // Response fields data property
        // @type {string}
        fields: 'fields',
        // Use flat fields data type
        // @type {boolean}
        flatFields: false,
        // Custom prefetch callback, replaces default request
        // @type {null|Function|prefetchCallback}
        prefetchCallback: null,
        // Custom response callback, runs in addition to fields set
        // @type {null|Function|responseCallback}
        responseCallback: null,
        // Refetch request on reset
        // @type {boolean}
        refetchOnReset: true,
        // Refetch request on soft reset
        // @type {boolean}
        refetchOnResetSoft: false,
        // Reload page on error
        // @type {boolean}
        reloadOnError: false,
        // Reload after delay
        // @type {number}
        reloadOnErrorDelay: 5000
      }
    };

    // Extend component states
    _this.extendStates = {
      loading: {
        classOn: 'ui-form--loading'
      },
      ready: {
        classOn: 'ui-form--ready',
        unsets: ['loading', 'sending', 'success', 'error', 'complete']
      },
      sending: {
        unsets: ['ready']
      },
      error: {
        unsets: ['loading']
      }
    };

    // Register events
    _this.registerEvents = [['initialized', function () {
      UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this, _event_initialized).call(_this);
    }], ['form.reset', function (event) {
      UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this, _event_reset).call(_this, event);
    }]];
    return _this;
  }
  UiFormPluginPrefetch_inherits(UiFormPluginPrefetch, _UiPlugin);
  return UiFormPluginPrefetch_createClass(UiFormPluginPrefetch, null, [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'prefetch';
    }
  }]);
}(UiPlugin)));
function _event_initialized() {
  this.context.states.set('loading');
  if (!UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, this, _prefetch).call(this)) {
    UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, this, _ready).call(this);
  }
}
/**
 * Reset event
 * @private
 * @param {Event} event - Reset event
 * @return {void}
 */
function _event_reset(event) {
  var options = this.context.config.get('prefetch');
  if (event.detail && (!event.detail.soft && options.refetchOnReset || event.detail.soft && options.refetchOnResetSoft)) {
    UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, this, _event_initialized).call(this);
  }
}
/**
 * Run prefetch
 * @private
 * @return {boolean} - True if running
 */
function _prefetch() {
  var _this2 = this;
  var options = this.context.config.get('prefetch');
  if (options !== null) {
    // Must be object
    if (!isPojo(options)) {
      throw new UiFormPluginPrefetchException('Invalid prefetch options, must be a string or a plain Object');
    }

    /**
     * Success callback
     * @return {void}
     */
    var success_callback = function success_callback() {
      UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this2, _ready).call(_this2);
    };

    /**
     * Error callback
     * @param {*} e - Error
     * @return {void}
     */
    var error_callback = function error_callback(e) {
      UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this2, _prefetch_error).call(_this2, e);
    };

    // Custom sync callback
    if (options.prefetchCallback) {
      try {
        options.prefetchCallback(success_callback, error_callback, this);
      } catch (e) {
        throw new UiFormPluginPrefetchException('Error while running prefetchCallback', e);
      }
      return true;
    } else if (options.url) {
      UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, this, _prefetch_request).call(this, options);
      return true;
    }
  }
  return false;
}
/**
 * Run async request
 * @private
 * @param {Object} settings - Plugin options
 * @return {void}
 */
function _prefetch_request(settings) {
  var _this3 = this;
  var options = cloneObject(this.context.config.exposed.prefetch.asyncOptions);
  mergeObject(options, settings, true);

  // Create request, set events and send
  UiFormPluginPrefetch_classPrivateFieldSet(UiFormPluginPrefetch_request, this, new AsyncRequest(options, null, this.debug));
  UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this).addEventList([['success', function (event) {
    UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this3, _prefetch_success).call(_this3, event);
  }], ['error', function (event) {
    UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this3, _prefetch_error).call(_this3, event);
  }], ['complete', function (event) {
    UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this3, _prefetch_complete).call(_this3, event);
  }]]);
  UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this).send();
}
/**
 * Request complete
 * @private
 * @return {void}
 */
function _prefetch_complete() {
  UiFormPluginPrefetch_classPrivateFieldSet(UiFormPluginPrefetch_request, this, null);
}
/**
 * Request success
 * @private
 * @param {Object|Event} event - Error details
 * @return {void}
 */
function _prefetch_success(event) {
  var _this4 = this;
  var options = this.context.config.get('prefetch');

  /**
   * Success callback
   * @return {void}
   */
  var success_callback = function success_callback() {
    _this4.context.dispatchEvent('form.prefetch.success', {
      request: UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, _this4),
      event: event,
      plugin: _this4
    });
    UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this4, _ready).call(_this4);
  };

  /**
   * Error callback
   * @param {*} e - Error
   * @return {void}
   */
  var error_callback = function error_callback(e) {
    UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, _this4, _prefetch_error).call(_this4, e || event);
  };

  // JSON response
  if (UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this).responseType === 'application/json' && isPojo(UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this).responseParsed)) {
    // Set any input fields available
    if (options.fields) {
      UiFormPluginPrefetch_assertClassBrand(_UiFormPluginPrefetch_brand, this, _set_values_from_fields).call(this, UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this).responseParsed, options);
    }
  } else if (this.debug) {
    // Notify unknown response
    this.debug.log(this.constructor.name + '::prefetch_success Not a JSON response', UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this));
  }

  // Run the response callback if available
  if (options.responseCallback) {
    options.responseCallback(success_callback, error_callback, UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this), event, this);
    return;
  }

  // No callback or plugins
  success_callback();
}
/**
 * Set values from fields
 * @private
 * @param {Object} data - Request data
 * @param {Object} options - Plugin options
 * @return {void}
 */
function _set_values_from_fields(data, options) {
  if (data[options.fields] && isPojo(data[options.fields])) {
    this.context.plugins.run('setValues', [data[options.fields], options.flatFields]);
  } else if (this.debug) {
    this.debug.warn(this.constructor.name + '::set_values_from_fields Found no fields to set');
  }
}
/**
 * Prefetch error
 * @private
 * @param {Object|Event} event - Error details
 * @return {void}
 */
function _prefetch_error(event) {
  this.context.dispatchEvent('form.prefetch.error', {
    error: event,
    request: UiFormPluginPrefetch_classPrivateFieldGet(UiFormPluginPrefetch_request, this),
    plugin: this
  });
  this.context.states.set('error');
  this.context.dispatchEvent('form.error', {
    event: event
  });

  // Reload page on error
  if (this.context.config.get('prefetch.reloadOnError')) {
    window.console.error(this.constructor.name + '::prefetch_error Reloading');
    window.setTimeout(function () {
      window.location.reload();
    }, this.context.config.get('prefetch.reloadOnErrorDelay'));
  }
}
/**
 * Set ready state
 * @private
 * @return {void}
 */
function _ready() {
  this.context.plugins.run('readyComponent');
  this.context.states.set('ready');
  this.context.dispatchEvent('form.ready');
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Plugins/UiFormPluginJSONResponse.js
function UiFormPluginJSONResponse_typeof(o) { "@babel/helpers - typeof"; return UiFormPluginJSONResponse_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormPluginJSONResponse_typeof(o); }
function UiFormPluginJSONResponse_classPrivateMethodInitSpec(obj, privateSet) { UiFormPluginJSONResponse_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiFormPluginJSONResponse_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiFormPluginJSONResponse_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiFormPluginJSONResponse_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormPluginJSONResponse_toPropertyKey(descriptor.key), descriptor); } }
function UiFormPluginJSONResponse_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormPluginJSONResponse_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormPluginJSONResponse_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormPluginJSONResponse_toPropertyKey(t) { var i = UiFormPluginJSONResponse_toPrimitive(t, "string"); return "symbol" == UiFormPluginJSONResponse_typeof(i) ? i : i + ""; }
function UiFormPluginJSONResponse_toPrimitive(t, r) { if ("object" != UiFormPluginJSONResponse_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormPluginJSONResponse_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormPluginJSONResponse_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormPluginJSONResponse_callSuper(t, o, e) { return o = UiFormPluginJSONResponse_getPrototypeOf(o), UiFormPluginJSONResponse_possibleConstructorReturn(t, UiFormPluginJSONResponse_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormPluginJSONResponse_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormPluginJSONResponse_possibleConstructorReturn(self, call) { if (call && (UiFormPluginJSONResponse_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormPluginJSONResponse_assertThisInitialized(self); }
function UiFormPluginJSONResponse_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormPluginJSONResponse_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormPluginJSONResponse_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormPluginJSONResponse_getPrototypeOf(o) { UiFormPluginJSONResponse_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormPluginJSONResponse_getPrototypeOf(o); }
function UiFormPluginJSONResponse_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormPluginJSONResponse_setPrototypeOf(subClass, superClass); }
function UiFormPluginJSONResponse_setPrototypeOf(o, p) { UiFormPluginJSONResponse_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormPluginJSONResponse_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui form plugin JSON response exception
 * @class
 * @extends Exception
 */
var UiFormPluginJSONResponseException = /*#__PURE__*/function (_Exception) {
  function UiFormPluginJSONResponseException() {
    UiFormPluginJSONResponse_classCallCheck(this, UiFormPluginJSONResponseException);
    return UiFormPluginJSONResponse_callSuper(this, UiFormPluginJSONResponseException, arguments);
  }
  UiFormPluginJSONResponse_inherits(UiFormPluginJSONResponseException, _Exception);
  return UiFormPluginJSONResponse_createClass(UiFormPluginJSONResponseException);
}(Exception);
/**
 * @typedef {Function} successCallback
 * @param {null|Object|AsyncRequest} request - Request object
 * @param {Object|UiFormPluginJSONResponse} plugin - Plugin object
 * @return {boolean} - Return true to prevent any further default actions
 */
/**
 * @typedef {Function} errorCallback
 * @param {null|Object|AsyncRequest} request - Request object
 * @param {Object|UiFormPluginJSONResponse} plugin - Plugin object
 * @return {boolean} - Return true to prevent any further default actions
 */
/**
 * Ui form plugin JSON response
 * @class
 * @extends UiPlugin
 */
var _UiFormPluginJSONResponse_brand = /*#__PURE__*/new WeakSet();
var UiFormPluginJSONResponse = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiFormComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiFormPluginJSONResponse(_options, context, debug) {
    var _this;
    UiFormPluginJSONResponse_classCallCheck(this, UiFormPluginJSONResponse);
    _this = UiFormPluginJSONResponse_callSuper(this, UiFormPluginJSONResponse, [_options, context, debug]);

    // Extend default config
    /**
     * Complete event
     * @private
     * @param {Event} event - Complete event
     * @return {void}
     */
    UiFormPluginJSONResponse_classPrivateMethodInitSpec(_this, _UiFormPluginJSONResponse_brand);
    _this.extendConfig = {
      response: {
        // Response data property to read redirect url from
        // @type {null|string}
        redirect: 'redirect',
        // Response data property to read errors object from
        // @type {null|string}
        errors: 'errors',
        // Response data property to read response message from
        // @type {null|string}
        message: 'message',
        // Field to use for global errors, defaults to fields.errors.global if not set
        // @type {null|string}
        output: null,
        // Custom success callback
        // @type {null|Function|successCallback}
        successCallback: null,
        // Custom error callback
        // @type {null|Function|errorCallback}
        errorCallback: null,
        // Error used when none is available from the response
        // @type {string|Array|Function}
        unknown: 'An unknown error occurred, please try again later.',
        // Errors by response 'c{status}'; takes precedence over the unknown option
        // @type {Object}
        errByCode: {}
      }
    };

    // Register events
    _this.registerEvents = [['complete', function (event) {
      UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, _this, UiFormPluginJSONResponse_event_complete).call(_this, event);
    }]];
    return _this;
  }
  UiFormPluginJSONResponse_inherits(UiFormPluginJSONResponse, _UiPlugin);
  return UiFormPluginJSONResponse_createClass(UiFormPluginJSONResponse, null, [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'response';
    }
  }]);
}(UiPlugin)));
function UiFormPluginJSONResponse_event_complete(event) {
  var request = event.detail.target;
  try {
    UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, this, _validateResponse).call(this, request);
    if (request.error) {
      UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, this, _responseError).call(this, request);
    } else {
      UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, this, _responseSuccess).call(this, request);
    }
  } catch (e) {
    if (this.debug) this.debug.error(this.constructor.name + '::event_complete', e);
    UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, this, _responseError).call(this);
  }
}
/**
 * Validate response
 * @private
 * @param {Object|AsyncRequest} request - AsyncRequest
 * @return {void}
 */
function _validateResponse(request) {
  // Ignore response type, allows parsing of any text as json
  if (this.context.config.get('response.ignoreResponseType')) {
    return;
  }

  // Check response format
  if (request.responseType !== 'application/json' || request.responseParsed === null || !isPojo(request.responseParsed)) {
    var message = 'Expected application/json but got an empty response or wrong type: ';
    throw new UiFormPluginJSONResponseException(message + request.responseType);
  }
}
/**
 * Redirect from data
 * @private
 * @param {null|Object} data - Response data
 * @return {void}
 */
function _redirect(data) {
  var prop = this.context.config.get('response.redirect');
  if (prop && data[prop]) {
    if (typeof data[prop] !== 'string' || !data[prop].length) {
      throw new UiFormPluginJSONResponseException('Response redirect must an url string');
    }
    window.location.href = data[prop];
  }
}
/**
 * Field errors
 * @private
 * @param {Object|AsyncRequest} response - AsyncRequest
 * @return {void}
 */
function UiFormPluginJSONResponse_errors(response) {
  var options = this.context.config.get('response');
  var data = response === null || response === void 0 ? void 0 : response.responseParsed;

  // Skip since errors are disabled
  if (!options.errors) return;

  // Invalid response object
  if (!isPojo(data)) data = {};

  // Info
  var has_prop = isPojo(data[options.errors]);
  var is_empty = !has_prop || !Object.keys(data[options.errors]).length;
  if (!has_prop) data[options.errors] = {};

  // No error infos available
  if (is_empty) {
    // Requires a fieldcontrol plugin
    if (!this.context.plugins.has('fieldcontrol')) {
      throw new UiFormPluginJSONResponseException('A fieldcontrol plugin is required for message or errors display');
    } else {
      var err;

      // Has response code specific error
      if (is_empty && response && typeof options.errByCode['c' + response.status] === 'string') {
        err = options.errByCode['c' + response.status];
        is_empty = false;
      }

      // Can show message
      if (options.message && data[options.message]) {
        err = data[options.message];
        is_empty = false;
      }

      // Can show unknown error, unless message was available
      if (is_empty && options.unknown) {
        err = options.unknown;
        is_empty = false;
      }

      // Process if not empty anymore
      if (!is_empty) {
        this.context.plugins.exec('fieldcontrol', 'setObjectFieldError', [data[options.errors], err, options.output, [data, this]]);
      }
    }
  }

  // Still empty?
  if (is_empty) {
    throw new UiFormPluginJSONResponseException('Invalid response errors, message property and unknown error option.');
  }

  // Send the errors to the display plugin/s
  this.context.plugins.run('showFieldsErrors', [data[options.errors], null, this]);
}
/**
 * Success response
 * @private
 * @param {Object|AsyncRequest} request - AsyncRequest
 * @return {void}
 */
function _responseSuccess(request) {
  var callback = this.context.config.get('response.successCallback');
  var resume = true;
  if (callback) resume = !callback(request, this);
  if (!resume) return;
  UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, this, _redirect).call(this, request.responseParsed);
}
/**
 * Error response
 * @private
 * @param {Object|AsyncRequest} request - AsyncRequest
 * @return {void}
 */
function _responseError() {
  var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var callback = this.context.config.get('response.errorCallback');
  var resume = true;
  if (callback) resume = !callback(request, this);
  if (!resume) return;
  if (request) UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, this, _redirect).call(this, request.responseParsed);
  UiFormPluginJSONResponse_assertClassBrand(_UiFormPluginJSONResponse_brand, this, UiFormPluginJSONResponse_errors).call(this, request);
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Plugins/UiFormPluginFieldControl.js
function UiFormPluginFieldControl_typeof(o) { "@babel/helpers - typeof"; return UiFormPluginFieldControl_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormPluginFieldControl_typeof(o); }
function UiFormPluginFieldControl_slicedToArray(arr, i) { return UiFormPluginFieldControl_arrayWithHoles(arr) || UiFormPluginFieldControl_iterableToArrayLimit(arr, i) || UiFormPluginFieldControl_unsupportedIterableToArray(arr, i) || UiFormPluginFieldControl_nonIterableRest(); }
function UiFormPluginFieldControl_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiFormPluginFieldControl_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function UiFormPluginFieldControl_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function UiFormPluginFieldControl_toConsumableArray(arr) { return UiFormPluginFieldControl_arrayWithoutHoles(arr) || UiFormPluginFieldControl_iterableToArray(arr) || UiFormPluginFieldControl_unsupportedIterableToArray(arr) || UiFormPluginFieldControl_nonIterableSpread(); }
function UiFormPluginFieldControl_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiFormPluginFieldControl_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiFormPluginFieldControl_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiFormPluginFieldControl_arrayLikeToArray(o, minLen); }
function UiFormPluginFieldControl_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function UiFormPluginFieldControl_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return UiFormPluginFieldControl_arrayLikeToArray(arr); }
function UiFormPluginFieldControl_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiFormPluginFieldControl_get() { if (typeof Reflect !== "undefined" && Reflect.get) { UiFormPluginFieldControl_get = Reflect.get.bind(); } else { UiFormPluginFieldControl_get = function _get(target, property, receiver) { var base = UiFormPluginFieldControl_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return UiFormPluginFieldControl_get.apply(this, arguments); }
function UiFormPluginFieldControl_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = UiFormPluginFieldControl_getPrototypeOf(object); if (object === null) break; } return object; }
function UiFormPluginFieldControl_classPrivateMethodInitSpec(obj, privateSet) { UiFormPluginFieldControl_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiFormPluginFieldControl_classPrivateFieldInitSpec(obj, privateMap, value) { UiFormPluginFieldControl_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiFormPluginFieldControl_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiFormPluginFieldControl_classPrivateFieldGet(s, a) { return s.get(UiFormPluginFieldControl_assertClassBrand(s, a)); }
function UiFormPluginFieldControl_classPrivateFieldSet(s, a, r) { return s.set(UiFormPluginFieldControl_assertClassBrand(s, a), r), r; }
function UiFormPluginFieldControl_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiFormPluginFieldControl_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormPluginFieldControl_toPropertyKey(descriptor.key), descriptor); } }
function UiFormPluginFieldControl_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormPluginFieldControl_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormPluginFieldControl_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormPluginFieldControl_toPropertyKey(t) { var i = UiFormPluginFieldControl_toPrimitive(t, "string"); return "symbol" == UiFormPluginFieldControl_typeof(i) ? i : i + ""; }
function UiFormPluginFieldControl_toPrimitive(t, r) { if ("object" != UiFormPluginFieldControl_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormPluginFieldControl_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormPluginFieldControl_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormPluginFieldControl_callSuper(t, o, e) { return o = UiFormPluginFieldControl_getPrototypeOf(o), UiFormPluginFieldControl_possibleConstructorReturn(t, UiFormPluginFieldControl_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormPluginFieldControl_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormPluginFieldControl_possibleConstructorReturn(self, call) { if (call && (UiFormPluginFieldControl_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormPluginFieldControl_assertThisInitialized(self); }
function UiFormPluginFieldControl_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormPluginFieldControl_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormPluginFieldControl_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormPluginFieldControl_getPrototypeOf(o) { UiFormPluginFieldControl_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormPluginFieldControl_getPrototypeOf(o); }
function UiFormPluginFieldControl_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormPluginFieldControl_setPrototypeOf(subClass, superClass); }
function UiFormPluginFieldControl_setPrototypeOf(o, p) { UiFormPluginFieldControl_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormPluginFieldControl_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui form plugin field control exception
 * @class
 * @extends Exception
 */
var UiFormPluginFieldControlException = /*#__PURE__*/function (_Exception) {
  function UiFormPluginFieldControlException() {
    UiFormPluginFieldControl_classCallCheck(this, UiFormPluginFieldControlException);
    return UiFormPluginFieldControl_callSuper(this, UiFormPluginFieldControlException, arguments);
  }
  UiFormPluginFieldControl_inherits(UiFormPluginFieldControlException, _Exception);
  return UiFormPluginFieldControl_createClass(UiFormPluginFieldControlException);
}(Exception);
/**
 * Ui form plugin field control
 * @class
 * @extends UiPlugin
 */
var UiFormPluginFieldControl_states = /*#__PURE__*/new WeakMap();
var _UiFormPluginFieldControl_brand = /*#__PURE__*/new WeakSet();
var UiFormPluginFieldControl = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiFormComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiFormPluginFieldControl(_options, _context, debug) {
    var _this;
    UiFormPluginFieldControl_classCallCheck(this, UiFormPluginFieldControl);
    _this = UiFormPluginFieldControl_callSuper(this, UiFormPluginFieldControl, [_options, _context, debug]);

    // Extend default config
    /**
     * Setup wrapper and handlers for disabled submit error support
     * @private
     * @return {void}
     */
    UiFormPluginFieldControl_classPrivateMethodInitSpec(_this, _UiFormPluginFieldControl_brand);
    /**
     * Element class states
     * @private
     * @property
     * @type {null|Object|ElementClassStates}
     */
    UiFormPluginFieldControl_classPrivateFieldInitSpec(_this, UiFormPluginFieldControl_states, null);
    _this.extendConfig = {
      fields: {
        // Validation options
        // @type {Object}
        validate: {
          // Skip validation code
          // @type {boolean}
          skip: true,
          // Pure HTML5 validation only, no plugins will run
          // @type {boolean}
          pureHtml5: false,
          // Error reporting level for each event
          // @type {Object}
          eventReporting: {
            blur: true,
            change: true
          }
        },
        // TODO: move (disableOn,enableOn) to component and move submit options to config root
        // Submit disabled control by event types
        // @type {Object}
        submit: {
          // Disable submit on events
          // @type {Array<string>}
          disableOn: ['form.loading', 'form.sending', 'form.success'],
          // Enable submit on events
          // @type {Array<string>}
          enableOn: ['default', 'form.reset'],
          // Show disabled error
          // @type {boolean}
          showDisabledError: true,
          // Field to use for the disabled error, defaults to fields.errors.global if not set
          // @type {null|string}
          output: null,
          // Error to show when clicking disabled submit
          // @type {string|Array|Function}
          disabledError: 'Form has errors or is already completed.',
          // Wraps the submit button to catch event when disabled
          // @type {string}
          disabledWrap: '<div data-ui-form-fields-submit-disabled />'
        },
        // Input/group state and error selectors
        // @type {Object}
        selectors: {
          input: {
            state: '.ui-input',
            error: '.ui-input__error'
          },
          group: {
            state: '.ui-input-group',
            error: '.ui-input-group__error'
          }
        },
        // Input states and relations
        // @†ype {Object}
        states: {
          'field.was.validated': {
            classOn: 'ui-input--was-validated'
          },
          'field.disabled': {
            classOn: 'ui-input--disabled'
          },
          'field.focus': {
            classOn: 'ui-input--focus',
            unsets: ['field.blur']
          },
          'field.blur': {
            classOn: 'ui-input--blur',
            unsets: ['field.focus']
          },
          'field.filled': {
            classOn: 'ui-input--filled',
            unsets: ['field.empty']
          },
          'field.empty': {
            classOn: 'ui-input--empty',
            unsets: ['field.filled']
          },
          'field.input': {
            classOn: 'ui-input--input',
            autoUnset: true
          },
          'field.change': {
            classOn: 'ui-input--change',
            autoUnset: true
          },
          'field.error': {
            classOn: 'ui-input--error'
          },
          'field.error.visible': {
            classOn: 'ui-input--error-visible'
          },
          'submit.disabled': {
            classOn: 'ui-button--disabled'
          },
          'group.disabled': {
            classOn: 'ui-input-group--disabled'
          },
          'group.error': {
            classOn: 'ui-input-group--error'
          },
          'group.error.visible': {
            classOn: 'ui-input-group--error-visible'
          }
        },
        // TODO: Check since option does not seem respected in every case, make array of state names
        // Use values states, filled, empty, input and change
        // @type {boolean}
        valueStates: true,
        // Input events to bind
        // @type {Array<string>}
        bindEvents: ['focus', 'blur', 'input', 'change'],
        // Event binding rules
        // @type {Object}
        eventRules: {
          initialized: '*',
          ready: '*',
          focus: '*',
          blur: '*',
          input: ['textarea-textarea', 'input-password', 'input-search', 'input-number', 'input-text', 'input-email', 'input-tel', 'input-url', 'input-range', 'input-color'],
          change: ['select-select-one', 'select-select-multiple', 'input-checkbox', 'input-file', 'input-radio', 'input-range', 'input-date', 'input-color', 'input-time']
        },
        // Error handling
        // @type {Object}
        errors: {
          // Field to use for global errors
          // @type {string}
          global: 'general',
          // Map unknown field errors to global field
          // @type {string}
          mapUnknown2Global: true,
          // Only set error state
          // @type {boolean}
          onlyState: false,
          // Prefer group error instead of input error
          // @type {boolean}
          preferGroupOutput: true,
          // For grouped/array inputs show error on position input only
          // @type {null|number|'first'|'last'}
          showOnPositionOnly: null,
          // Render only first field error
          // @type {boolean}
          renderOnlyFirst: false,
          // String to use for joining errors on render
          // @type {string}
          renderJoinString: ', ',
          // Error render custom callback
          // @type {Function}
          renderCallback: null,
          // Clear field error on event
          // @type {Object}
          clearOnEvents: {
            state: ['focus'],
            error: ['blur', 'change']
          },
          // TODO: Prevent clear if not sendable/locked/completed?

          // Clear errors on form reset
          // @type {boolean}
          clearOnReset: true,
          // Clear errors on soft reset
          // @type {boolean}
          clearOnResetSoft: false,
          // Field map or callback for mapping
          // @type {null|Object|Function}
          mapFields: null,
          // Replace existing errors by remapped errors
          // @type {boolean}
          replaceMapped: false,
          // Remove old fields of remapped error fields
          // @type {boolean}
          removeMapped: false,
          // Attribute name for field individual error selector
          // @†ype {string}
          attrErrorSelector: 'data-ui-form-input-error-selector',
          // Scroll to first error with scrollIntoView or custom callback
          // @type {boolean|Function}
          scrollToFirst: true
        }
      },
      // Dom references
      // @type {Object}
      dom: {
        // Input fields selector
        // @type {string}
        fields: 'input, select, textarea',
        // Disabled submit wrapper selector
        // @type {string}
        disabledSubmit: '[data-ui-form-fields-submit-disabled]'
      }
    };
    return _this;
  }

  /**
   * Init component
   *  Is run during construction, some things might not be available yet
   * @public
   * @param {Object|UiFormComponent} context - Plugin context
   * @return {void}
   */
  UiFormPluginFieldControl_inherits(UiFormPluginFieldControl, _UiPlugin);
  return UiFormPluginFieldControl_createClass(UiFormPluginFieldControl, [{
    key: "initComponent",
    value: function initComponent(context) {
      var _this2 = this;
      // Event prefix
      var prefix = this.context.config.get('eventPrefix') || '';

      // Register events
      //  Must be defined here since the defaultEvent might be modified during init by other plugins
      this.registerEvents = [[this.context.config.exposed.defaultEvent, function (event) {
        UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this2, UiFormPluginFieldControl_event_default).call(_this2, event);
      }], [prefix + 'sending', function (event) {
        UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this2, _event_sending).call(_this2, event);
      }], ['submit', function (event) {
        UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this2, _submit_disabled_state).call(_this2, event);
      }], [prefix + 'error', function (event) {
        UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this2, _submit_disabled_state).call(_this2, event);
      }], [prefix + 'complete', function (event) {
        UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this2, _submit_disabled_state).call(_this2, event);
      }], [prefix + 'reset', function (event) {
        UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this2, UiFormPluginFieldControl_event_reset).call(_this2, event);
      }]];

      // Bind form element events
      UiFormPluginFieldControl_get(UiFormPluginFieldControl_getPrototypeOf(UiFormPluginFieldControl.prototype), "initComponent", this).call(this, context);

      // Prepare class states handler
      UiFormPluginFieldControl_classPrivateFieldSet(UiFormPluginFieldControl_states, this, new ElementClassStates(this.context.config.get('fields.states')));

      // Bind form input element events
      UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _bind_inputs).call(this, context);

      // Setup submit disabled error support
      UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _setup_submit_disable_support).call(this);
    }
  }, {
    key: "setObjectFieldError",
    value:
    /**
     * Set field error on object
     * @param {Object} errors - Errors object target
     * @param {string|Array|Function} error - Error value
     * @param {null|string} field - Optional error field property name, default: config.fields.errors.global
     * @param {Array} params - Optional value function arguments
     * @return {void}
     */
    function setObjectFieldError(errors, error) {
      var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
      if (!isPojo(errors)) {
        throw new UiFormPluginFieldControlException('Argument errors must be a plain object reference');
      }

      /**
       * Every check callback
       * @param {*} v - Value to check
       * @return {boolean} - True if valid
       */
      var all_strings = function all_strings(v) {
        return typeof v === 'string' && v.length;
      };

      // Get default field if not set
      if (!field || !field.length) field = this.context.config.get('fields.errors.global');

      // Process value
      if (typeof error === 'function') {
        error = error.apply(void 0, UiFormPluginFieldControl_toConsumableArray(params).concat([this.context]));
      }

      // Validate error value
      if (!(typeof error === 'string' && error.length || error instanceof Array && error.every(all_strings))) {
        throw new UiFormPluginFieldControlException('Argument value must be a non empty String, Array or Function');
      }

      // Should be an array
      if (!(errors[field] instanceof Array)) {
        errors[field] = errors[field] ? [errors[field]] : [];
      }

      // Join or append value
      if (error instanceof Array) {
        errors[field] = errors[field].concat(error);
      } else {
        errors[field].push(error);
      }
    }

    /**
     * Field clear error on event
     * @private
     * @param {Event} event - Input event
     * @param {HTMLElement} element - Input element
     * @return {void}
     */
  }, {
    key: "fieldSetState",
    value:
    /**
     * Set field state
     * @public
     * @param {HTMLElement} element - Input element
     * @param {string} state - Field state name
     * @return {HTMLElement} - State host
     */
    function fieldSetState(element, state) {
      return UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _field_state).call(this, element, state);
    }

    /**
     * Unset field state
     * @public
     * @param {HTMLElement} element - Input element
     * @param {string} state - Field state name
     * @return {HTMLElement} - State host
     */
  }, {
    key: "fieldUnsetState",
    value: function fieldUnsetState(element, state) {
      return UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _field_state).call(this, element, state, 'unset');
    }

    /**
     * Field is state
     * @public
     * @param {HTMLElement} element - Input element
     * @param {string} state - Field state name only
     * @return {null|boolean} - Null if state does not exist
     */
  }, {
    key: "fieldIsState",
    value: function fieldIsState(element, state) {
      var host = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, element, 'input');
      var state_name = 'field.' + state;
      if (UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).has(state_name)) return UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).is(state_name, host);
      return null;
    }

    /**
     * Run field validation
     * @private
     * @param {Event} event - Input event
     * @param {HTMLElement} element - Input element
     * @return {void}
     */
  }, {
    key: "fieldIsValid",
    value:
    /**
     * Field is valid
     * @public
     * @param {HTMLElement} field - Input element
     * @param {undefined|null|'state'|'error'|boolean} report - Report level
     * @return {boolean} - True if field is valid
     */
    function fieldIsValid(field, report) {
      var options = this.context.config.get('fields.validate');

      // Skip validation
      if (options.skip) return true;

      // Pure html5 validation
      if (options.pureHtml5) {
        // Check if we have just validated
        var host = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, field);
        var state = 'field.was.validated';

        // Prevent reporting if we are revalidating,
        // this prevents an unwanted focus loop on the input if it is invalid
        if (UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).is(state, host)) {
          report = false;
          UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).unset(state, host);
        } else {
          UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).set(state, host);
        }

        // Validate with default html5
        var check = report ? 'reportValidity' : 'checkValidity';
        if (!field[check]()) {
          if (this.debug) this.debug.log(this.constructor.name + '::fieldIsValid Field data invalid using:', check);
          return false;
        }
        return true;
      }

      // Plugin validation
      var results = this.context.plugins.run('validateField', [field, report]);
      var is_valid = true;
      var reasons = [];
      var entries = Object.entries(results);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i = UiFormPluginFieldControl_slicedToArray(entries[i], 2),
          plugin = _entries$i[0],
          result = _entries$i[1];
        if (result === false) {
          is_valid = false;
          reasons.push(plugin);
        }
      }

      // Notify reasons
      if (this.debug && !is_valid) {
        this.debug.log(this.constructor.name + '::fieldIsValid Field invalid, reasons:', reasons);
      }
      return is_valid;
    }

    /**
     * Set value type by event type
     * @private
     * @param {Event} event - Event
     * @param {HTMLElement} input - Input element
     * @param {HTMLElement} host - State host element
     * @return {void}
     */
  }, {
    key: "submitDisable",
    value:
    /**
     * Set submit disabled
     * @public
     * @param {boolean} state - False to enable all submits
     * @param {null|Array} only - Only change given submits
     * @return {void}
     */
    function submitDisable() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var only = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      if (this.debug) this.debug.log(this.constructor.name + '::submitDisable', state ? 'Disabled' : 'Enabled');
      var fake = this.context.getDomRefs('fake', false);
      var refs = this.context.getDomRefs('submit');
      for (var i = 0; i < refs.length; i++) {
        if (refs[i] !== fake && (!only || only.includes(refs[i]))) {
          refs[i].disabled = state;
          if (UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).has('submit.disabled')) {
            UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this)[state ? 'set' : 'unset']('submit.disabled', refs[i]);
          }
        }
      }
    }

    /**
     * Loop over form inputs
     * @private
     * @param {Array|NodeList|Object|UiFormPluginFieldControl} context - PLugin object or list of inputs
     * @param {Function} callback - Element callback
     * @param {boolean} hidden - Use hidden fields, default: false
     * @return {void}
     */
  }, {
    key: "clearAllFieldsErrors",
    value:
    /**
     * Clear fields errors
     * @public
     * @param {boolean} error - Clear error state
     * @param {boolean} visibility - Clear error
     * @param {null|Array} only - Limit to given input names
     * @return {void}
     */
    function clearAllFieldsErrors() {
      var _this3 = this;
      var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var visibility = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var only = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (!error && !visibility) return;
      UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _loop_inputs).call(this, this.context, function (element) {
        if (!only || !only.length || only.includes(element.name)) {
          _this3.clearFieldErrors(element, error, visibility);
        }
      }, true);
    }

    /**
     * Clear field errors
     * @public
     * @param {HTMLElement} input - Input element
     * @param {boolean} error - Clear error state
     * @param {boolean} visibility - Clear error
     * @return {void}
     */
  }, {
    key: "clearFieldErrors",
    value: function clearFieldErrors(input) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var visibility = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      if (!error && !visibility) return;
      var host = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input);
      var group = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input, 'group');
      if (group === input) group = null;
      if (host) {
        if (error) {
          UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).unset('field.error', host);
          if (group) UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).unset('group.error', group);
        }
        if (visibility) {
          UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).unset('field.error.visible', host);
          if (group) UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).unset('group.error.visible', group);
          var host_output = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input, 'input', 'error');
          var group_output = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input, 'group', 'error');
          if (host_output) host_output.innerHTML = '';
          if (group && group_output) group_output.innerHTML = '';
          if (!host_output && !group_output && this.debug) {
            this.debug.warn(this.constructor.name + '::clearFieldErrors Could not find error output for:', input);
          }
        }
      } else if (this.debug) {
        this.debug.error(this.constructor.name + '::clearFieldErrors Could not find state host for', input);
      }
    }

    /**
     * Remap errors object
     * @public
     * @param {Object} errors - Errors object
     * @param {Object} options - Field control options
     * @return {void}
     */
  }, {
    key: "remapFieldsErrors",
    value: function remapFieldsErrors(errors, options) {
      UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _validate_errors).call(this, errors);
      if (options.mapFields) {
        // Callback overrides regular mapping
        if (typeof options.mapFields === 'function') {
          options.mapFields(errors, options, this);
          return;
        }

        // Rewrite with a from->to map
        var map = Object.entries(options.mapFields);
        for (var i = 0; i < map.length; i++) {
          var _map$i = UiFormPluginFieldControl_slicedToArray(map[i], 2),
            from = _map$i[0],
            to = _map$i[1];
          if (errors[from]) {
            // Append errors to existing
            if (!options.replaceMapped && errors[to]) {
              errors[to] = errors[to].concat(errors[from]);
            } else {
              // Set remapped error
              errors[to] = errors[from];
            }

            // Remove old field
            if (options.removeMapped) {
              delete errors[from];
            }
          }
        }
      }
    }

    /**
     * Show fields errors
     * @public
     * @param {Object} errors - Errors object
     * @param {null|boolean} onlyState - Only set state
     * @return {void}
     */
  }, {
    key: "showFieldsErrors",
    value: function showFieldsErrors(errors) {
      var onlyState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _validate_errors).call(this, errors);
      var options = this.context.config.get('fields.errors');
      if (onlyState === null) {
        onlyState = options.onlyState;
      } else if (typeof onlyState !== 'boolean') {
        onlyState = false;
      }

      // Map errors
      this.remapFieldsErrors(errors, options);

      // Cycle and render errors
      var entries = Object.entries(errors);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i2 = UiFormPluginFieldControl_slicedToArray(entries[i], 2),
          key = _entries$i2[0],
          value = _entries$i2[1];
        this.showFieldErrors(key, value, onlyState);
      }

      // Scroll to first error
      UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _scroll_to_first_error).call(this, options);
    }

    /**
     * Scroll to first natural error
     * @private
     * @param {Object} options - Fields error options
     * @return {void}
     */
  }, {
    key: "fieldHasErrors",
    value:
    /**
     * Field has errors check
     * @public
     * @param {string} field - Field name
     * @return {boolean} - True if input or group have errors
     */
    function fieldHasErrors(field) {
      // Get field inputs
      var inputs = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_field_inputs).call(this, field);

      // Notify not found
      if (!inputs || !inputs.length) {
        throw new UiFormPluginFieldControlException('No inputs found for field:' + field);
      }

      // Get errors for inputs
      for (var i = 0; i < inputs.length; i++) {
        var input = inputs[i];
        var host = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input);
        var group = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input, 'group');
        if (group === input) group = null;
        if (host) {
          if (UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).is('field.error', host)) return true;
          if (group && UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).is('group.error', group)) return true;
        } else if (this.debug) {
          this.debug.error(this.constructor.name + '::fieldHasErrors Could not find state host for', input);
        }
      }
      return false;
    }

    /**
     * Show field errors
     * @public
     * @param {string} field - Field name
     * @param {string|Array<string>} errors - Errors object
     * @param {null|boolean} onlyState - Only set state
     * @return {void}
     */
  }, {
    key: "showFieldErrors",
    value: function showFieldErrors(field, errors) {
      var onlyState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      if (typeof field !== 'string' || !field.length) {
        throw new UiFormPluginFieldControlException('Argument field must be a non empty string');
      }

      // Enforce errors as Array
      if (!(errors instanceof Array)) errors = [errors];

      // Only state option
      var options = this.context.config.get('fields.errors');
      if (onlyState === null) {
        onlyState = options.onlyState;
      } else if (typeof onlyState !== 'boolean') {
        onlyState = false;
      }

      // Get field inputs
      var inputs = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_field_inputs).call(this, field);

      // Notify not found
      if (!inputs || !inputs.length) {
        if (options.mapUnknown2Global) {
          inputs = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_field_inputs).call(this, options.global);
          if (this.debug) this.debug.warn(this.constructor.name + '::showFieldErrors Unknown field mapped to global:', field);
        }
        if (!inputs || !inputs.length) {
          if (this.debug) this.debug.error(this.constructor.name + '::showFieldErrors No inputs found for field:', field);
          return;
        }
      }

      // Get show position option
      var show_pos = options.showOnPositionOnly;
      var named_pos = {
        first: 1,
        last: inputs.length
      };
      switch (UiFormPluginFieldControl_typeof(show_pos)) {
        case 'string':
          show_pos = named_pos[show_pos] ? named_pos[show_pos] : null;
          break;
        case 'number':
          if (show_pos > named_pos.last) {
            show_pos = named_pos.last;
          } else if (show_pos < 1) {
            show_pos = 1;
          }
          break;
        default:
          show_pos = 0;
      }

      // Set errors for inputs
      for (var i = 0; i < inputs.length; i++) {
        var input = inputs[i];
        var host = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input);
        var group = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input, 'group');
        if (group === input) group = null;
        if (host) {
          UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).set('field.error', host);
          if (group) UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).set('group.error', group);
          if (!onlyState) {
            if (!show_pos || i === show_pos - 1) {
              var host_output = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input, 'input', 'error');
              var group_output = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, input, 'group', 'error');
              if (options.preferGroupOutput && group && group_output) {
                if (!UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _render_errors).call(this, errors, group_output, options)) {
                  UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).set('group.error.visible', group);
                }
              } else if (host_output) {
                if (!UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _render_errors).call(this, errors, host_output, options)) {
                  UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).set('field.error.visible', host);
                }
              } else if (this.debug) {
                this.debug.error(this.constructor.name + '::showFieldErrors Could not find error output for:', input);
              }
              if (show_pos) break;
            } else if (this.debug) {
              this.debug.warn(this.constructor.name + '::showFieldErrors Skipped ' + (i + 1) + '/' + show_pos + ':', input);
            }
          } else if (this.debug) {
            this.debug.warn(this.constructor.name + '::showFieldErrors Only state for:', input);
          }
        } else if (this.debug) {
          this.debug.error(this.constructor.name + '::showFieldErrors Could not find state host for:', input);
        }

        // Dispatch as field event
        this.context.dispatchEvent('field.error', {
          input: input,
          host: host,
          group: group,
          field: field,
          errors: errors
        });
      }
    }

    /**
     * Render field errors
     * @private
     * @param {Object} errors - Errors object
     * @param {HTMLElement} output - Output element
     * @param {Object} options - Field control options
     * @return {boolean} - True if error visible state should not be added
     */
  }], [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @public
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'fieldcontrol';
    }
  }]);
}(UiPlugin)));
function _setup_submit_disable_support() {
  var _this4 = this;
  var options = this.context.config.get('fields.submit');

  // Wrap submits if showDisabledError is active
  if (options.showDisabledError) {
    var fake = this.context.getDomRefs('fake', false);
    var refs = this.context.getDomRefs('submit');
    for (var i = 0; i < refs.length; i++) {
      if (refs[i] !== fake) {
        // Wrap submit
        var wrapper = str2node(options.disabledWrap, false);
        wrap(refs[i], wrapper);

        // Bind event
        wrapper.addEventListener('click', function (event) {
          UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this4, _event_clickDisabled).call(_this4, event);
        });
      }
    }
  }
}
/**
 * Default event
 * @private
 * @param {Event} event - Default initialized|ready event
 * @return {void}
 */
function UiFormPluginFieldControl_event_default(event) {
  if (event.detail.target !== this.context) return;
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _submit_disabled_state).call(this, event);
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _set_fields_initial_state).call(this, event);
}
/**
 * Sending event
 * @private
 * @param {Event} event - Sending event
 * @return {void}
 */
function _event_sending(event) {
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _submit_disabled_state).call(this, event);
  this.clearAllFieldsErrors();
}
/**
 * Reset event
 * @private
 * @param {Event} event - Reset event
 * @return {void}
 */
function UiFormPluginFieldControl_event_reset(event) {
  var options = this.context.config.get('fields.errors');
  if (event.detail && (!event.detail.soft && options.clearOnReset || event.detail.soft && options.clearOnResetSoft)) {
    this.clearAllFieldsErrors();
  }
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _submit_disabled_state).call(this, event);
}
/**
 * Input events
 * @private
 * @param {Event} event - Input events
 * @param {HTMLElement} element - Input element
 * @return {void}
 */
function _event_input(event, element) {
  var host = this.fieldSetState(element, event.type);
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _field_value_state).call(this, event, element, host);
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _field_clear_error).call(this, event, element);
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _field_validation).call(this, event, element);
  if (this.debug) this.debug.log(this.constructor.name + '::event_input', event.type, element, host);
}
/**
 * Submit disabled event
 * @private
 * @param {Event} event - Click event
 * @return {void}
 */
function _event_clickDisabled(event) {
  if (event.currentTarget && event.currentTarget.firstElementChild.disabled) {
    var options = this.context.config.get('fields.submit');
    var errors = {};
    this.setObjectFieldError(errors, options.disabledError, options.output, [event, this]);
    this.context.plugins.run('showFieldsErrors', [errors, null, this]);
  }
}
function _field_clear_error(event, element) {
  var _this5 = this;
  var events = this.context.config.get('fields.errors.clearOnEvents');
  if (events) {
    var error = events.state && events.state.includes(event.type);
    var visibility = events.error && events.error.includes(event.type);
    if (error || visibility) {
      var inputs = [element];
      var group = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, element, 'group');
      if (group && group !== element) {
        inputs = group.querySelectorAll(this.context.config.get('dom.fields'));
      }
      UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _loop_inputs).call(this, inputs, function (input) {
        _this5.clearFieldErrors(input, error, visibility);
      }, true);
    }
  }
}
/**
 * Field state method
 * @private
 * @param {HTMLElement} element - Input element
 * @param {string} state - Field state name
 * @param {string} method - State method
 * @return {HTMLElement} - State host
 */
function _field_state(element, state) {
  var method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'set';
  var host = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, element, 'input');
  var state_name = 'field.' + state;
  if (UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).has(state_name)) UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this)[method](state_name, host);
  return host;
}
function _field_validation(event, element) {
  var options = this.context.config.get('fields.validate');

  // Skip validation
  if (options.skip) return;

  // Check for validation events
  var events = Object.keys(options.eventReporting);
  if (events.includes(event.type)) {
    if (this.fieldIsValid(element, options.eventReporting[event.type])) {
      this.clearFieldErrors(element);
    }
  }
}
function _field_value_state(event, input, host) {
  var options = this.context.config.get('fields');
  if (options.valueStates && options.eventRules[event.type]) {
    var elements = options.eventRules[event.type];
    if (this.context.plugins.has('values')) {
      var plugin = this.context.plugins.get('values');
      var type = getElementTagType(input);
      if (elements === '*' || elements.includes(type)) {
        var method = 'get_' + input.tagName.toLowerCase() + '_value';
        var value = plugin.values[method](input);
        UiFormPluginFieldControl_classPrivateFieldGet(UiFormPluginFieldControl_states, this).set(isEmpty(value) ? 'field.empty' : 'field.filled', host);
      }
    } else if (this.debug) {
      this.debug.warn(this.constructor.name + '::field_value_state No values plugin available');
    }
  } else if (options.valueStates && this.debug) {
    this.debug.warn(this.constructor.name + '::field_value_state Unknown event type:', event);
  }
}
/**
 * Set submit disabled state by event type
 * @private
 * @param {Event} event - Event
 * @return {void}
 */
function _submit_disabled_state(event) {
  var options = this.context.config.get('fields.submit');
  if (options && options.disableOn instanceof Array && options.enableOn instanceof Array) {
    var type = event.type === this.context.config.exposed.defaultEvent ? 'default' : event.type;
    if (options.disableOn.includes(type)) {
      this.submitDisable();
    } else if (options.enableOn.includes(type)) {
      this.submitDisable(false);
    }
  }
}
/**
 * Set field initial state
 * @private
 * @param {Event} event - Event object
 * @return {void}
 */
function _set_fields_initial_state(event) {
  var _this6 = this;
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _loop_inputs).call(this, this.context, function (element) {
    // Set value state
    UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this6, _event_input).call(_this6, event, element);
  });
}
/**
 * Get event host
 * @private
 * @param {HTMLElement} element - Input element
 * @param {('input'|'group')} type - Host type
 * @param {('state'|'error')} which - Target type
 * @return {HTMLElement} - Selected host element
 */
function _get_host(element) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'input';
  var which = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'state';
  var selector = this.context.config.exposed.fields.selectors[type];

  // Given selector exists with at least a state
  if (selector && selector.state) {
    var host = element.closest(selector.state);

    // Only if we have a host
    if (host) {
      if (which === 'state') {
        return host;
      } else {
        // Get relation element
        var nested = host.querySelector(selector[which]);
        if (nested) return nested;
      }
    }
  }

  // If error selector but with an individual selector from element
  if (which === 'error') {
    var attr = element.getAttribute(this.context.config.exposed.fields.errors.attrErrorSelector);
    if (attr && attr.length) {
      var form = this.context.dom.querySelector(attr);
      if (form) return form;
      var doc = document.querySelector(attr);
      if (doc) return doc;
    }
    return null;
  }
  return element;
}
/**
 * Bind form input events
 * @private
 * @param {Object|UiFormPluginFieldControl} context - Plugin object
 * @return {void}
 */
function _bind_inputs(context) {
  var _this7 = this;
  var options = this.context.config.get('fields');
  UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _loop_inputs).call(this, context, function (element) {
    // Cycle all event types
    for (var j = 0; j < options.bindEvents.length; j++) {
      var eventName = options.bindEvents[j];
      if (options.eventRules[eventName]) {
        var matches = options.eventRules[eventName];
        var type = getElementTagType(element);
        if (matches === '*' || matches.includes(type)) {
          element.addEventListener(eventName, function (event) {
            UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, _this7, _event_input).call(_this7, event, element);
          });
        }
      }
    }
  });
}
function _loop_inputs(context, callback) {
  var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var elements = context.getDomRefs ? context.getDomRefs('fields') : context;
  if (elements && elements.length) {
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];

      // Skip all hidden elements
      if (!hidden && element.type && element.type === 'hidden') {
        continue;
      }
      try {
        callback(element);
      } catch (e) {
        throw new UiFormPluginFieldControlException('Loop inputs broke, argument callback caused an error', e);
      }
    }
  }
}
/**
 * Validate errors object
 * @private
 * @param {Object} errors - Errors object
 * @return {void}
 */
function _validate_errors(errors) {
  if (!isPojo(errors)) {
    throw new UiFormPluginFieldControlException('Argument errors must be a plain Object');
  }
}
function _scroll_to_first_error(options) {
  if (options.scrollToFirst) {
    if (!(options.scrollToFirst === true || typeof options.scrollToFirst === 'function')) {
      throw new UiFormPluginFieldControlException('Config option scrollToFirst must be falsy, true or a Function');
    }

    // Find first field in natural order with an error
    var target;
    var inputs = this.context.getDomRefs('fields');
    for (var i = 0; i < inputs.length; i++) {
      if (this.fieldHasErrors(inputs[i].name)) {
        target = UiFormPluginFieldControl_assertClassBrand(_UiFormPluginFieldControl_brand, this, _get_host).call(this, inputs[i]);
        break;
      }
    }

    // If we have a target select the scroll method
    if (target) {
      if (this.debug) this.debug.log(this.constructor.name + '::scroll_to_first_error Scrolling to:', target);
      if (options.scrollToFirst === true) {
        target.scrollIntoView();
      } else {
        options.scrollToFirst(target);
      }
    } else if (this.debug) {
      this.debug.warn(this.constructor.name + '::scroll_to_first_error No field with errors found');
    }
  }
}
/**
 * Get field related inputs
 * @private
 * @param {string} field - Field name
 * @return {NodeList|Array} - Field related input elements
 */
function _get_field_inputs(field) {
  var inputs;
  if (this.context.plugins.has('values') && field.includes('.')) {
    inputs = this.context.plugins.exec('values', 'getInputs', [field]);
  } else {
    inputs = this.context.dom.querySelectorAll('[name="' + field + '"]');

    // Fallback mainly for multiple selects/file inputs
    if (!inputs.length) {
      inputs = this.context.dom.querySelectorAll('[name="' + field + '[]"]');
    }
  }
  return inputs;
}
function _render_errors(errors, output, options) {
  var not_allowed = ['img', 'link', 'input', 'textarea', 'select', 'button', 'br'];
  if (!(output instanceof HTMLElement) || not_allowed.includes(output.tagName.toLowerCase())) {
    if (this.debug) this.debug.error(this.constructor.name + '::render_errors Invalid error render output:', output);
    return;
  }
  var no_show_state = false;
  if (options.renderCallback) {
    no_show_state = options.renderCallback(errors, output, options, this);
  } else if (errors instanceof Array) {
    if (options.renderOnlyFirst) {
      errors = errors.shift();
    } else {
      errors = UiFormPluginFieldControl_toConsumableArray(new Set(errors)).join(options.renderJoinString);
    }
    no_show_state = !(errors && errors.length);
    output.innerHTML = errors;
  } else {
    throw new UiFormPluginFieldControlException('Argument errors must always be an Array');
  }
  return no_show_state;
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Plugins/UiFormPluginValidate.js
function UiFormPluginValidate_typeof(o) { "@babel/helpers - typeof"; return UiFormPluginValidate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormPluginValidate_typeof(o); }
function UiFormPluginValidate_get() { if (typeof Reflect !== "undefined" && Reflect.get) { UiFormPluginValidate_get = Reflect.get.bind(); } else { UiFormPluginValidate_get = function _get(target, property, receiver) { var base = UiFormPluginValidate_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return UiFormPluginValidate_get.apply(this, arguments); }
function UiFormPluginValidate_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = UiFormPluginValidate_getPrototypeOf(object); if (object === null) break; } return object; }
function UiFormPluginValidate_classPrivateMethodInitSpec(obj, privateSet) { UiFormPluginValidate_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiFormPluginValidate_classPrivateFieldInitSpec(obj, privateMap, value) { UiFormPluginValidate_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiFormPluginValidate_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiFormPluginValidate_classPrivateFieldGet(s, a) { return s.get(UiFormPluginValidate_assertClassBrand(s, a)); }
function UiFormPluginValidate_classPrivateFieldSet(s, a, r) { return s.set(UiFormPluginValidate_assertClassBrand(s, a), r), r; }
function UiFormPluginValidate_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiFormPluginValidate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormPluginValidate_toPropertyKey(descriptor.key), descriptor); } }
function UiFormPluginValidate_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormPluginValidate_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormPluginValidate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormPluginValidate_toPropertyKey(t) { var i = UiFormPluginValidate_toPrimitive(t, "string"); return "symbol" == UiFormPluginValidate_typeof(i) ? i : i + ""; }
function UiFormPluginValidate_toPrimitive(t, r) { if ("object" != UiFormPluginValidate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormPluginValidate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormPluginValidate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormPluginValidate_callSuper(t, o, e) { return o = UiFormPluginValidate_getPrototypeOf(o), UiFormPluginValidate_possibleConstructorReturn(t, UiFormPluginValidate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormPluginValidate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormPluginValidate_possibleConstructorReturn(self, call) { if (call && (UiFormPluginValidate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormPluginValidate_assertThisInitialized(self); }
function UiFormPluginValidate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormPluginValidate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormPluginValidate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormPluginValidate_getPrototypeOf(o) { UiFormPluginValidate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormPluginValidate_getPrototypeOf(o); }
function UiFormPluginValidate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormPluginValidate_setPrototypeOf(subClass, superClass); }
function UiFormPluginValidate_setPrototypeOf(o, p) { UiFormPluginValidate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormPluginValidate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui form plugin validate exception
 * @class
 * @extends Exception
 */
var UiFormPluginValidateException = /*#__PURE__*/function (_Exception) {
  function UiFormPluginValidateException() {
    UiFormPluginValidate_classCallCheck(this, UiFormPluginValidateException);
    return UiFormPluginValidate_callSuper(this, UiFormPluginValidateException, arguments);
  }
  UiFormPluginValidate_inherits(UiFormPluginValidateException, _Exception);
  return UiFormPluginValidate_createClass(UiFormPluginValidateException);
}(Exception);
/**
 * Ui form plugin validate
 * @class
 * @extends UiPlugin
 */
var _validator = /*#__PURE__*/new WeakMap();
var _UiFormPluginValidate_brand = /*#__PURE__*/new WeakSet();
var UiFormPluginValidate = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiFormComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiFormPluginValidate(_options, context, debug) {
    var _this;
    UiFormPluginValidate_classCallCheck(this, UiFormPluginValidate);
    _this = UiFormPluginValidate_callSuper(this, UiFormPluginValidate, [_options, context, debug]);

    // Extend default config
    /**
     * Reset event
     * @private
     * @param {Event} event - Reset event
     * @return {void}
     */
    UiFormPluginValidate_classPrivateMethodInitSpec(_this, _UiFormPluginValidate_brand);
    /**
     * Validator instance
     * @private
     * @property
     * @type {null|Object}
     */
    UiFormPluginValidate_classPrivateFieldInitSpec(_this, _validator, null);
    _this.extendConfig = {
      // Skip validation code, changes the default to: false
      // @type {boolean}
      skipValidate: false,
      // Extend validation options
      // @type {Object}
      validate: {
        // Only do states, do not run plugin showFieldsErrors or showFieldErrors
        // @type {boolean}
        onlyState: false,
        // Clear states on form reset
        // @type {boolean}
        clearOnReset: true,
        // Clear states on soft reset
        // @type {boolean}
        clearOnResetSoft: false,
        // Validator factory function
        // @type {Function}
        validator: null
      },
      // Extend fields
      // @type {Object}
      fields: {
        // Input states and relations
        // @†ype {Object}
        states: {
          'field.valid': {
            classOn: 'ui-input--valid',
            unsets: ['field.invalid']
          },
          'field.invalid': {
            classOn: 'ui-input--invalid',
            unsets: ['field.valid']
          }
        },
        // Validation options
        // @type {Object}
        validate: {
          // Skip validation code, changes the default to: false
          // @type {boolean}
          skip: false,
          // Error reporting level for each event
          // @type {Object}
          eventReporting: {
            blur: 'error',
            input: 'state',
            change: 'error'
          }
        }
      }
    };

    // Extend component states
    _this.extendStates = {
      valid: {
        global: false,
        classOn: 'ui-form--valid',
        unsets: ['invalid']
      },
      invalid: {
        global: false,
        classOn: 'ui-form--invalid',
        unsets: ['valid']
      }
    };

    // Register events
    _this.registerEvents = [['reset', function (event) {
      UiFormPluginValidate_assertClassBrand(_UiFormPluginValidate_brand, _this, UiFormPluginValidate_event_reset).call(_this, event);
    }]];
    return _this;
  }

  /**
   * Init component
   * @public
   * @param {Object|UiFormComponent} context - Plugin context
   * @return {void}
   */
  UiFormPluginValidate_inherits(UiFormPluginValidate, _UiPlugin);
  return UiFormPluginValidate_createClass(UiFormPluginValidate, [{
    key: "initComponent",
    value: function initComponent(context) {
      // Bind form element events
      UiFormPluginValidate_get(UiFormPluginValidate_getPrototypeOf(UiFormPluginValidate.prototype), "initComponent", this).call(this, context);

      // Create form validator if available
      var validator = this.context.config.get('validate.validator');
      if (typeof validator !== 'function') {
        throw new UiFormPluginValidateException('The validator option must be a constructor');
      }
      UiFormPluginValidate_classPrivateFieldSet(_validator, this, validator(context));
    }
  }, {
    key: "validateForm",
    value:
    /**
     * Validate form
     * @param {boolean|'state'|'error'} report - Report level
     * @return {boolean} - Validation result
     */
    function validateForm() {
      var report = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'error';
      // clearAllFieldsErrors( error = true, visibility = true, only = null )
      this.context.plugins.run('clearAllFieldsErrors', [true, true, null]);
      var valid = UiFormPluginValidate_assertClassBrand(_UiFormPluginValidate_brand, this, UiFormPluginValidate_validate).call(this);

      // Event data
      var form = this.context.dom;
      var data = {
        form: form,
        report: report
      };
      if (!valid) data.errors = UiFormPluginValidate_classPrivateFieldGet(_validator, this).errors();

      // Reporting
      if (report) {
        var event_state = valid ? 'valid' : 'invalid';
        this.context.states.set(event_state);
        this.context.dispatchEvent(event_state, data);

        // Set field errors/states
        var fields = this.context.getDomRefs('fields');
        for (var i = 0; i < fields.length; i++) {
          this.validateField(fields[i], report, true);
        }

        // Use fields error display and state
        if (!valid && !this.context.config.get('validate.onlyState')) {
          this.context.plugins.run('showFieldsErrors', [data.errors, report === 'state']);
        }
      }
      return valid;
    }

    /**
     * Validate field
     * @param {string|HTMLElement} input - Input name or element
     * @param {boolean|'state'|'error'} report - Report level+
     * @param {boolean} noClear - Do not clear error state/visibility
     * @return {boolean} - Validation result
     */
  }, {
    key: "validateField",
    value: function validateField(input) {
      var report = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'error';
      var noClear = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      // clearFieldErrors( input, error = true, visibility = true )
      if (!noClear) this.context.plugins.run('clearFieldErrors', [input, true, true]);

      // Event data
      var field = UiFormPluginValidate_assertClassBrand(_UiFormPluginValidate_brand, this, _get_field_name).call(this, input);
      var valid = UiFormPluginValidate_assertClassBrand(_UiFormPluginValidate_brand, this, UiFormPluginValidate_validate).call(this, field);
      var data = {
        field: field,
        input: input,
        report: report
      };
      if (!valid) data.errors = UiFormPluginValidate_classPrivateFieldGet(_validator, this).errors()[field];

      // Reporting
      if (report) {
        var event_state = valid ? 'valid' : 'invalid';
        var inputs = [input];
        if (input.type === 'radio') {
          inputs = this.context.dom.querySelectorAll('[name="' + input.getAttribute('name') + '"]');
        }
        for (var i = 0; i < inputs.length; i++) {
          this.context.plugins.run('fieldSetState', [inputs[i], event_state]);
        }
        this.context.dispatchEvent('field.' + event_state, data);

        // Use fields error display and state
        if (!valid && !this.context.config.get('validate.onlyState')) {
          this.context.plugins.run('showFieldErrors', [field, data.errors, report === 'state']);
        }
      }
      return valid;
    }

    /**
     * Get last errors
     * @public
     * @return {null|Object} - Errors object
     */
  }, {
    key: "lastErrors",
    value: function lastErrors() {
      return UiFormPluginValidate_classPrivateFieldGet(_validator, this).errors();
    }
  }], [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'validate';
    }
  }]);
}(UiPlugin)));
function UiFormPluginValidate_event_reset(event) {
  var options = this.context.config.get('validate');
  if (event.detail && (!event.detail.soft && options.clearOnReset || event.detail.soft && options.clearOnResetSoft)) {
    // Unset form states
    this.context.states.unset('valid');
    this.context.states.unset('invalid');

    // Unset fields states
    var fields = this.context.getDomRefs('fields');
    for (var i = 0; i < fields.length; i++) {
      this.context.plugins.run('fieldUnsetState', [fields[i], 'valid']);
      this.context.plugins.run('fieldUnsetState', [fields[i], 'invalid']);
    }
  }
}
/**
 * Run validator
 * @param {string|Array} only - Only given fieldname/s
 * @return {boolean} - Validation result
 */
function UiFormPluginValidate_validate(only) {
  var values = this.context.plugins.has('values') ? this.context.plugins.exec('values', 'getValues') : null;
  return UiFormPluginValidate_classPrivateFieldGet(_validator, this).data(values).valid(only);
}
/**
 * Get fieldname from input
 * @param {HTMLElement} only - Input element
 * @return {string} - Fieldname
 */
function _get_field_name(only) {
  var name = only;
  if (only instanceof HTMLElement) {
    name = this.context.plugins.exec('values', 'getFieldName', [only]);
  }
  if (typeof name !== 'string' || !name.length) {
    throw new UiFormPluginValidateException('Invalid fieldname: ' + only);
  }
  return name;
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/Plugins/UiFormPluginReCaptcha.js
function UiFormPluginReCaptcha_typeof(o) { "@babel/helpers - typeof"; return UiFormPluginReCaptcha_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiFormPluginReCaptcha_typeof(o); }
function UiFormPluginReCaptcha_get() { if (typeof Reflect !== "undefined" && Reflect.get) { UiFormPluginReCaptcha_get = Reflect.get.bind(); } else { UiFormPluginReCaptcha_get = function _get(target, property, receiver) { var base = UiFormPluginReCaptcha_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return UiFormPluginReCaptcha_get.apply(this, arguments); }
function UiFormPluginReCaptcha_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = UiFormPluginReCaptcha_getPrototypeOf(object); if (object === null) break; } return object; }
function UiFormPluginReCaptcha_classPrivateMethodInitSpec(obj, privateSet) { UiFormPluginReCaptcha_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiFormPluginReCaptcha_classPrivateFieldInitSpec(obj, privateMap, value) { UiFormPluginReCaptcha_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiFormPluginReCaptcha_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiFormPluginReCaptcha_classPrivateFieldSet(s, a, r) { return s.set(UiFormPluginReCaptcha_assertClassBrand(s, a), r), r; }
function UiFormPluginReCaptcha_classPrivateFieldGet(s, a) { return s.get(UiFormPluginReCaptcha_assertClassBrand(s, a)); }
function UiFormPluginReCaptcha_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiFormPluginReCaptcha_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiFormPluginReCaptcha_toPropertyKey(descriptor.key), descriptor); } }
function UiFormPluginReCaptcha_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiFormPluginReCaptcha_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiFormPluginReCaptcha_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiFormPluginReCaptcha_toPropertyKey(t) { var i = UiFormPluginReCaptcha_toPrimitive(t, "string"); return "symbol" == UiFormPluginReCaptcha_typeof(i) ? i : i + ""; }
function UiFormPluginReCaptcha_toPrimitive(t, r) { if ("object" != UiFormPluginReCaptcha_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiFormPluginReCaptcha_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiFormPluginReCaptcha_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiFormPluginReCaptcha_callSuper(t, o, e) { return o = UiFormPluginReCaptcha_getPrototypeOf(o), UiFormPluginReCaptcha_possibleConstructorReturn(t, UiFormPluginReCaptcha_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiFormPluginReCaptcha_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiFormPluginReCaptcha_possibleConstructorReturn(self, call) { if (call && (UiFormPluginReCaptcha_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiFormPluginReCaptcha_assertThisInitialized(self); }
function UiFormPluginReCaptcha_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiFormPluginReCaptcha_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiFormPluginReCaptcha_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiFormPluginReCaptcha_getPrototypeOf(o) { UiFormPluginReCaptcha_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiFormPluginReCaptcha_getPrototypeOf(o); }
function UiFormPluginReCaptcha_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiFormPluginReCaptcha_setPrototypeOf(subClass, superClass); }
function UiFormPluginReCaptcha_setPrototypeOf(o, p) { UiFormPluginReCaptcha_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiFormPluginReCaptcha_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui form plugin recaptcha exception
 * @class
 * @extends Exception
 */
var UiFormPluginReCaptchaException = /*#__PURE__*/function (_Exception) {
  function UiFormPluginReCaptchaException() {
    UiFormPluginReCaptcha_classCallCheck(this, UiFormPluginReCaptchaException);
    return UiFormPluginReCaptcha_callSuper(this, UiFormPluginReCaptchaException, arguments);
  }
  UiFormPluginReCaptcha_inherits(UiFormPluginReCaptchaException, _Exception);
  return UiFormPluginReCaptcha_createClass(UiFormPluginReCaptchaException);
}(Exception);
/**
 * Ui form plugin recaptcha
 * @class
 * @extends UiPlugin
 */
var _token = /*#__PURE__*/new WeakMap();
var UiFormPluginReCaptcha_timeout = /*#__PURE__*/new WeakMap();
var _host = /*#__PURE__*/new WeakMap();
var _UiFormPluginReCaptcha_brand = /*#__PURE__*/new WeakSet();
var UiFormPluginReCaptcha = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiFormComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiFormPluginReCaptcha(_options, context, debug) {
    var _this;
    UiFormPluginReCaptcha_classCallCheck(this, UiFormPluginReCaptcha);
    _this = UiFormPluginReCaptcha_callSuper(this, UiFormPluginReCaptcha, [_options, context, debug]);

    // Extend default config
    /**
     * Reset event
     * @return {void}
     */
    UiFormPluginReCaptcha_classPrivateMethodInitSpec(_this, _UiFormPluginReCaptcha_brand);
    /**
     * Last challende token generated
     * @private
     * @property
     * @type {null|string}
     */
    UiFormPluginReCaptcha_classPrivateFieldInitSpec(_this, _token, null);
    /**
     * Execute timeout
     * @private
     * @property
     * @type {null|number}
     */
    UiFormPluginReCaptcha_classPrivateFieldInitSpec(_this, UiFormPluginReCaptcha_timeout, null);
    /**
     * ReCaptcha host
     * @private
     * @property
     * @type {null|HTMLElement}
     */
    UiFormPluginReCaptcha_classPrivateFieldInitSpec(_this, _host, null);
    _this.extendConfig = {
      recaptcha: {
        // Google recaptcha sitekey
        //  Must be set to enable plugin, can be set via data-recaptcha-key attribute on the form
        // @type {null|string}
        sitekey: null,
        // ReCaptcha options
        // @type {Object}
        options: {
          size: 'invisible'
        },
        // Loader callback name
        // @type {string}
        loaderName: 'grecaptchaOnLoad',
        // Token callback name
        // @type {string}
        setTokenName: 'grecaptchaSetToken',
        // Append a recaptcha host element if none is defined
        // @type {(null|'form'|'body'|HTMLElement)}
        appendHost: 'form',
        // Recaptcha host element if appended
        // @type {string}
        host: '<div data-recaptcha-host />',
        // Script source including the loaderName option callback
        // @type {string}
        script: 'https://www.google.com/recaptcha/api.js?onload=grecaptchaOnLoad',
        // Script marker attribute, used for dom.recaptchaScript selector
        // @type {string}
        scriptAttribute: 'data-recaptcha-script',
        // Recaptcha execute method timeout
        // @type {number}
        executeTimeout: 120000
      },
      // Dom references
      // @type {Object}
      dom: {
        // Recaptcha challenge input field name
        // @type {string}
        recaptchaChallengeField: '[name="g-recaptcha-response"]',
        // Recaptcha host element selector
        // @type {string}
        recaptchaHost: '[data-recaptcha-host]',
        // Recaptcha script selector
        // @type {string}
        recaptchaScript: '[data-recaptcha-script]'
      }
    };

    // Extend component states
    _this.extendStates = {
      recaptchaLoading: {
        global: false,
        classOn: 'ui-form--recaptcha-loading'
      },
      recaptchaError: {
        global: false,
        classOn: 'ui-form--recaptcha-error'
      }
    };

    // Event prefix
    var _prefix = _this.context.config.get('eventPrefix') || '';

    // Register events
    _this.registerEvents = [[_prefix + 'submit.click', function (event) {
      UiFormPluginReCaptcha_assertClassBrand(_UiFormPluginReCaptcha_brand, _this, UiFormPluginReCaptcha_event_submitClick).call(_this, event);
    }], [_prefix + 'reset', function () {
      UiFormPluginReCaptcha_assertClassBrand(_UiFormPluginReCaptcha_brand, _this, UiFormPluginReCaptcha_event_reset).call(_this);
    }]];
    return _this;
  }

  /**
   * Init component
   * @public
   * @param {Object|UiFormComponent} context - Plugin context
   * @return {void}
   */
  UiFormPluginReCaptcha_inherits(UiFormPluginReCaptcha, _UiPlugin);
  return UiFormPluginReCaptcha_createClass(UiFormPluginReCaptcha, [{
    key: "initComponent",
    value: function initComponent(context) {
      UiFormPluginReCaptcha_get(UiFormPluginReCaptcha_getPrototypeOf(UiFormPluginReCaptcha.prototype), "initComponent", this).call(this, context);
      var options = this.context.config.get('recaptcha');

      // Notify not running
      if (!options.sitekey || !options.sitekey.length) {
        if (this.debug) this.debug.error(this.constructor.name + '::initComponent ReCaptcha requires a sitekey');
        return;
      }

      // Require host element
      UiFormPluginReCaptcha_assertClassBrand(_UiFormPluginReCaptcha_brand, this, _require_host).call(this, options);

      // Set global recaptcha callback
      UiFormPluginReCaptcha_assertClassBrand(_UiFormPluginReCaptcha_brand, this, _register_globals).call(this, options);

      // Require the recaptcha script
      UiFormPluginReCaptcha_assertClassBrand(_UiFormPluginReCaptcha_brand, this, _require_script).call(this, options);
    }

    /**
     * Challenge token getter
     * @public
     * @return {string|null} - Challenge token if available
     */
  }, {
    key: "token",
    get: function get() {
      return UiFormPluginReCaptcha_classPrivateFieldGet(_token, this);
    }
  }], [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'recaptcha';
    }
  }]);
}(UiPlugin)));
function UiFormPluginReCaptcha_event_reset() {
  UiFormPluginReCaptcha_classPrivateFieldSet(_token, this, null);
  if (window.grecaptcha) window.grecaptcha.reset();
}
/**
 * Event submit.click
 * @private
 * @param {Event} event - Submit click event
 * @return {void}
 */
function UiFormPluginReCaptcha_event_submitClick(event) {
  var _this2 = this;
  // If there is no token then we need fetch one first
  if (!UiFormPluginReCaptcha_classPrivateFieldGet(_token, this)) {
    if (this.context.states.is('recaptchaError')) this.context.states.unset('recaptchaError');
    this.context.states.set('recaptchaLoading');

    // Execute on and prevent submit event by preventing click and propagation
    if (window.grecaptcha) {
      event.preventDefault();
      event.stopPropagation();
      window.grecaptcha.execute();

      // Timeout error state
      var options = this.context.config.get('recaptcha');
      if (options.executeTimeout) {
        UiFormPluginReCaptcha_classPrivateFieldSet(UiFormPluginReCaptcha_timeout, this, window.setTimeout(function () {
          _this2.context.states.unset('recaptchaLoading');
          _this2.context.states.set('recaptchaError');
          throw new UiFormPluginReCaptchaException('grecaptcha.execute() is very slow or timed out');
        }, options.executeTimeout));
      }
    } else {
      this.context.states.set('recaptchaError');
      throw new UiFormPluginReCaptchaException('Missing window.grecaptcha Object');
    }
  }
}
/**
 * Require a host element
 * @private
 * @param {Object} options - Plugin options
 * @return {void}
 */
function _require_host(options) {
  var exists = this.context.getDomRefs('recaptchaHost', false);
  if (!exists) {
    var parent = this.context.dom;
    if (options.appendHost === 'document') {
      parent = document.body;
    } else if (options.appendHost instanceof HTMLElement) {
      if (!options.appendHost.isConnected) {
        throw new UiFormPluginReCaptchaException('The appendHost option element must be connected');
      }
      parent = options.appendHost;
    }
    appendHTML(parent, options.host);
    exists = this.context.getDomRefs('recaptchaHost', false);
  }
  if (!exists) {
    throw new UiFormPluginReCaptchaException('A host element is required for ReCaptcha to render');
  }
  UiFormPluginReCaptcha_classPrivateFieldSet(_host, this, exists);
}
/**
 * Callback for recaptcha script load
 * @private
 * @param {Object} options - Plugin options
 * @return {void}
 */
function _callback_loader(options) {
  if (window.grecaptcha) {
    // Event prefix
    var prefix = this.context.config.get('eventPrefix') || '';

    // Fire interceptable load event
    if (!this.context.dispatchEvent(prefix + 'recaptcha.load', {
      plugin: this
    }, true, true)) {
      if (this.debug) this.debug.log(this.constructor.name + '::callback_loader Cancelled by ' + prefix + 'recaptcha.load event');
      return;
    }

    // Get options and render
    var grecaptchaOptions = options.options;
    grecaptchaOptions.sitekey = options.sitekey;
    grecaptchaOptions.callback = options.setTokenName;
    if (this.debug) this.debug.log(this.constructor.name + '::callback_loader Render ReCaptcha', grecaptchaOptions);
    window.grecaptcha.render(UiFormPluginReCaptcha_classPrivateFieldGet(_host, this), grecaptchaOptions);
  } else {
    throw new UiFormPluginReCaptchaException('Loader missing window.grecaptcha Object');
  }
}
/**
 * Callback for recaptcha set token
 * @private
 * @param {string} token - Token to verify
 * @return {void}
 */
function _callback_setToken(token) {
  if (this.debug) this.debug.log(this.constructor.name + '::callback_setToken', token);
  if (UiFormPluginReCaptcha_classPrivateFieldGet(UiFormPluginReCaptcha_timeout, this)) {
    window.clearTimeout(UiFormPluginReCaptcha_classPrivateFieldGet(UiFormPluginReCaptcha_timeout, this));
    UiFormPluginReCaptcha_classPrivateFieldSet(UiFormPluginReCaptcha_timeout, this, null);
  }
  UiFormPluginReCaptcha_classPrivateFieldSet(_token, this, token);

  /* TODO: set token for each form when using multiple forms?
  const inputs = this.context.getDomRefs( 'recaptchaChallengeField' );
  if ( inputs.length ) {
      for ( let i = 0; i < inputs.length; i++ ) {
          inputs[ i ].setAttribute( 'value', token );
      }
  }
  */

  // Event prefix
  var prefix = this.context.config.get('eventPrefix') || '';
  this.context.states.unset('recaptchaLoading');
  if (this.context.dispatchEvent(prefix + 'recaptcha.token', {
    token: token,
    plugin: this
  }, true, true)) {
    this.context.submit();
  }
}
/**
 * Register global callbacks
 * @private
 * @param {Object} options - Plugin options
 * @return {void}
 */
function _register_globals(options) {
  var _this3 = this;
  // Check for free names
  if (window[options.loaderName]) {
    throw new UiFormPluginReCaptchaException('Loader name is already taken: ', options.loaderName);
  }
  if (window[options.setTokenName]) {
    throw new UiFormPluginReCaptchaException('Set token name is already taken: ', options.setTokenName);
  }

  /**
   * GreCaptcha plugin loader callback
   * @public
   * @return {void}
   */
  window[options.loaderName] = function () {
    UiFormPluginReCaptcha_assertClassBrand(_UiFormPluginReCaptcha_brand, _this3, _callback_loader).call(_this3, options);
  };

  /**
   * Set recaptcha token and submit
   * @public
   * @param {string} token - ReCaptcha token
   * @return {void}
   */
  window[options.setTokenName] = function (token) {
    UiFormPluginReCaptcha_assertClassBrand(_UiFormPluginReCaptcha_brand, _this3, _callback_setToken).call(_this3, token, options);
  };
}
/**
 * Require the recaptcha script
 * @private
 * @param {Object} options - Plugin options
 * @return {void}
 */
function _require_script(options) {
  var exists = this.context.getDomRefs('recaptchaScript', false);
  if (exists) {
    throw new UiFormPluginReCaptchaException('ReCaptcha script already set');
  }
  var script = document.createElement('script');
  script.setAttribute(options.scriptAttribute, '');
  script.async = true;
  script.defer = true;
  script.src = options.script;
  document.body.appendChild(script);
}
;// CONCATENATED MODULE: ../../../ui-form/src/js/index.js
/* !
 * @module      : @squirrel-forge/ui-form
 * @version     : 0.10.0
 * @license     : MIT
 * @copyright   : 2022 squirrel-forge
 * @author      : Daniel Hartwell aka. siux <me@siux.info>
 * @description : An async Form component, event based with extensive plugin support, made for the browser and babel compatible.
 */

/**
 * Form
 */






/**
 * Input
 */



/**
 * Plugins
 */






;// CONCATENATED MODULE: ../../../ui-modal/src/js/Modal/UiModalComponent.js
function UiModalComponent_typeof(o) { "@babel/helpers - typeof"; return UiModalComponent_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiModalComponent_typeof(o); }
function UiModalComponent_get() { if (typeof Reflect !== "undefined" && Reflect.get) { UiModalComponent_get = Reflect.get.bind(); } else { UiModalComponent_get = function _get(target, property, receiver) { var base = UiModalComponent_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return UiModalComponent_get.apply(this, arguments); }
function UiModalComponent_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = UiModalComponent_getPrototypeOf(object); if (object === null) break; } return object; }
function UiModalComponent_classPrivateMethodInitSpec(obj, privateSet) { UiModalComponent_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiModalComponent_classPrivateFieldInitSpec(obj, privateMap, value) { UiModalComponent_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function UiModalComponent_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiModalComponent_classPrivateFieldGet(s, a) { return s.get(UiModalComponent_assertClassBrand(s, a)); }
function UiModalComponent_classPrivateFieldSet(s, a, r) { return s.set(UiModalComponent_assertClassBrand(s, a), r), r; }
function UiModalComponent_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiModalComponent_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiModalComponent_toPropertyKey(descriptor.key), descriptor); } }
function UiModalComponent_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiModalComponent_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiModalComponent_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiModalComponent_toPropertyKey(t) { var i = UiModalComponent_toPrimitive(t, "string"); return "symbol" == UiModalComponent_typeof(i) ? i : i + ""; }
function UiModalComponent_toPrimitive(t, r) { if ("object" != UiModalComponent_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiModalComponent_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiModalComponent_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiModalComponent_callSuper(t, o, e) { return o = UiModalComponent_getPrototypeOf(o), UiModalComponent_possibleConstructorReturn(t, UiModalComponent_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiModalComponent_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiModalComponent_possibleConstructorReturn(self, call) { if (call && (UiModalComponent_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiModalComponent_assertThisInitialized(self); }
function UiModalComponent_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiModalComponent_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiModalComponent_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiModalComponent_getPrototypeOf(o) { UiModalComponent_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiModalComponent_getPrototypeOf(o); }
function UiModalComponent_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiModalComponent_setPrototypeOf(subClass, superClass); }
function UiModalComponent_setPrototypeOf(o, p) { UiModalComponent_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiModalComponent_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui modal component exception
 * @class
 * @extends Exception
 */
var UiModalComponentException = /*#__PURE__*/function (_Exception) {
  function UiModalComponentException() {
    UiModalComponent_classCallCheck(this, UiModalComponentException);
    return UiModalComponent_callSuper(this, UiModalComponentException, arguments);
  }
  UiModalComponent_inherits(UiModalComponentException, _Exception);
  return UiModalComponent_createClass(UiModalComponentException);
}(Exception);
/**
 * Ui modal shown callback
 * @callback UiModalCallbackShow
 * @param {Function} complete - Function to call when animation is completed
 * @param {Object|UiModalComponent} - Modal component instance
 * @return {void}
 */
/**
 * Ui modal hidden callback
 * @callback UiModalCallbackHide
 * @param {Function} complete - Function to call when animation is completed
 * @param {Object|UiModalComponent} - Modal component instance
 * @return {void}
 */
/**
 * Ui modal id getter function
 * @typedef {Function} modalIdGetter
 * @param {HTMLElement} opener - Trigger element
 * @param {Function} defaultIdGetter - Default id getter function
 * @return {string|null} - Modal id
 */
/**
 * Ui modal settings
 * @typedef {Object} UiModalSettings
 * @property {documentElement|HTMLElement} context - Context element, default: document.documentElement
 * @property {string} openInContextClass - Class set on context when modal is open, default: 'ui-modal-context--active'
 * @property {('modal'|'alert'|'confirm'|'prompt')} mode - Interaction mode, might require a corresponding plugin, should be set via the UiModalComponent.mode = <string>, default 'modal'
 * @property {Array<mode>} availableModes - Available modes, default: [ 'modal' ]
 * @property {string} modeClass - Mode class prefix, default: 'ui-modal--'
 * @property {boolean} restrictFocus - Restrict tab focus to modal content, default: true
 * @property {boolean|Array<mode>} focusOnShown - Focus first contained element when shown, default: true
 * @property {boolean|Array<mode>} focusLast - Focus last contained element when shown, focusOnShown must be active, default: false
 * @property {boolean} focusResetOnHidden - Reset focus to the element that was focused before opening the modal, default: true
 * @property {boolean|Array<mode>} easyHide - Hide on click outside dialog or keyboard escape key, default: true
 * @property {UiModalAnimators} animator - Custom animators
 * @property {UiModalDomReferences} dom - Dom references
 */
/**
 * Ui modal custom animators
 * @typedef {Object} UiModalAnimators
 * @property {null|UiModalCallbackShow} show - Show modal animator
 * @property {null|UiModalCallbackHide} hide - Hide modal animator
 * @property {number} speed - Animation speed in ms, default: 300
 */
/**
 * Ui modal dom references
 * @typedef {Object} UiModalDomReferences
 * @property {string} native - Native dialog reference, default: 'dialog'
 * @property {string} dialog - Dialog, default: '.ui-modal__dialog'
 * @property {null|string} focusable - Focusable elements, uses the tabFocusLock default selector if not set, default: null
 * @property {string} title - Modal title, default: '.ui-modal__dialog-title'
 * @property {string} content - Modal content, default: '.ui-modal__dialog-content'
 * @property {string} close - Close buttons, default: '[data-modal="ctrl:close"]'
 */
/**
 * Ui modal component states
 * @typedef {Object} UiModalStates
 * @property {ComponentStateDefinition} initialized - Initialized state
 * @property {ComponentStateDefinition} closed - Modal closed state
 * @property {ComponentStateDefinition} open - Modal open state
 * @property {ComponentStateDefinition} animating - Modal transition/animating state
 */
/**
 * Ui modal available plugins
 * @typedef {Array<(UiModalPluginAlert|UiModalPluginConfirm|UiModalPluginPrompt)>} UiModalPlugins
 */
/**
 * Ui modal component
 * @class
 * @extends UiComponent
 */
var _origin = /*#__PURE__*/new WeakMap();
var _UiModalComponent_brand = /*#__PURE__*/new WeakSet();
var UiModalComponent = /*#__PURE__*/function (_UiComponent) {
  /**
   * Constructor
   * @constructor
   * @param {HTMLElement|HTMLElement} element - Block element
   * @param {null|UiModalSettings|Object} settings - Config object
   * @param {Object} defaults - Default config
   * @param {Array<UiModalSettings|Object>} extend - Extend default config
   * @param {UiModalStates|Object} states - States definition
   * @param {UiModalPlugins|Array<Function|Array<Function,*>>} plugins - Plugins to load
   * @param {null|UiComponent} parent - Parent object
   * @param {null|console|Object} debug - Debug object
   * @param {boolean} init - Run init method
   */
  function UiModalComponent(_element) {
    var _this;
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var extend = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    var states = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    var plugins = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var parent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;
    var debug = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
    var init = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : true;
    UiModalComponent_classCallCheck(this, UiModalComponent);
    /**
     * Default config
     * @type {UiModalSettings}
     */
    defaults = defaults || {
      // Event prefix
      eventPrefix: 'modal.',
      // Context element
      // @type {documentElement|HTMLElement}
      context: document.documentElement,
      // Class set on context when modal is open
      // @type {string}
      openInContextClass: 'ui-modal-context--active',
      // Interaction mode, should be set via the UiModalComponent.mode = <string>
      // @type {('modal')}
      mode: 'modal',
      // Available modes
      // @type {Array<mode>}
      availableModes: ['modal'],
      // Mode class prefix
      // @type {string}
      modeClass: 'ui-modal--',
      // Restrict tab focus to modal content
      // @type {boolean}
      restrictFocus: true,
      // Focus first contained element when shown
      // @type {boolean|Array<config.mode>}
      focusOnShown: true,
      // Focus last contained element when shown, focusOnShown must be active
      // @type {boolean|Array<config.mode>}
      focusLast: false,
      // Reset focus to the element that was focused before opening the modal
      // @type {boolean}
      focusResetOnHidden: true,
      // Hide on click outside dialog or keyboard escape key
      // @type {boolean|Array<config.mode>}
      easyHide: true,
      // Custom animators
      // @type {Object}
      animator: {
        // Show modal animator
        // @type {null|UiModalCallbackShow}
        show: null,
        // Hide modal animator
        // @type {null|UiModalCallbackHide}
        hide: null,
        // Animation speed, default: 300ms
        // @type {number}
        speed: null,
        // Control visibility, default: true
        // @type {boolean}
        vis: true
      },
      // Dom references
      // @type {Object}
      dom: {
        // Native dialog reference
        // @type {string}
        native: 'dialog',
        // Dialog
        // @type {string}
        dialog: '.ui-modal__dialog',
        // Focusable elements, uses the tabFocusLock default selector if not set
        // @type {null|string}
        focusable: null,
        // Modal title
        // @type {string}
        title: '.ui-modal__dialog-title',
        // Modal title
        // @type {string}
        content: '.ui-modal__dialog-content',
        // Close buttons
        // @type {string}
        close: '[data-modal="ctrl:close"]'
      }
    };

    /**
     * Default states
     * @type {Object}
     */
    states = states || {
      initialized: {
        classOn: 'ui-modal--initialized'
      },
      closed: {
        classOn: 'ui-modal--closed',
        unsets: ['open']
      },
      open: {
        classOn: 'ui-modal--open',
        unsets: ['closed']
      },
      animating: {
        global: false,
        classOn: 'ui-modal--animating'
      }
    };

    // Initialize parent
    _this = UiModalComponent_callSuper(this, UiModalComponent, [_element, settings, defaults, extend, states, plugins, parent, debug, init]);
    /**
     * Focus first available element after modal.shown event
     * @private
     * @return {void}
     */
    UiModalComponent_classPrivateMethodInitSpec(_this, _UiModalComponent_brand);
    /**
     * Last focus origin
     * @private
     * @property
     * @type {null|HTMLElement}
     */
    UiModalComponent_classPrivateFieldInitSpec(_this, _origin, null);
    return _this;
  }

  /**
   * Initialize component
   * @public
   * @return {void}
   */
  UiModalComponent_inherits(UiModalComponent, _UiComponent);
  return UiModalComponent_createClass(UiModalComponent, [{
    key: "init",
    value: function init() {
      var _this2 = this;
      // Check context compatibility
      if (!EventDispatcher_EventDispatcher.isCompat(this.config.get('context'))) {
        throw new UiModalComponentException('Option context must be an EventTarget compatible object');
      }

      // Default aria properties
      var native = this.getDomRefs('native', false);
      if (!native) {
        this.dom.setAttribute('role', 'dialog');
        this.dom.setAttribute('aria-modal', 'true');
      }

      // Initialize tab focus locking
      tabFocusLock(this.dom, function () {
        return _this2.open && _this2.config.get('restrictFocus');
      }, true, this.config.get('dom.focusable'));

      // Bind events
      this.bind();

      // Initial hidden state
      if (this.config.get('animator.vis')) this.dom.style.display = 'none';
      if (native) native.removeAttribute('open');
      (native || this.dom).setAttribute('aria-hidden', 'true');
      this.states.set('closed');
      var context_class = this.config.get('openInContextClass');
      if (context_class) this.config.get('context').classList.remove(context_class);

      // Complete init and set mode class and attribute
      UiModalComponent_get(UiModalComponent_getPrototypeOf(UiModalComponent.prototype), "init", this).call(this, function () {
        _this2.dom.classList.add(_this2.config.get('modeClass') + _this2.mode);
        _this2.dom.setAttribute('data-mode', _this2.mode);
      });
    }

    /**
     * Bind component related events
     * @public
     * @return {void}
     */
  }, {
    key: "bind",
    value: function bind() {
      var _this3 = this;
      // Component events
      this.addEventList([['click', function () {
        if (_this3._modeOptionActive('easyHide')) _this3.hide();
      }], ['modal.shown', function () {
        UiModalComponent_assertClassBrand(_UiModalComponent_brand, _this3, _focus_on_shown).call(_this3);
      }]]);
      this.dialog.addEventListener('click', function (event) {
        if (_this3._modeOptionActive('easyHide')) event.stopPropagation();
      });

      // Allow for close by escape key if enabled
      document.addEventListener('keyup', function (event) {
        if ((event.keyCode === 27 || event.key === 'Escape') && _this3.open) {
          if (_this3._modeOptionActive('easyHide')) _this3.hide();
        }
      });

      // Close buttons
      bindNodeList_bindNodeList(this.getDomRefs('close'), [['click', function (event) {
        event.preventDefault();
        _this3.hide();
      }]]);
    }

    /**
     * Check if given config mode is true or true by mode
     * @protected
     * @param {string} name - Config option name
     * @return {boolean} - Option enabled
     */
  }, {
    key: "_modeOptionActive",
    value: function _modeOptionActive(name) {
      var option = this.config.get(name);
      if (option === true) return true;
      if (option instanceof Array) {
        if (option.includes('!' + this.mode)) return false;
        if (option.includes(this.mode)) return true;
        if (option.includes('all!')) return true;
      }
      return false;
    }
  }, {
    key: "mode",
    get:
    /**
     * Mode getter
     * @public
     * @return {string} - Mode name
     */
    function get() {
      return this.config.get('mode');
    }

    /**
     * Mode setter
     * @public
     * @param {string} name - Mode name
     * @return {void}
     */,
    set: function set(name) {
      var modes = this.config.get('availableModes');
      if (!name || !modes.includes(name)) {
        throw new UiModalComponentException('Unknown mode "' + mode + '"');
      }
      if (this.mode !== name) {
        this.dom.classList.remove(this.config.get('modeClass') + this.mode);
        this.config.set('mode', name);
        this.dom.classList.add(this.config.get('modeClass') + name);
        this.dom.setAttribute('data-mode', name);
      }
    }

    /**
     * Open state getter
     * @public
     * @return {boolean} - True if open
     */
  }, {
    key: "open",
    get: function get() {
      return this.states.global === 'open';
    }

    /**
     * Open state setter
     * @public
     * @param {boolean} state - State
     * @return {void}
     */,
    set: function set(state) {
      if (typeof state !== 'boolean') {
        throw new UiModalComponentException(this.constructor.name + '.open must be of type boolean');
      }
      if (this.open !== state) {
        if (this.open) {
          this.hide();
        } else {
          this.show();
        }
      }
    }

    /**
     * Animating state getter
     * @public
     * @return {boolean} - True if animating
     */
  }, {
    key: "animating",
    get: function get() {
      return this.states.is('animating');
    }

    /**
     * Dialog element getter
     * @public
     * @return {HTMLElement} - Dialog element
     */
  }, {
    key: "dialog",
    get: function get() {
      return this.getDomRefs('dialog', false);
    }

    /**
     * Title element getter
     * @public
     * @return {HTMLElement} - Title element
     */
  }, {
    key: "title",
    get: function get() {
      return this.getDomRefs('title', false);
    }

    /**
     * Content element getter
     * @public
     * @return {HTMLElement} - Content element
     */
  }, {
    key: "content",
    get: function get() {
      return this.getDomRefs('content', false);
    }

    /**
     * Bind show/hide transition complete/fallback
     * @private
     * @param {Function} complete - Complete handler
     * @return {void}
     */
  }, {
    key: "show",
    value:
    /**
     * Show modal
     * @param {null|HTMLElement} origin - Last focused element before opening
     * @param {boolean} events - Fire events
     * @return {void}
     */
    function show() {
      var _this4 = this;
      var origin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var events = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      if (!this.open && !this.states.is('animating')) {
        UiModalComponent_classPrivateFieldSet(_origin, this, origin instanceof HTMLElement ? origin : document.activeElement || null);
        this.states.set('animating');

        // Check if we can show
        if (events && !this.dispatchEvent((this.config.get('eventPrefix') || '') + 'show', null, true, true)) {
          this.states.unset('animating');
          return;
        }

        // Get animation callback
        var animator = this.config.get('animator.show');
        if (typeof animator !== 'function') {
          animator = function animator(complete) {
            UiModalComponent_assertClassBrand(_UiModalComponent_brand, _this4, _bind_transition_complete).call(_this4, complete);
          };
        }

        // Make visible
        if (this.config.get('animator.vis')) this.dom.style.display = '';

        // When visible start animation
        // Element will be part of the render tree after the next frame draw to ensure transitions run cleanly
        afterPaint(function () {
          // Set props and states
          var native = _this4.getDomRefs('native', false);
          if (native) native.setAttribute('open', '');
          (native || _this4.dom).setAttribute('aria-hidden', 'false');
          _this4.states.set('open');
          var context_class = _this4.config.get('openInContextClass');
          if (context_class) _this4.config.get('context').classList.add(context_class);

          // Run animator
          animator(function () {
            _this4.states.unset('animating');
            if (events) _this4.dispatchEvent((_this4.config.get('eventPrefix') || '') + 'shown');
          }, _this4);
        });
      }
    }

    /**
     * Hide panel
     * @param {boolean} events - Fire events
     * @return {void}
     */
  }, {
    key: "hide",
    value: function hide() {
      var _this5 = this;
      var events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this.open && !this.states.is('animating')) {
        this.states.set('animating');

        // Check if we can hide
        if (events && !this.dispatchEvent((this.config.get('eventPrefix') || '') + 'hide', null, true, true)) {
          this.states.unset('animating');
          return;
        }

        // Get animation callback
        var animator = this.config.get('animator.hide');
        if (typeof animator !== 'function') {
          animator = function animator(complete) {
            UiModalComponent_assertClassBrand(_UiModalComponent_brand, _this5, _bind_transition_complete).call(_this5, complete);
          };
        }

        // Set props and states
        var native = this.getDomRefs('native', false);
        if (native) native.removeAttribute('open');
        (native || this.dom).setAttribute('aria-hidden', 'true');
        this.states.set('closed');
        var context_class = this.config.get('openInContextClass');
        if (context_class) this.config.get('context').classList.remove(context_class);

        // Run animator
        animator(function () {
          _this5.states.unset('animating');
          if (_this5.config.get('animator.vis')) _this5.dom.style.display = 'none';
          if (UiModalComponent_classPrivateFieldGet(_origin, _this5) && _this5.config.get('focusResetOnHidden')) {
            UiModalComponent_classPrivateFieldGet(_origin, _this5).focus();
          }
          if (events) _this5.dispatchEvent((_this5.config.get('eventPrefix') || '') + 'hidden');
          UiModalComponent_classPrivateFieldSet(_origin, _this5, null);
        }, this);
      }
    }
  }], [{
    key: "bindOpeners",
    value:
    /**
     * Bind modal opener links
     * @param {Array<UiModalComponent>} modals - List of modals
     * @param {document|HTMLElement} context - Selection context
     * @param {string} selector - Opener trigger selector
     * @param {modalIdGetter|Function|null} getModalId - Modal id getter function
     * @return {void}
     */
    function bindOpeners(modals) {
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
      var selector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '[data-modal="ctrl:open"]';
      var getModalId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      // Modals must always be an array
      if (!(modals instanceof Array)) {
        throw new UiModalComponentException('Argument modals must be an Array of UiModalComponent instances');
      }

      // Context must allow us to select elements
      if (typeof context.querySelectorAll !== 'function') {
        throw new UiModalComponentException('Argument context must supply a querySelectorAll method');
      }

      // Element selected from context must always be a list
      var openers = context.querySelectorAll(selector);
      if (!(openers instanceof NodeList || openers instanceof Array)) {
        throw new UiModalComponentException('Argument context.querySelectorAll must return a NodeList or Array');
      }

      /**
       * Default modal id getter
       * @param {HTMLElement} opener - Modal trigger
       * @return {string|null} - Modal id
       */
      var defaultIdGetter = function defaultIdGetter(opener) {
        var attributes = ['data-modal-id', 'aria-controls', 'href', 'value'];
        for (var i = 0; i < attributes.length; i++) {
          if (opener.hasAttribute(attributes[i])) {
            var attr_value = opener.getAttribute(attributes[i]);
            if (attr_value) return trimChar(attr_value, '#');
          }
        }
        return null;
      };

      // If there is no custom id getter use the default
      if (typeof getModalId !== 'function') getModalId = defaultIdGetter;

      // Bind all openers
      var _loop = function _loop() {
        var opener = openers[i];
        opener.addEventListener('click', function (event) {
          event.preventDefault();
          var modal_id = getModalId(opener, defaultIdGetter);
          if (typeof modal_id !== 'string' || !modal_id.length) {
            throw new UiModalComponentException('Failed to get target modal id on opener');
          }
          for (var j = 0; j < modals.length; j++) {
            if (modals[j].dom.id === modal_id) {
              modals[j].open = true;
              return;
            }
          }
          throw new UiModalComponentException('Modal opener could not find the target modal for: ' + modal_id);
        });
      };
      for (var i = 0; i < openers.length; i++) {
        _loop();
      }
    }

    /**
     * Element selector getter
     * @public
     * @return {string} - Element selector
     */
  }, {
    key: "selector",
    get: function get() {
      return '[is="ui-modal"]:not([data-state])';
    }
  }]);
}(UiComponent_UiComponent);
function _focus_on_shown() {
  if (this._modeOptionActive('focusOnShown')) {
    var element = getFocusable(this.dom, this._modeOptionActive('focusLast'), this.config.get('dom.focusable'));
    if (element) element.focus();
  }
}
function _bind_transition_complete(complete) {
  var speed = this.config.get('animator.speed');
  speed = typeof speed === 'number' ? speed : 300;

  // Has transitionend event
  var hasTransitions = typeof this.dom.style.transition !== 'undefined';

  // Complete event via transition event
  if (hasTransitions && speed) {
    this.dom.addEventListener('transitionend', complete, {
      once: true
    });
  }

  // Complete event via timeout
  if (!hasTransitions || !speed) {
    window.setTimeout(complete, speed + 1);
  }
}
;// CONCATENATED MODULE: ../../../ui-modal/src/js/Modal/UiModalTemplate.js
function UiModalTemplate_typeof(o) { "@babel/helpers - typeof"; return UiModalTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiModalTemplate_typeof(o); }
function UiModalTemplate_toConsumableArray(arr) { return UiModalTemplate_arrayWithoutHoles(arr) || UiModalTemplate_iterableToArray(arr) || UiModalTemplate_unsupportedIterableToArray(arr) || UiModalTemplate_nonIterableSpread(); }
function UiModalTemplate_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function UiModalTemplate_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return UiModalTemplate_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return UiModalTemplate_arrayLikeToArray(o, minLen); }
function UiModalTemplate_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function UiModalTemplate_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return UiModalTemplate_arrayLikeToArray(arr); }
function UiModalTemplate_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function UiModalTemplate_defineProperty(obj, key, value) { key = UiModalTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function UiModalTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiModalTemplate_toPropertyKey(descriptor.key), descriptor); } }
function UiModalTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiModalTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiModalTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiModalTemplate_toPropertyKey(t) { var i = UiModalTemplate_toPrimitive(t, "string"); return "symbol" == UiModalTemplate_typeof(i) ? i : i + ""; }
function UiModalTemplate_toPrimitive(t, r) { if ("object" != UiModalTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiModalTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiModalTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiModalTemplate_callSuper(t, o, e) { return o = UiModalTemplate_getPrototypeOf(o), UiModalTemplate_possibleConstructorReturn(t, UiModalTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiModalTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiModalTemplate_possibleConstructorReturn(self, call) { if (call && (UiModalTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiModalTemplate_assertThisInitialized(self); }
function UiModalTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiModalTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiModalTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiModalTemplate_getPrototypeOf(o) { UiModalTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiModalTemplate_getPrototypeOf(o); }
function UiModalTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiModalTemplate_setPrototypeOf(subClass, superClass); }
function UiModalTemplate_setPrototypeOf(o, p) { UiModalTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiModalTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui modal template exception
 * @class
 * @extends Exception
 */
var UiModalTemplateException = /*#__PURE__*/function (_Exception) {
  function UiModalTemplateException() {
    UiModalTemplate_classCallCheck(this, UiModalTemplateException);
    return UiModalTemplate_callSuper(this, UiModalTemplateException, arguments);
  }
  UiModalTemplate_inherits(UiModalTemplateException, _Exception);
  return UiModalTemplate_createClass(UiModalTemplateException);
}(Exception);
/**
 * @typedef {Object} UiModalTemplateData - Ui modal template data
 * @property {null|string} id - Modal id
 * @property {null|string|('modal'|'alert'|'confirm'|'prompt')} mode - Mode string, default: modal
 * @property {null|Array<string>} classes - List of classes
 * @property {null|Array<string>} attributes - List of attributes
 * @property {null|UiModalTemplateHeaderData} header - Header definition
 * @property {boolean} focusable - Content focusable
 * @property {string} content - Modal content
 * @property {null|UiModalTemplateFooterData} footer - Footer definition
 * @property {null|UiModalTemplateIconsData} icons - Icons names
 * @property {null|UiModalTemplateI18nData} i18n - Translation data
 * @property {null|UiModalTemplateButtonsData} buttons - Buttons classes data
 */
/**
 * @typedef {Object} UiModalTemplateHeaderData - Ui modal template header data
 * @property {null|string} title - Optional title
 * @property {null|string} custom - Custom header content
 * @property {null|true|UiModalTemplateControlsData} controls - Controls
 */
/**
 * @typedef {Object} UiModalTemplateFooterData - Ui modal template footer data
 * @property {null|string} custom - Custom footer content
 * @property {null|true|UiModalTemplateControlsData} controls - Controls
 */
/**
 * @typedef {Object} UiModalTemplateControlsData - Ui modal template controls data
 * @property {null|string} before - Custom controls content
 * @property {null|string} custom - Custom controls content
 * @property {null|string} after - Custom controls content
 */
/**
 * @typedef {Object} UiModalTemplateI18nData - Ui modal template translation data
 * @property {string} closetop - Close label top text
 * @property {string} close - Close label text
 * @property {string} ok - Ok label text
 * @property {string} cancel - Cancel label text
 * @property {string} confirm - Confirm label text
 */
/**
 * @typedef {Object} UiModalTemplateIconsData - Ui modal template icons names
 * @property {string} closetop - Close top icon name
 * @property {string} close - Close icon name
 * @property {string} ok - Ok icon name
 * @property {string} cancel - Cancel icon name
 * @property {string} confirm - Confirm icon name
 */
/**
 * @typedef {Object} UiModalTemplateButtonsData - Ui modal template button classes
 * @property {string} closetop - Close top classes
 * @property {string} close - Close classes
 * @property {string} ok - Ok classes
 * @property {string} cancel - Cancel classes
 * @property {string} confirm - Confirm classes
 */
/**
 * Ui modal template
 * @class
 * @extends UiTemplate
 */
var UiModalTemplate = /*#__PURE__*/function (_UiTemplate) {
  function UiModalTemplate() {
    var _this;
    UiModalTemplate_classCallCheck(this, UiModalTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = UiModalTemplate_callSuper(this, UiModalTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {UiModalTemplateData}
     */
    UiModalTemplate_defineProperty(_this, "_defaults", {
      id: null,
      classes: [],
      attributes: [],
      mode: 'modal',
      header: {
        title: null,
        custom: null,
        controls: {
          before: null,
          custom: null,
          after: null
        }
      },
      focusable: true,
      content: null,
      footer: {
        custom: null,
        controls: {
          before: null,
          custom: null,
          after: null
        }
      },
      icons: {
        closetop: 'close',
        close: 'close-small',
        ok: 'check',
        cancel: 'close-small',
        confirm: 'check'
      },
      i18n: {
        closetop: 'Close',
        close: 'Close',
        ok: 'Ok',
        cancel: 'Cancel',
        confirm: 'Confirm'
      },
      buttons: {
        closetop: 'ui-button ui-button--icon ui-button--label-hidden ui-button--close',
        close: 'ui-button ui-button--icon ui-button--close',
        ok: 'ui-button ui-button--icon ui-button--accept',
        cancel: 'ui-button ui-button--icon ui-button--cancel',
        confirm: 'ui-button ui-button--icon ui-button--confirm'
      }
    });
    return _this;
  }
  UiModalTemplate_inherits(UiModalTemplate, _UiTemplate);
  return UiModalTemplate_createClass(UiModalTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {UiModalTemplateData} data - Template data
     * @return {boolean} - True if data can be rendered
     */
    function _validate(data) {
      var content_is_string = typeof data.content === 'string';
      var content_has_to_string = typeof data.content.toString === 'function';
      if (!(content_is_string || content_has_to_string)) throw new UiModalTemplateException('Requires content');
    }

    /**
     * Render template
     * @protected
     * @param {UiModalTemplateData} data - Ui modal template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      // Set default mode
      var mode = 'modal';

      // Set mode and data attribute
      if (data.mode && this.constructor.availableModes.includes(data.mode)) {
        mode = data.mode;
      }

      // Set any default classes and attributes for the component
      var classes = ['ui-modal'];
      if (data.classes instanceof Array) classes.push.apply(classes, UiModalTemplate_toConsumableArray(data.classes));
      var attributes = ["data-mode=\"".concat(mode, "\"")];
      if (data.id) attributes.push("id=\"".concat(data.id, "\""));
      if (data.attributes instanceof Array) {
        attributes.push.apply(attributes, UiModalTemplate_toConsumableArray(data.attributes));
      } else if (typeof data.attributes === 'string') {
        attributes.push(data.attributes);
      }

      // Component markup
      return "<section is=\"ui-modal\" class=\"".concat(classes.join(' '), "\" ").concat(attributes.join(' '), ">") + "<div class=\"ui-modal__wrap\">" + "<dialog class=\"ui-modal__dialog\">" + (data.header ? "<div class=\"ui-modal__dialog-header\">" + (data.header.title ? "<h3 class=\"ui-modal__dialog-title\">".concat(data.header.title, "</h3>") : '') + (data.header.custom ? data.header.custom : '') + (data.header.controls ? "<div class=\"ui-modal__dialog-controls\">" + (data.header.controls.before ? data.header.controls.before : '') + (data.header.controls.custom ? data.header.controls.custom : "<button class=\"ui-modal__button ui-modal__button--close ".concat(data.buttons.closetop, "\" type=\"button\" data-modal=\"ctrl:close\">") + "<span class=\"ui-modal__icon ui-icon\" data-icon=\"".concat(data.icons.closetop, "\"><span></span></span>") + "<span class=\"ui-modal__label ui-button__label\">".concat(data.i18n.closetop, "</span></button>")) + (data.header.controls.after ? data.header.controls.after : '') + "</div>" : '') + "</div>" : '') + "<div class=\"ui-modal__dialog-scrollable\"".concat(data.focusable ? ' tabindex="0"' : '', ">") + "<div class=\"ui-modal__dialog-content\">".concat(data.content, "</div>") + "</div>" + (data.footer ? "<div class=\"ui-modal__dialog-footer\">" + (data.footer.custom ? data.footer.custom : '') + (data.footer.controls ? "<div class=\"ui-modal__dialog-controls\">" + (data.footer.controls.before ? data.footer.controls.before : '') + (data.footer.controls.custom ? data.footer.controls.custom : mode === 'modal' ? "<button class=\"ui-modal__button ui-modal__button--close ".concat(data.buttons.close, "\" type=\"button\" data-modal=\"ctrl:close\">") + "<span class=\"ui-modal__icon ui-icon\" data-icon=\"".concat(data.icons.close, "\"><span></span></span>") + "<span class=\"ui-modal__label ui-button__label\">".concat(data.i18n.close, "</span></button>") : mode === 'alert' ? "<button class=\"ui-modal__button ui-modal__button--ok ".concat(data.buttons.ok, "\" type=\"button\" data-modal=\"ctrl:close\">") + "<span class=\"ui-modal__icon ui-icon\" data-icon=\"".concat(data.icons.ok, "\"><span></span></span>") + "<span class=\"ui-modal__label ui-button__label\">".concat(data.i18n.ok, "</span></button>") : mode === 'confirm' || mode === 'prompt' ? "<button class=\"ui-modal__button ui-modal__button--cancel ".concat(data.buttons.cancel, "\" type=\"button\" data-modal=\"ctrl:close\">") + "<span class=\"ui-modal__icon ui-icon\" data-icon=\"".concat(data.icons.cancel, "\"><span></span></span>") + "<span class=\"ui-modal__label ui-button__label\">".concat(data.i18n.cancel, "</span></button>") + "<button class=\"ui-modal__button ui-modal__button--confirm ".concat(data.buttons.confirm, "\" type=\"button\" data-modal=\"ctrl:").concat(mode, ".confirm\">") + "<span class=\"ui-modal__icon ui-icon\" data-icon=\"".concat(data.icons.confirm, "\"><span></span></span>") + "<span class=\"ui-modal__label ui-button__label\">".concat(data.i18n.confirm, "</span></button>") : '') + (data.footer.controls.after ? data.footer.controls.after : '') + "</div>" : '') + "</div>" : '') + "</dialog>" + "</div>" + "</section>";
    }
  }]);
}(UiTemplate);
/**
 * Available modes
 * @public
 * @property
 * @type {UiModalTemplateData.mode[]}
 */
UiModalTemplate_defineProperty(UiModalTemplate, "availableModes", ['modal', 'alert', 'confirm', 'prompt']);
;// CONCATENATED MODULE: ../../../ui-modal/src/js/Plugins/UiModalPluginAlert.js
function UiModalPluginAlert_typeof(o) { "@babel/helpers - typeof"; return UiModalPluginAlert_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiModalPluginAlert_typeof(o); }
function UiModalPluginAlert_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiModalPluginAlert_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiModalPluginAlert_toPropertyKey(descriptor.key), descriptor); } }
function UiModalPluginAlert_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiModalPluginAlert_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiModalPluginAlert_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiModalPluginAlert_toPropertyKey(t) { var i = UiModalPluginAlert_toPrimitive(t, "string"); return "symbol" == UiModalPluginAlert_typeof(i) ? i : i + ""; }
function UiModalPluginAlert_toPrimitive(t, r) { if ("object" != UiModalPluginAlert_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiModalPluginAlert_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiModalPluginAlert_callSuper(t, o, e) { return o = UiModalPluginAlert_getPrototypeOf(o), UiModalPluginAlert_possibleConstructorReturn(t, UiModalPluginAlert_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiModalPluginAlert_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiModalPluginAlert_possibleConstructorReturn(self, call) { if (call && (UiModalPluginAlert_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiModalPluginAlert_assertThisInitialized(self); }
function UiModalPluginAlert_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiModalPluginAlert_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiModalPluginAlert_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiModalPluginAlert_getPrototypeOf(o) { UiModalPluginAlert_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiModalPluginAlert_getPrototypeOf(o); }
function UiModalPluginAlert_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiModalPluginAlert_setPrototypeOf(subClass, superClass); }
function UiModalPluginAlert_setPrototypeOf(o, p) { UiModalPluginAlert_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiModalPluginAlert_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Ui modal plugin alert mode
 * @class
 * @extends UiPlugin
 */
var UiModalPluginAlert = /*#__PURE__*/function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiModalComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiModalPluginAlert(options, context, debug) {
    var _this;
    UiModalPluginAlert_classCallCheck(this, UiModalPluginAlert);
    _this = UiModalPluginAlert_callSuper(this, UiModalPluginAlert, [options, context, debug]);

    // Extend default config
    _this.extendConfig = {
      // Available modes
      // @type {Array<mode>}
      availableModes: ['modal', 'alert'],
      // Focus last contained element when shown
      // @type {boolean|Array<config.mode>}
      focusLast: ['alert']
    };
    return _this;
  }
  UiModalPluginAlert_inherits(UiModalPluginAlert, _UiPlugin);
  return UiModalPluginAlert_createClass(UiModalPluginAlert, null, [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @public
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'alert';
    }
  }]);
}(UiPlugin_UiPlugin);
;// CONCATENATED MODULE: ../../../ui-modal/src/js/Plugins/UiModalPluginConfirm.js
function UiModalPluginConfirm_typeof(o) { "@babel/helpers - typeof"; return UiModalPluginConfirm_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiModalPluginConfirm_typeof(o); }
function UiModalPluginConfirm_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiModalPluginConfirm_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiModalPluginConfirm_toPropertyKey(descriptor.key), descriptor); } }
function UiModalPluginConfirm_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiModalPluginConfirm_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiModalPluginConfirm_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiModalPluginConfirm_toPropertyKey(t) { var i = UiModalPluginConfirm_toPrimitive(t, "string"); return "symbol" == UiModalPluginConfirm_typeof(i) ? i : i + ""; }
function UiModalPluginConfirm_toPrimitive(t, r) { if ("object" != UiModalPluginConfirm_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiModalPluginConfirm_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiModalPluginConfirm_callSuper(t, o, e) { return o = UiModalPluginConfirm_getPrototypeOf(o), UiModalPluginConfirm_possibleConstructorReturn(t, UiModalPluginConfirm_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiModalPluginConfirm_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiModalPluginConfirm_possibleConstructorReturn(self, call) { if (call && (UiModalPluginConfirm_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiModalPluginConfirm_assertThisInitialized(self); }
function UiModalPluginConfirm_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiModalPluginConfirm_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiModalPluginConfirm_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiModalPluginConfirm_getPrototypeOf(o) { UiModalPluginConfirm_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiModalPluginConfirm_getPrototypeOf(o); }
function UiModalPluginConfirm_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiModalPluginConfirm_setPrototypeOf(subClass, superClass); }
function UiModalPluginConfirm_setPrototypeOf(o, p) { UiModalPluginConfirm_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiModalPluginConfirm_setPrototypeOf(o, p); }
function UiModalPluginConfirm_classPrivateMethodInitSpec(obj, privateSet) { UiModalPluginConfirm_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiModalPluginConfirm_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiModalPluginConfirm_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
/**
 * Requires
 */



/**
 * Ui modal plugin confirm mode
 * @class
 * @extends UiPlugin
 */
var _UiModalPluginConfirm_brand = /*#__PURE__*/new WeakSet();
var UiModalPluginConfirm = /*#__PURE__*/function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiModalComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiModalPluginConfirm(options, context, debug) {
    var _this;
    UiModalPluginConfirm_classCallCheck(this, UiModalPluginConfirm);
    _this = UiModalPluginConfirm_callSuper(this, UiModalPluginConfirm, [options, context, debug]);

    // Extend default config
    /**
     * Event initialized
     * @private
     * @param {Event} event - Initialized event
     * @return {void}
     */
    UiModalPluginConfirm_classPrivateMethodInitSpec(_this, _UiModalPluginConfirm_brand);
    _this.extendConfig = {
      // Available modes
      // @type {Array<mode>}
      availableModes: ['modal', 'confirm'],
      // Focus last contained element when shown
      // @type {boolean|Array<config.mode>}
      focusLast: ['confirm'],
      // Dom references
      // @type {Object}
      dom: {
        // Plugin references
        confirm: {
          // Confirm buttons
          // @type {string}
          confirm: '[data-modal="ctrl:confirm.confirm"]'
        }
      }
    };

    // Register events
    _this.registerEvents = [['modal.initialized', function (event) {
      UiModalPluginConfirm_assertClassBrand(_UiModalPluginConfirm_brand, _this, UiModalPluginConfirm_event_initialized).call(_this, event);
    }], ['modal.show', function () {
      if (_this.context.mode !== 'confirm') return;
      _this.context.confirmed = false;
    }], ['modal.hide', function (event) {
      if (_this.context.mode !== 'confirm') return;
      if (!_this.context.confirmed) {
        if (!_this.context.dispatchEvent((_this.context.config.get('eventPrefix') || '') + 'confirm.cancel', null, true, true)) {
          event.preventDefault();
        }
      }
    }]];
    return _this;
  }
  UiModalPluginConfirm_inherits(UiModalPluginConfirm, _UiPlugin);
  return UiModalPluginConfirm_createClass(UiModalPluginConfirm, null, [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @public
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'confirm';
    }
  }]);
}(UiPlugin_UiPlugin);
function UiModalPluginConfirm_event_initialized(event) {
  var _this2 = this;
  if (event.detail.target !== this.context) return;
  if (this.context.mode !== 'confirm') return;

  // Require buttons
  this.context.requireDomRefs([['close', true], ['confirm.confirm', false]]);

  // Required confirmed state
  this.context.confirmed = null;

  // Confirm buttons
  bindNodeList_bindNodeList(this.context.getDomRefs('confirm.confirm'), [['click', function (event) {
    event.preventDefault();
    if (_this2.context.dispatchEvent((_this2.context.config.get('eventPrefix') || '') + 'confirm.confirm', null, true, true)) {
      _this2.context.confirmed = true;
      _this2.context.hide();
    }
  }]]);
}
;// CONCATENATED MODULE: ../../../ui-modal/src/js/Plugins/UiModalPluginPrompt.js
function UiModalPluginPrompt_typeof(o) { "@babel/helpers - typeof"; return UiModalPluginPrompt_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, UiModalPluginPrompt_typeof(o); }
function UiModalPluginPrompt_classPrivateMethodInitSpec(obj, privateSet) { UiModalPluginPrompt_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function UiModalPluginPrompt_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function UiModalPluginPrompt_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function UiModalPluginPrompt_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, UiModalPluginPrompt_toPropertyKey(descriptor.key), descriptor); } }
function UiModalPluginPrompt_createClass(Constructor, protoProps, staticProps) { if (protoProps) UiModalPluginPrompt_defineProperties(Constructor.prototype, protoProps); if (staticProps) UiModalPluginPrompt_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function UiModalPluginPrompt_toPropertyKey(t) { var i = UiModalPluginPrompt_toPrimitive(t, "string"); return "symbol" == UiModalPluginPrompt_typeof(i) ? i : i + ""; }
function UiModalPluginPrompt_toPrimitive(t, r) { if ("object" != UiModalPluginPrompt_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != UiModalPluginPrompt_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function UiModalPluginPrompt_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function UiModalPluginPrompt_callSuper(t, o, e) { return o = UiModalPluginPrompt_getPrototypeOf(o), UiModalPluginPrompt_possibleConstructorReturn(t, UiModalPluginPrompt_isNativeReflectConstruct() ? Reflect.construct(o, e || [], UiModalPluginPrompt_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function UiModalPluginPrompt_possibleConstructorReturn(self, call) { if (call && (UiModalPluginPrompt_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return UiModalPluginPrompt_assertThisInitialized(self); }
function UiModalPluginPrompt_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function UiModalPluginPrompt_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (UiModalPluginPrompt_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function UiModalPluginPrompt_getPrototypeOf(o) { UiModalPluginPrompt_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return UiModalPluginPrompt_getPrototypeOf(o); }
function UiModalPluginPrompt_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) UiModalPluginPrompt_setPrototypeOf(subClass, superClass); }
function UiModalPluginPrompt_setPrototypeOf(o, p) { UiModalPluginPrompt_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return UiModalPluginPrompt_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Ui modal plugin prompt exception
 * @class
 * @extends Exception
 */
var UiModalPluginPromptException = /*#__PURE__*/function (_Exception) {
  function UiModalPluginPromptException() {
    UiModalPluginPrompt_classCallCheck(this, UiModalPluginPromptException);
    return UiModalPluginPrompt_callSuper(this, UiModalPluginPromptException, arguments);
  }
  UiModalPluginPrompt_inherits(UiModalPluginPromptException, _Exception);
  return UiModalPluginPrompt_createClass(UiModalPluginPromptException);
}(Exception);
/**
 * Ui modal plugin prompt mode
 * @class
 * @extends UiPlugin
 */
var _UiModalPluginPrompt_brand = /*#__PURE__*/new WeakSet();
var UiModalPluginPrompt = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_UiPlugin) {
  /**
   * Constructor
   * @constructor
   * @param {null|Object} options - Options object
   * @param {Object|UiModalComponent} context - Plugin context
   * @param {null|console|Object} debug - Debug object
   */
  function UiModalPluginPrompt(options, context, debug) {
    var _this;
    UiModalPluginPrompt_classCallCheck(this, UiModalPluginPrompt);
    _this = UiModalPluginPrompt_callSuper(this, UiModalPluginPrompt, [options, context, debug]);

    // Extend default config
    /**
     * Event initialized
     * @private
     * @param {Event} event - Initialized event
     * @return {void}
     */
    UiModalPluginPrompt_classPrivateMethodInitSpec(_this, _UiModalPluginPrompt_brand);
    _this.extendConfig = {
      // Available modes
      // @type {Array<mode>}
      availableModes: ['modal', 'prompt'],
      // Focus first contained element when shown
      // @type {boolean|Array<config.mode>}
      focusOnShown: ['!prompt'],
      // Dom references
      // @type {Object}
      dom: {
        // Plugin references
        prompt: {
          // Input element reference
          // @type {string}
          input: '[name="value"]',
          // Confirm buttons
          // @type {string}
          confirm: '[data-modal="ctrl:prompt.confirm"]'
        }
      }
    };

    // Register events
    _this.registerEvents = [['modal.initialized', function (event) {
      UiModalPluginPrompt_assertClassBrand(_UiModalPluginPrompt_brand, _this, UiModalPluginPrompt_event_initialized).call(_this, event);
    }], ['modal.show', function () {
      if (_this.context.mode !== 'prompt') return;
      _this.context.confirmed = false;

      // TODO: clear/reset value input to original state?
    }], ['modal.shown', function () {
      UiModalPluginPrompt_assertClassBrand(_UiModalPluginPrompt_brand, _this, UiModalPluginPrompt_focus_on_shown).call(_this);
    }], ['modal.hide', function (event) {
      if (_this.context.mode !== 'prompt') return;
      if (!_this.context.confirmed) {
        if (!_this.context.dispatchEvent((_this.context.config.get('eventPrefix') || '') + 'prompt.cancel', null, true, true)) {
          event.preventDefault();
        }
      }
    }]];
    return _this;
  }
  UiModalPluginPrompt_inherits(UiModalPluginPrompt, _UiPlugin);
  return UiModalPluginPrompt_createClass(UiModalPluginPrompt, null, [{
    key: "pluginName",
    get:
    /**
     * Plugin name getter
     * @public
     * @static
     * @return {string} - Plugin name
     */
    function get() {
      return 'prompt';
    }
  }]);
}(UiPlugin)));
function UiModalPluginPrompt_event_initialized(event) {
  var _this2 = this;
  if (event.detail.target !== this.context) return;
  if (this.context.mode !== 'prompt') return;

  // Require buttons
  this.context.requireDomRefs([['close', true], ['prompt.confirm', false]]);

  // Required confirmed state
  this.context.confirmed = null;

  // Confirm buttons
  bindNodeList(this.context.getDomRefs('prompt.confirm'), [['click', function (event) {
    event.preventDefault();
    if (_this2.context.dispatchEvent((_this2.context.config.get('eventPrefix') || '') + 'prompt.confirm', {
      value: UiModalPluginPrompt_assertClassBrand(_UiModalPluginPrompt_brand, _this2, _get_input_value).call(_this2)
    }, true, true)) {
      _this2.context.confirmed = true;
      _this2.context.hide();
    }
  }]]);

  // TODO: bind key enter to confirm when input/s focused?
}
/**
 * Focus prompt input after modal.shown event
 * @private
 * @return {void}
 */
function UiModalPluginPrompt_focus_on_shown() {
  if (this.context.mode !== 'prompt') return;
  var element = this.context.getDomRefs('prompt.input', false);
  if (element) element.focus();
}
/**
 * Get input value
 * @private
 * @return {null|boolean}
 */
function _get_input_value() {
  var input = this.context.getDomRefs('prompt.input', false);
  if (!input || !['input', 'select', 'textarea'].includes(input.tagName.toLowerCase())) {
    throw new UiModalPluginPromptException('Missing or invalid prompt input element');
  }
  if (input.type === 'checkbox') {
    if (input.checked) return input.value || true;
    return false;
  } else if (input.type === 'radio') {
    var inputs = this.context.getDomRefs('prompt.input');
    for (var i = 0; i < inputs.length; i++) {
      if (input.checked) return input.value;
    }
    return null;
  }
  return input.value || null;
}
;// CONCATENATED MODULE: ../../../ui-modal/src/js/index.js
/* !
 * @module      : @squirrel-forge/ui-modal
 * @version     : 0.6.3
 * @license     : MIT
 * @copyright   : 2022 squirrel-forge
 * @author      : Daniel Hartwell aka. siux <me@siux.info>
 * @description : An accessible modal with events and plugin support, made for the browser and babel compatible.
 */

/**
 * Modal
 */



/**
 * Plugins
 */



;// CONCATENATED MODULE: ./Classes/StorageIndex.js
function StorageIndex_typeof(o) { "@babel/helpers - typeof"; return StorageIndex_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, StorageIndex_typeof(o); }
function StorageIndex_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ StorageIndex_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == StorageIndex_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(StorageIndex_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function StorageIndex_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function StorageIndex_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { StorageIndex_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { StorageIndex_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function StorageIndex_classPrivateFieldInitSpec(obj, privateMap, value) { StorageIndex_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function StorageIndex_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function StorageIndex_classPrivateFieldGet(s, a) { return s.get(StorageIndex_assertClassBrand(s, a)); }
function StorageIndex_classPrivateFieldSet(s, a, r) { return s.set(StorageIndex_assertClassBrand(s, a), r), r; }
function StorageIndex_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function StorageIndex_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, StorageIndex_toPropertyKey(descriptor.key), descriptor); } }
function StorageIndex_createClass(Constructor, protoProps, staticProps) { if (protoProps) StorageIndex_defineProperties(Constructor.prototype, protoProps); if (staticProps) StorageIndex_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function StorageIndex_toPropertyKey(t) { var i = StorageIndex_toPrimitive(t, "string"); return "symbol" == StorageIndex_typeof(i) ? i : i + ""; }
function StorageIndex_toPrimitive(t, r) { if ("object" != StorageIndex_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != StorageIndex_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function StorageIndex_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function StorageIndex_callSuper(t, o, e) { return o = StorageIndex_getPrototypeOf(o), StorageIndex_possibleConstructorReturn(t, StorageIndex_isNativeReflectConstruct() ? Reflect.construct(o, e || [], StorageIndex_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function StorageIndex_possibleConstructorReturn(self, call) { if (call && (StorageIndex_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return StorageIndex_assertThisInitialized(self); }
function StorageIndex_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function StorageIndex_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (StorageIndex_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function StorageIndex_getPrototypeOf(o) { StorageIndex_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return StorageIndex_getPrototypeOf(o); }
function StorageIndex_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) StorageIndex_setPrototypeOf(subClass, superClass); }
function StorageIndex_setPrototypeOf(o, p) { StorageIndex_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return StorageIndex_setPrototypeOf(o, p); }
/**
 * Requires
 */


/**
 * Storage index exception
 * @class
 * @extends Exception
 */
var StorageIndexException = /*#__PURE__*/function (_Exception) {
  function StorageIndexException() {
    StorageIndex_classCallCheck(this, StorageIndexException);
    return StorageIndex_callSuper(this, StorageIndexException, arguments);
  }
  StorageIndex_inherits(StorageIndexException, _Exception);
  return StorageIndex_createClass(StorageIndexException);
}(Exception);
/**
 * Storage index
 * @class
 */
var _type = /*#__PURE__*/new WeakMap();
var _storage = /*#__PURE__*/new WeakMap();
var _index = /*#__PURE__*/new WeakMap();
var StorageIndex_prefix = /*#__PURE__*/new WeakMap();
var _loaded = /*#__PURE__*/new WeakMap();
var StorageIndex = /*#__PURE__*/function () {
  function StorageIndex(storage, type) {
    StorageIndex_classCallCheck(this, StorageIndex);
    StorageIndex_classPrivateFieldInitSpec(this, _type, void 0);
    StorageIndex_classPrivateFieldInitSpec(this, _storage, void 0);
    StorageIndex_classPrivateFieldInitSpec(this, _index, []);
    StorageIndex_classPrivateFieldInitSpec(this, StorageIndex_prefix, 'index_');
    StorageIndex_classPrivateFieldInitSpec(this, _loaded, false);
    StorageIndex_classPrivateFieldSet(_storage, this, storage);
    StorageIndex_classPrivateFieldSet(_type, this, type);
  }
  return StorageIndex_createClass(StorageIndex, [{
    key: "storage",
    get: function get() {
      return StorageIndex_classPrivateFieldGet(_storage, this);
    }
  }, {
    key: "type",
    get: function get() {
      return StorageIndex_classPrivateFieldGet(_type, this);
    }
  }, {
    key: "list",
    get: function get() {
      return StorageIndex_classPrivateFieldGet(_index, this).slice();
    }
  }, {
    key: "each",
    value: function () {
      var _each = StorageIndex_asyncToGenerator( /*#__PURE__*/StorageIndex_regeneratorRuntime().mark(function _callee(callback) {
        var i;
        return StorageIndex_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              i = 0;
            case 1:
              if (!(i < StorageIndex_classPrivateFieldGet(_index, this).length)) {
                _context.next = 7;
                break;
              }
              _context.next = 4;
              return callback(StorageIndex_classPrivateFieldGet(_index, this)[i]);
            case 4:
              i++;
              _context.next = 1;
              break;
            case 7:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function each(_x) {
        return _each.apply(this, arguments);
      }
      return each;
    }()
  }, {
    key: "load",
    value: function () {
      var _load = StorageIndex_asyncToGenerator( /*#__PURE__*/StorageIndex_regeneratorRuntime().mark(function _callee2() {
        var data;
        return StorageIndex_regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!StorageIndex_classPrivateFieldGet(_loaded, this)) {
                _context2.next = 2;
                break;
              }
              return _context2.abrupt("return");
            case 2:
              _context2.next = 4;
              return StorageIndex_classPrivateFieldGet(_storage, this).get(StorageIndex_classPrivateFieldGet(StorageIndex_prefix, this) + StorageIndex_classPrivateFieldGet(_type, this));
            case 4:
              data = _context2.sent;
              if (data) {
                _context2.next = 8;
                break;
              }
              StorageIndex_classPrivateFieldSet(_loaded, this, true);
              return _context2.abrupt("return");
            case 8:
              if (!(typeof data === 'string' && data.length)) {
                _context2.next = 16;
                break;
              }
              _context2.prev = 9;
              data = JSON.parse(data);
              _context2.next = 16;
              break;
            case 13:
              _context2.prev = 13;
              _context2.t0 = _context2["catch"](9);
              throw new StorageIndexException("Data index failed to decode for \"".concat(this.type, "\""));
            case 16:
              if (data instanceof Array) {
                _context2.next = 18;
                break;
              }
              throw new StorageIndexException("Data index corrupted for \"".concat(this.type, "\""));
            case 18:
              StorageIndex_classPrivateFieldSet(_index, this, data);
              StorageIndex_classPrivateFieldSet(_loaded, this, true);
            case 20:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[9, 13]]);
      }));
      function load() {
        return _load.apply(this, arguments);
      }
      return load;
    }()
  }, {
    key: "create",
    value: function create() {
      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      // Create new unique
      if (!id) {
        do {
          id = crypto.randomUUID();
        } while (StorageIndex_classPrivateFieldGet(_index, this).includes(id));
      }

      // Add and return
      StorageIndex_classPrivateFieldGet(_index, this).push(id);
      return id;
    }
  }, {
    key: "save",
    value: function () {
      var _save = StorageIndex_asyncToGenerator( /*#__PURE__*/StorageIndex_regeneratorRuntime().mark(function _callee3() {
        var encoded;
        return StorageIndex_regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.prev = 0;
              encoded = JSON.stringify(StorageIndex_classPrivateFieldGet(_index, this));
              _context3.next = 7;
              break;
            case 4:
              _context3.prev = 4;
              _context3.t0 = _context3["catch"](0);
              throw new StorageIndexException("Failed to encode index for \"".concat(this.type, "\""), _context3.t0);
            case 7:
              _context3.prev = 7;
              _context3.next = 10;
              return StorageIndex_classPrivateFieldGet(_storage, this).set(StorageIndex_classPrivateFieldGet(StorageIndex_prefix, this) + StorageIndex_classPrivateFieldGet(_type, this), encoded);
            case 10:
              _context3.next = 15;
              break;
            case 12:
              _context3.prev = 12;
              _context3.t1 = _context3["catch"](7);
              throw new StorageIndexException("Failed to save index for \"".concat(this.type, "\""), _context3.t1);
            case 15:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this, [[0, 4], [7, 12]]);
      }));
      function save() {
        return _save.apply(this, arguments);
      }
      return save;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = StorageIndex_asyncToGenerator( /*#__PURE__*/StorageIndex_regeneratorRuntime().mark(function _callee4(index) {
        var i;
        return StorageIndex_regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              i = StorageIndex_classPrivateFieldGet(_index, this).indexOf(index);
              if (!(i > -1)) {
                _context4.next = 5;
                break;
              }
              StorageIndex_classPrivateFieldGet(_index, this).splice(i, 1);
              _context4.next = 5;
              return this.save();
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function _delete(_x2) {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
  }, {
    key: "reorder",
    value: function () {
      var _reorder = StorageIndex_asyncToGenerator( /*#__PURE__*/StorageIndex_regeneratorRuntime().mark(function _callee5(subset) {
        var filtered;
        return StorageIndex_regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              filtered = StorageIndex_classPrivateFieldGet(_index, this).filter(function (v) {
                return !subset.includes(v);
              });
              StorageIndex_classPrivateFieldSet(_index, this, filtered.concat(subset));
              _context5.next = 4;
              return this.save();
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function reorder(_x3) {
        return _reorder.apply(this, arguments);
      }
      return reorder;
    }()
  }]);
}();
;// CONCATENATED MODULE: ./Classes/Storage.js
function Storage_typeof(o) { "@babel/helpers - typeof"; return Storage_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Storage_typeof(o); }
function Storage_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Storage_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Storage_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Storage_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Storage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Storage_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Storage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Storage_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function Storage_classPrivateMethodInitSpec(obj, privateSet) { Storage_checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function Storage_classPrivateFieldInitSpec(obj, privateMap, value) { Storage_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Storage_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Storage_classPrivateFieldGet(s, a) { return s.get(Storage_assertClassBrand(s, a)); }
function Storage_classPrivateFieldSet(s, a, r) { return s.set(Storage_assertClassBrand(s, a), r), r; }
function Storage_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Storage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Storage_toPropertyKey(descriptor.key), descriptor); } }
function Storage_createClass(Constructor, protoProps, staticProps) { if (protoProps) Storage_defineProperties(Constructor.prototype, protoProps); if (staticProps) Storage_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Storage_toPropertyKey(t) { var i = Storage_toPrimitive(t, "string"); return "symbol" == Storage_typeof(i) ? i : i + ""; }
function Storage_toPrimitive(t, r) { if ("object" != Storage_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Storage_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Storage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Storage_callSuper(t, o, e) { return o = Storage_getPrototypeOf(o), Storage_possibleConstructorReturn(t, Storage_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Storage_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Storage_possibleConstructorReturn(self, call) { if (call && (Storage_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Storage_assertThisInitialized(self); }
function Storage_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Storage_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Storage_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Storage_getPrototypeOf(o) { Storage_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Storage_getPrototypeOf(o); }
function Storage_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Storage_setPrototypeOf(subClass, superClass); }
function Storage_setPrototypeOf(o, p) { Storage_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Storage_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Local storage exception
 * @class
 * @extends Exception
 */
var StorageException = /*#__PURE__*/function (_Exception) {
  function StorageException() {
    Storage_classCallCheck(this, StorageException);
    return Storage_callSuper(this, StorageException, arguments);
  }
  Storage_inherits(StorageException, _Exception);
  return Storage_createClass(StorageException);
}(Exception);
/**
 * Storage
 * @class
 * @extends EventDispatcher
 */
var _local = /*#__PURE__*/new WeakMap();
var Storage_index = /*#__PURE__*/new WeakMap();
var _models = /*#__PURE__*/new WeakMap();
var _driver = /*#__PURE__*/new WeakMap();
var _drivers = /*#__PURE__*/new WeakMap();
var _Storage_brand = /*#__PURE__*/new WeakSet();
var Storage = /*#__PURE__*/function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {null|Application|EventDispatcher} app - Parent instance
   * @param {null|Console} debug - Debug mode
   */
  function Storage(app, debug) {
    var _this;
    Storage_classCallCheck(this, Storage);
    _this = Storage_callSuper(this, Storage, [null, app, debug]);
    /**
     * Register data model
     * @private
     * @param {Model|Function} Constructor - Model constructor
     * @return {void}
     */
    Storage_classPrivateMethodInitSpec(_this, _Storage_brand);
    /**
     * Local storage
     * @private
     * @type {LStorage}
     */
    Storage_classPrivateFieldInitSpec(_this, _local, void 0);
    Storage_classPrivateFieldInitSpec(_this, Storage_index, {});
    Storage_classPrivateFieldInitSpec(_this, _models, {});
    Storage_classPrivateFieldInitSpec(_this, _driver, 'local');
    Storage_classPrivateFieldInitSpec(_this, _drivers, ['local']);
    Storage_classPrivateFieldSet(_local, _this, new LStorage('ntz_'));
    return _this;
  }

  /**
   * Getter: Local storage
   * @public
   * @return {LStorage} - Local storage instance
   */
  Storage_inherits(Storage, _EventDispatcher);
  return Storage_createClass(Storage, [{
    key: "local",
    get: function get() {
      return Storage_classPrivateFieldGet(_local, this);
    }

    /**
     * Load available driver and data
     * @public
     * @param {Model[]} types - Model constructors
     * @return {Promise<void>} - No return value
     */
  }, {
    key: "load",
    value: (function () {
      var _load = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee(types) {
        var driver, i, size;
        return Storage_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (this.debug) this.debug.log(this.constructor.name + '.load()');
              if (!(!types || !types.length)) {
                _context.next = 3;
                break;
              }
              throw new StorageException('Requires at least one data type');
            case 3:
              // Verify driver
              driver = this.local.get('driver');
              if (!(driver && !Storage_classPrivateFieldGet(_drivers, this).includes(driver))) {
                _context.next = 6;
                break;
              }
              throw new StorageException("Unknown storage driver \"".concat(driver, "\""));
            case 6:
              if (!driver) {
                if (this.debug) this.debug.log(this.constructor.name + '.load() using default localStorage driver');
                driver = Storage_classPrivateFieldGet(_driver, this);
              }

              // Register data models
              for (i = 0; i < types.length; i++) {
                Storage_assertClassBrand(_Storage_brand, this, _register_model).call(this, types[i]);
              }
              if (this.debug) this.debug.log(this.constructor.name + ".load() registered ".concat(types.length, " data types"));

              // Boot driver
              _context.prev = 9;
              if (!(driver === 'local')) {
                _context.next = 16;
                break;
              }
              if (!this.debug) {
                _context.next = 16;
                break;
              }
              _context.next = 14;
              return LStorage.getCurrentSize();
            case 14:
              size = _context.sent;
              this.debug.log(this.constructor.name + ".load(".concat(driver, ") ").concat(convertBytes(size), " in use."));
            case 16:
              _context.next = 21;
              break;
            case 18:
              _context.prev = 18;
              _context.t0 = _context["catch"](9);
              throw new StorageException("Failed to initialize storage driver \"".concat(driver, "\""), _context.t0);
            case 21:
              this.dispatchEvent('storage.ready');
            case 22:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[9, 18]]);
      }));
      function load(_x) {
        return _load.apply(this, arguments);
      }
      return load;
    }())
  }, {
    key: "storageSize",
    value: function () {
      var _storageSize = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee2() {
        var convert,
          size,
          _args2 = arguments;
        return Storage_regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              convert = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : true;
              _context2.next = 3;
              return LStorage.getCurrentSize();
            case 3:
              size = _context2.sent;
              if (!convert) {
                _context2.next = 6;
                break;
              }
              return _context2.abrupt("return", convertBytes(size));
            case 6:
              return _context2.abrupt("return", size);
            case 7:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function storageSize() {
        return _storageSize.apply(this, arguments);
      }
      return storageSize;
    }()
  }, {
    key: "models",
    get: function get() {
      return Storage_classPrivateFieldGet(_models, this);
    }
  }, {
    key: "requireIndex",
    value: function () {
      var _requireIndex = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee3(type) {
        return Storage_regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              Storage_assertClassBrand(_Storage_brand, this, _verify_type).call(this, type);
              if (Storage_classPrivateFieldGet(Storage_index, this)[type]) {
                _context3.next = 5;
                break;
              }
              Storage_classPrivateFieldGet(Storage_index, this)[type] = new StorageIndex(this, type);
              _context3.next = 5;
              return Storage_classPrivateFieldGet(Storage_index, this)[type].load();
            case 5:
              return _context3.abrupt("return", Storage_classPrivateFieldGet(Storage_index, this)[type]);
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function requireIndex(_x2) {
        return _requireIndex.apply(this, arguments);
      }
      return requireIndex;
    }()
  }, {
    key: "typeHasData",
    value: function () {
      var _typeHasData = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee4(type) {
        var index, data;
        return Storage_regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              Storage_assertClassBrand(_Storage_brand, this, _verify_type).call(this, type);
              _context4.next = 3;
              return this.requireIndex(type);
            case 3:
              index = _context4.sent;
              data = index.list;
              if (this.debug) this.debug.log("Storage.typeHasData(".concat(type, ") ").concat(data.length, " entries"));
              return _context4.abrupt("return", !!data.length);
            case 7:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function typeHasData(_x3) {
        return _typeHasData.apply(this, arguments);
      }
      return typeHasData;
    }()
  }, {
    key: "typeList",
    value: function () {
      var _typeList = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee6(type) {
        var parent,
          Constructor,
          index,
          models,
          _args6 = arguments;
        return Storage_regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              parent = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : null;
              Constructor = Storage_assertClassBrand(_Storage_brand, this, _verify_type).call(this, type);
              _context6.next = 4;
              return this.requireIndex(type);
            case 4:
              index = _context6.sent;
              models = [];
              _context6.next = 8;
              return index.each( /*#__PURE__*/function () {
                var _ref = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee5(id) {
                  var model;
                  return Storage_regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) switch (_context5.prev = _context5.next) {
                      case 0:
                        model = new Constructor(null, parent);
                        model.load(id);
                        models.push(model);
                      case 3:
                      case "end":
                        return _context5.stop();
                    }
                  }, _callee5);
                }));
                return function (_x5) {
                  return _ref.apply(this, arguments);
                };
              }());
            case 8:
              return _context6.abrupt("return", models);
            case 9:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function typeList(_x4) {
        return _typeList.apply(this, arguments);
      }
      return typeList;
    }()
  }, {
    key: "get",
    value: function () {
      var _get = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee7(id) {
        var driver, value;
        return Storage_regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              driver = this[Storage_classPrivateFieldGet(_driver, this)];
              if (this.debug) this.debug.warn("Storage.get(".concat(Storage_classPrivateFieldGet(_driver, this), "::").concat(id, ")"));
              _context7.next = 4;
              return driver.get(id);
            case 4:
              value = _context7.sent;
              return _context7.abrupt("return", value);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function get(_x6) {
        return _get.apply(this, arguments);
      }
      return get;
    }()
  }, {
    key: "set",
    value: function () {
      var _set = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee8(id, value) {
        var driver;
        return Storage_regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              if (this.debug) this.debug.log("Storage.set(".concat(Storage_classPrivateFieldGet(_driver, this), "::").concat(id, ")"));
              if (!(typeof id !== 'string' || !id.length)) {
                _context8.next = 3;
                break;
              }
              throw new StorageException('First argument id must be a non empty string');
            case 3:
              if (!(typeof value !== 'string')) {
                _context8.next = 5;
                break;
              }
              throw new StorageException('Second argument value must be a string');
            case 5:
              driver = this[Storage_classPrivateFieldGet(_driver, this)];
              _context8.next = 8;
              return driver.set(id, value);
            case 8:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function set(_x7, _x8) {
        return _set.apply(this, arguments);
      }
      return set;
    }()
  }, {
    key: "remove",
    value: function () {
      var _remove = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee9(id) {
        var driver;
        return Storage_regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (this.debug) this.debug.log("Storage.remove(".concat(Storage_classPrivateFieldGet(_driver, this), "::").concat(id, ")"));
              if (!(typeof id !== 'string' || !id.length)) {
                _context9.next = 3;
                break;
              }
              throw new StorageException('First argument id must be a non empty string');
            case 3:
              driver = this[Storage_classPrivateFieldGet(_driver, this)];
              _context9.next = 6;
              return driver.remove(id);
            case 6:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function remove(_x9) {
        return _remove.apply(this, arguments);
      }
      return remove;
    }()
  }, {
    key: "clear",
    value: function () {
      var _clear = Storage_asyncToGenerator( /*#__PURE__*/Storage_regeneratorRuntime().mark(function _callee10() {
        var driver;
        return Storage_regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              driver = this[Storage_classPrivateFieldGet(_driver, this)];
              _context10.next = 3;
              return driver.clear();
            case 3:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function clear() {
        return _clear.apply(this, arguments);
      }
      return clear;
    }()
  }]);
}(EventDispatcher_EventDispatcher);
function _register_model(Constructor) {
  if (Storage_classPrivateFieldGet(_models, this)[Constructor.modelType]) {
    throw new StorageException("Model \"".concat(Constructor.modelType, "\" already defined"));
  }
  Storage_classPrivateFieldGet(_models, this)[Constructor.modelType] = Constructor;
}
function _verify_type(type) {
  if (!Storage_classPrivateFieldGet(_models, this)[type]) {
    throw new StorageException("Unknown type \"".concat(type, "\""));
  }
  return Storage_classPrivateFieldGet(_models, this)[type];
}
;// CONCATENATED MODULE: ./Classes/Model.js
function Model_typeof(o) { "@babel/helpers - typeof"; return Model_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Model_typeof(o); }
function Model_slicedToArray(arr, i) { return Model_arrayWithHoles(arr) || Model_iterableToArrayLimit(arr, i) || Model_unsupportedIterableToArray(arr, i) || Model_nonIterableRest(); }
function Model_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Model_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Model_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Model_toConsumableArray(arr) { return Model_arrayWithoutHoles(arr) || Model_iterableToArray(arr) || Model_unsupportedIterableToArray(arr) || Model_nonIterableSpread(); }
function Model_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Model_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Model_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Model_arrayLikeToArray(o, minLen); }
function Model_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function Model_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return Model_arrayLikeToArray(arr); }
function Model_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Model_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Model_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Model_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Model_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Model_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Model_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Model_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Model_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function Model_classPrivateFieldInitSpec(obj, privateMap, value) { Model_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Model_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Model_defineProperty(obj, key, value) { key = Model_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Model_classPrivateFieldSet(s, a, r) { return s.set(Model_assertClassBrand(s, a), r), r; }
function Model_classPrivateFieldGet(s, a) { return s.get(Model_assertClassBrand(s, a)); }
function Model_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Model_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Model_toPropertyKey(descriptor.key), descriptor); } }
function Model_createClass(Constructor, protoProps, staticProps) { if (protoProps) Model_defineProperties(Constructor.prototype, protoProps); if (staticProps) Model_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Model_toPropertyKey(t) { var i = Model_toPrimitive(t, "string"); return "symbol" == Model_typeof(i) ? i : i + ""; }
function Model_toPrimitive(t, r) { if ("object" != Model_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Model_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Model_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Model_callSuper(t, o, e) { return o = Model_getPrototypeOf(o), Model_possibleConstructorReturn(t, Model_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Model_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Model_possibleConstructorReturn(self, call) { if (call && (Model_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Model_assertThisInitialized(self); }
function Model_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Model_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Model_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Model_getPrototypeOf(o) { Model_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Model_getPrototypeOf(o); }
function Model_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Model_setPrototypeOf(subClass, superClass); }
function Model_setPrototypeOf(o, p) { Model_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Model_setPrototypeOf(o, p); }
/**
 * Requires
 */




/**
 * Model exception
 * @class
 * @extends Exception
 */
var ModelException = /*#__PURE__*/function (_Exception) {
  function ModelException() {
    Model_classCallCheck(this, ModelException);
    return Model_callSuper(this, ModelException, arguments);
  }
  Model_inherits(ModelException, _Exception);
  return Model_createClass(ModelException);
}(Exception);
/**
 * Model
 * @abstract
 * @class
 * @extends EventDispatcher
 */
var _id = /*#__PURE__*/new WeakMap();
var _import_id = /*#__PURE__*/new WeakMap();
var Model_data = /*#__PURE__*/new WeakMap();
var _changes = /*#__PURE__*/new WeakMap();
var Model_dom = /*#__PURE__*/new WeakMap();
var Model_initialized = /*#__PURE__*/new WeakMap();
var _stats = /*#__PURE__*/new WeakMap();
var Model = /*#__PURE__*/function (_EventDispatcher) {
  function Model() {
    var _this;
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    Model_classCallCheck(this, Model);
    _this = Model_callSuper(this, Model, [null, parent, debug]);
    /**
     * Model id
     * @private
     * @type {null|string}
     */
    Model_classPrivateFieldInitSpec(_this, _id, null);
    /**
     * Model id was imported
     * @private
     * @type {null|string}
     */
    Model_classPrivateFieldInitSpec(_this, _import_id, null);
    /**
     * Model data
     * @private
     * @type {Object}
     */
    Model_classPrivateFieldInitSpec(_this, Model_data, {});
    /**
     * Changes state
     * @private
     * @type {boolean}
     */
    Model_classPrivateFieldInitSpec(_this, _changes, false);
    /**
     * Model view dom
     * @private
     * @type {Object}
     */
    Model_classPrivateFieldInitSpec(_this, Model_dom, {});
    /**
     * Initialized state
     * @private
     * @type {boolean}
     */
    Model_classPrivateFieldInitSpec(_this, Model_initialized, false);
    Model_classPrivateFieldInitSpec(_this, _stats, {});
    _this.initialize();
    if (data) _this.assign(data);
    return _this;
  }
  Model_inherits(Model, _EventDispatcher);
  return Model_createClass(Model, [{
    key: "stats",
    get: function get() {
      return Model_classPrivateFieldGet(_stats, this);
    },
    set: function set(value) {
      var stats = true;
      if (value !== null && value !== void 0 && value.noAsync) {
        delete value['noAsync'];
        stats = false;
      }
      mergeObject_mergeObject(Model_classPrivateFieldGet(_stats, this), value, true, true);
      this.update(stats);
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var _this2 = this;
      if (Model_classPrivateFieldGet(Model_initialized, this)) return;
      Object.defineProperty(this, 'type', {
        get: function get() {
          return _this2.constructor.modelType;
        },
        enumerable: true,
        configurable: false
      });
      Object.defineProperty(this, 'id', {
        get: function get() {
          return _this2._id();
        },
        enumerable: true,
        configurable: false
      });
      var fields = Object.keys(this.constructor.modelFields);
      var _loop = function _loop() {
        var field = fields[i];
        Object.defineProperty(_this2, field, {
          get: function get() {
            return _this2._get(field);
          },
          set: function set(value) {
            _this2._set(field, value);
          },
          enumerable: true,
          configurable: false
        });
      };
      for (var i = 0; i < fields.length; i++) {
        _loop();
      }
      Model_classPrivateFieldSet(Model_initialized, this, true);
    }
  }, {
    key: "_get",
    value: function _get(field) {
      var _classPrivateFieldGet2, _this$constructor$mod;
      return (_classPrivateFieldGet2 = Model_classPrivateFieldGet(Model_data, this)[field]) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : (_this$constructor$mod = this.constructor.modelFields[field]) === null || _this$constructor$mod === void 0 ? void 0 : _this$constructor$mod.value;
    }
  }, {
    key: "_set",
    value: function _set(field, value) {
      if (Model_classPrivateFieldGet(Model_data, this)[field] !== value) Model_classPrivateFieldSet(_changes, this, true);
      Model_classPrivateFieldGet(Model_data, this)[field] = value;
    }
  }, {
    key: "_id",
    value: function (_id2) {
      function _id() {
        return _id2.apply(this, arguments);
      }
      _id.toString = function () {
        return _id2.toString();
      };
      return _id;
    }(function () {
      return Model_classPrivateFieldGet(_id, this);
    })
  }, {
    key: "importId",
    set: function set(id) {
      Model_classPrivateFieldSet(_import_id, this, id);
    }
  }, {
    key: "data",
    get: function get() {
      // const data = cloneObject( this.#data, true );
      var data = {};
      var keys = Object.keys(this.constructor.modelFields);
      for (var i = 0; i < keys.length; i++) {
        var field = keys[i];
        data[field] = this._get(field);
      }
      data.id = Model_classPrivateFieldGet(_id, this);
      return data;
    }
  }, {
    key: "dom",
    get: function get() {
      return Model_classPrivateFieldGet(Model_dom, this)[this.constructor.modelType];
    }
  }, {
    key: "view",
    value: function view(name) {
      var _classPrivateFieldGet3;
      return (_classPrivateFieldGet3 = Model_classPrivateFieldGet(Model_dom, this)[name]) !== null && _classPrivateFieldGet3 !== void 0 ? _classPrivateFieldGet3 : null;
    }
  }, {
    key: "children",
    get: function get() {
      return this.dom.querySelector(this.constructor.childrenHost);
    }
  }, {
    key: "hasChanges",
    value: function hasChanges() {
      return Model_classPrivateFieldGet(_changes, this);
    }
  }, {
    key: "assign",
    value: function assign(data) {
      var result = this.constructor.validate(data);
      if (!result.valid) {
        if (this.debug) this.debug.error(data, result.errors);
        throw new ModelException('Failed to assign invalid data');
      }
      var keys = Object.keys(this.constructor.modelFields);
      var changes = false;
      for (var i = 0; i < keys.length; i++) {
        var field = keys[i];
        if (typeof data[field] !== 'undefined') {
          if (Model_classPrivateFieldGet(Model_data, this)[field] !== data[field]) changes = true;
          Model_classPrivateFieldGet(Model_data, this)[field] = data[field];
        }
      }
      Model_classPrivateFieldSet(_changes, this, changes);
    }
  }, {
    key: "load",
    value: function () {
      var _load = Model_asyncToGenerator( /*#__PURE__*/Model_regeneratorRuntime().mark(function _callee(id) {
        var type, data, decoded;
        return Model_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              type = this.constructor.modelType;
              _context.next = 3;
              return this.constructor.storage.get(type + '_' + id);
            case 3:
              data = _context.sent;
              if (data) {
                _context.next = 6;
                break;
              }
              throw new ModelException("Model data not found for ".concat(type, "[").concat(id, "]"));
            case 6:
              _context.prev = 6;
              decoded = JSON.parse(data);
              _context.next = 13;
              break;
            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](6);
              throw new ModelException("Failed to decode model data for ".concat(type, "[").concat(id, "]"), _context.t0);
            case 13:
              if (isPojo_isPojo(decoded)) {
                _context.next = 15;
                break;
              }
              throw new ModelException("Corrupted model data for ".concat(type, "[").concat(id, "]"));
            case 15:
              this.assign(decoded);
              Model_classPrivateFieldSet(_id, this, id);
              Model_classPrivateFieldSet(_changes, this, false);
              this.dispatchEvent('model.loaded');
            case 19:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[6, 10]]);
      }));
      function load(_x) {
        return _load.apply(this, arguments);
      }
      return load;
    }()
  }, {
    key: "save",
    value: function () {
      var _save = Model_asyncToGenerator( /*#__PURE__*/Model_regeneratorRuntime().mark(function _callee2() {
        var noEvent,
          encoded,
          needs_index_update,
          index,
          _args2 = arguments;
        return Model_regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              noEvent = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : false;
              if (this.debug) this.debug.log(this.constructor.name + ".save(".concat(this.constructor.modelType, ", ").concat(Model_classPrivateFieldGet(Model_data, this).id || 'null', ")"));
              if (this.constructor.storage) {
                _context2.next = 4;
                break;
              }
              throw new ModelException('Storage driver not available');
            case 4:
              if (Model_classPrivateFieldGet(_changes, this)) {
                _context2.next = 6;
                break;
              }
              return _context2.abrupt("return");
            case 6:
              _context2.prev = 6;
              encoded = JSON.stringify(Model_classPrivateFieldGet(Model_data, this));
              _context2.next = 13;
              break;
            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](6);
              throw new ModelException('Failed to encode data');
            case 13:
              // Requires an index
              needs_index_update = false;
              if (Model_classPrivateFieldGet(_id, this)) {
                _context2.next = 21;
                break;
              }
              _context2.next = 17;
              return this.constructor.storage.requireIndex(this.constructor.modelType);
            case 17:
              index = _context2.sent;
              Model_classPrivateFieldSet(_id, this, index.create(Model_classPrivateFieldGet(_import_id, this)));
              Model_classPrivateFieldSet(_import_id, this, null);
              needs_index_update = true;
            case 21:
              _context2.next = 23;
              return this.constructor.storage.set(this.constructor.modelType + '_' + Model_classPrivateFieldGet(_id, this), encoded);
            case 23:
              if (!needs_index_update) {
                _context2.next = 26;
                break;
              }
              _context2.next = 26;
              return index.save();
            case 26:
              Model_classPrivateFieldSet(_changes, this, false);
              if (!noEvent) this.dispatchEvent('model.saved', {
                created: needs_index_update
              });
            case 28:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this, [[6, 10]]);
      }));
      function save() {
        return _save.apply(this, arguments);
      }
      return save;
    }()
  }, {
    key: "delete",
    value: function () {
      var _delete2 = Model_asyncToGenerator( /*#__PURE__*/Model_regeneratorRuntime().mark(function _callee3() {
        var index;
        return Model_regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if (this.debug) this.debug.log(this.constructor.name + ".save(".concat(this.constructor.modelType, ", ").concat(Model_classPrivateFieldGet(Model_data, this).id || 'null', ")"));
              if (this.constructor.storage) {
                _context3.next = 3;
                break;
              }
              throw new ModelException('Storage driver not available');
            case 3:
              _context3.next = 5;
              return this.constructor.storage.requireIndex(this.constructor.modelType);
            case 5:
              index = _context3.sent;
              _context3.next = 8;
              return this.constructor.storage.remove(this.constructor.modelType + '_' + Model_classPrivateFieldGet(_id, this));
            case 8:
              _context3.next = 10;
              return index.delete(Model_classPrivateFieldGet(_id, this));
            case 10:
              Model_classPrivateFieldSet(_id, this, null);
              Model_classPrivateFieldSet(_changes, this, true);
              this.dispatchEvent('model.deleted');
            case 13:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function _delete() {
        return _delete2.apply(this, arguments);
      }
      return _delete;
    }()
    /**
     * Render model display
     * @public
     * @param {Object} params - Optional binder arguments
     * @return {HTMLElement} - Rendered and bound model view
     */
  }, {
    key: "render",
    value: function render() {
      var _params$template, _params$append;
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var tmpl = (_params$template = params.template) !== null && _params$template !== void 0 ? _params$template : this.constructor.modelType;
      var target = (_params$append = params.append) !== null && _params$append !== void 0 ? _params$append : this.parent.children;
      Model_classPrivateFieldGet(Model_dom, this)[tmpl] = UiTemplateRenderer.node({
        template: tmpl,
        data: this.data
      })[0];
      params.model = this;
      this.constructor.bind(Model_classPrivateFieldGet(Model_dom, this)[tmpl], params);
      target.appendChild(Model_classPrivateFieldGet(Model_dom, this)[tmpl]);
      return Model_classPrivateFieldGet(Model_dom, this)[tmpl];
    }
  }, {
    key: "clearRender",
    value: function clearRender(tmpl) {
      if (Model_classPrivateFieldGet(Model_dom, this)[tmpl]) delete Model_classPrivateFieldGet(Model_dom, this)[tmpl];
    }
  }, {
    key: "update",
    value: function update() {
      var _this3 = this;
      var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var tmpl = this.constructor.modelType;
      if (!Model_classPrivateFieldGet(Model_dom, this)[tmpl]) return;
      var nodes = Model_toConsumableArray(Model_classPrivateFieldGet(Model_dom, this)[tmpl].querySelectorAll('[data-model-update]'));
      if (!children) nodes = nodes.filter(function (node) {
        return !_this3.children.contains(node);
      });
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        var updates = node.getAttribute('data-model-update').split('|');
        for (var j = 0; j < updates.length; j++) {
          var _updates$j$split = updates[j].split(':'),
            _updates$j$split2 = Model_slicedToArray(_updates$j$split, 3),
            dom = _updates$j$split2[0],
            field = _updates$j$split2[1],
            attr = _updates$j$split2[2];
          var value = strAccess(field, this, 1, this.debug);
          if (!value && value !== 0) continue;
          switch (dom) {
            case 'text':
              node.innerText = value;
              break;
            case 'html':
              node.innerHTML = value;
              break;
            case 'attr':
              node.setAttribute(attr, value);
          }
        }
      }
      if (stats && this.updateAsync) this.updateAsync();
    }
  }, {
    key: "isOpen",
    value: function isOpen() {
      return this.dom.classList.contains("".concat(this.type, "--open"));
    }
  }, {
    key: "actionOpen",
    value: function actionOpen() {
      var _this4 = this;
      this.dispatchEvent("".concat(this.type, ".open"));
      this.dom.classList.add("".concat(this.type, "--open"));
      afterPaint(function () {
        _this4.dispatchEvent("".concat(_this4.type, ".opened"));
      });
    }
  }, {
    key: "actionClose",
    value: function actionClose() {
      var _this5 = this;
      if (this.isMaximized()) this.actionMinimize();
      this.dispatchEvent("".concat(this.type, ".close"));
      this.dom.classList.remove("".concat(this.type, "--open"));
      afterPaint(function () {
        _this5.dispatchEvent("".concat(_this5.type, ".closed"));
      });
    }
  }, {
    key: "isMaximized",
    value: function isMaximized() {
      return this.dom.classList.contains("".concat(this.type, "--maximized"));
    }
  }, {
    key: "actionMaximize",
    value: function actionMaximize() {
      var _this6 = this;
      this.dispatchEvent("".concat(this.type, ".maximize"));
      this.dom.classList.add("".concat(this.type, "--maximized"));
      this.dom.setAttribute('data-is-maximized', 'true');
      this.parent.children.setAttribute('data-has-maximized', 'true');
      afterPaint(function () {
        _this6.dispatchEvent("".concat(_this6.type, ".maximized"));
      });
    }
  }, {
    key: "actionMinimize",
    value: function actionMinimize() {
      var _this7 = this;
      this.dispatchEvent("".concat(this.type, ".minimize"));
      this.dom.classList.remove("".concat(this.type, "--maximized"));
      this.dom.removeAttribute('data-is-maximized');
      this.parent.children.removeAttribute('data-has-maximized');
      afterPaint(function () {
        _this7.dispatchEvent("".concat(_this7.type, ".minimized"));
      });
    }
  }], [{
    key: "labelGenerator",
    value:
    /**
     * Generate field label from name
     * @param {string} str - Field name
     * @return {string} - Label optimized
     */
    function labelGenerator(str) {
      var stripped = str.replace(/^[A-Z]/g, function (s) {
        return ' ' + s.toLowerCase();
      }).replace(/[A-Z]/g, function (s) {
        return ' ' + s.toLowerCase();
      });
      return ucfirst(stripped.replace('modal', 'popup').replace('nav', 'navigation'));
    }

    /**
     * Render form fields
     * @param {Object} data - Field data
     * @return {{template: string, as: {content: *[]}, data: {}}[]} - Render object
     */
  }, {
    key: "form",
    value: function form() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var fieldset = {
        template: 'fieldset',
        data: {},
        as: {
          content: []
        }
      };
      var entries = Object.entries(this.modelFields);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i = Model_slicedToArray(entries[i], 2),
          field = _entries$i[0],
          config = _entries$i[1];
        var input = {
          template: 'input',
          data: cloneObject_cloneObject(config, true)
        };
        input.data.name = field;
        input.data.classes = ["ui-input--".concat(strCamel2dash(field)), 'ui-input--grow', 'ui-input--grow-label', 'ui-input--label-multiline'];
        if (config.type === 'textarea') {
          input.data.classes.push('ui-input--wide');
        } else {
          input.data.classes.push('ui-input--horizontal', 'ui-input--spaced');
        }
        if (!input.data.label) input.data.label = {
          text: this.labelGenerator(field)
        };
        if (config.type === 'number') input.data.classes.push('ui-input--input-align-right');

        // if ( config.type !== 'checkbox' && !input.data.width ) input.data.width = 100;
        if (config.type === 'select' && config.options) {
          input.data.options = [];
          for (var j = 0; j < config.options.length; j++) {
            var option = config.options[j];
            input.data.options.push({
              label: this.labelGenerator(option),
              value: option
            });
          }
        }
        if (data !== null && typeof data[field] !== 'undefined') {
          input.data.value = data[field];
        } else if (!data && typeof config.value !== 'undefined') {
          input.data.value = config.value;
        }
        switch (config.type) {
          case 'text':
            input.data.maxlen = config.max;
            break;
          case 'checkbox':
            input.data.checked = input.data.value;
            break;
        }
        fieldset.as.content.push(input);
      }
      return [fieldset];
    }

    /**
     * Get data from form
     * @param {HTMLElement} dom - Form context
     * @return {Object} - Fields data
     */
  }, {
    key: "getFormData",
    value: function getFormData(dom) {
      var fv = new FormValues_FormValues(dom, false, this.app.debug);
      var data = fv.get();
      var entries = Object.entries(this.modelFields);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i2 = Model_slicedToArray(entries[i], 2),
          field = _entries$i2[0],
          config = _entries$i2[1];
        if (typeof data[field] === 'undefined' && config.type === 'checkbox') {
          data[field] = false;
        }
      }
      return data;
    }
  }, {
    key: "bind",
    value: function bind() {
      var dom = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!(dom instanceof HTMLElement)) throw new ModelException('Nothing to bind');
      params.dom = dom;

      // Bind action handlers
      this.app.bindActions(this.modelActions, dom, params);

      // Bind custom handlers
      for (var i = 0; i < this.modelBinds.length; i++) {
        var bind = this.modelBinds[i];
        bind(params);
      }
    }
  }, {
    key: "bindForm",
    value: function bindForm(dom, modal) {
      var inputs = dom.querySelectorAll('input:not([type="hidden"]), select, textarea');
      var _loop2 = function _loop2() {
        var input = inputs[i];
        var component = input.closest('.ui-input');
        var error = component.querySelector('.ui-input__error');
        input.addEventListener('blur', function () {
          component.classList.remove('ui-input--error');
          component.classList.remove('ui-input--error-visible');
          error.innerHTML = '';
        });
        input.addEventListener('keyup', function (event) {
          if (event.key === 'Enter') {
            modal.getDomRefs('confirm.confirm', false).click();
          }
        });
      };
      for (var i = 0; i < inputs.length; i++) {
        _loop2();
      }
    }
  }, {
    key: "validate",
    value: function validate(data) {
      var valid = true,
        errors = {};
      var entries = Object.entries(this.modelFields);
      for (var i = 0; i < entries.length; i++) {
        var _entries$i3 = Model_slicedToArray(entries[i], 2),
          field = _entries$i3[0],
          config = _entries$i3[1];
        if (config.required && isEmpty_isEmpty(data[field])) {
          valid = false;
          if (!errors[field]) errors[field] = [];
          errors[field].push("Field <q>".concat(this.labelGenerator(field), "</q> is required."));
        }
      }
      if (valid) errors = null;
      return {
        valid: valid,
        errors: errors
      };
    }
  }]);
}(EventDispatcher_EventDispatcher);
/**
 * App instance
 * @public
 * @static
 * @type {null|Application}
 */
Model_defineProperty(Model, "app", null);
/**
 * Storage driver
 * @public
 * @static
 * @type {null|Storage}
 */
Model_defineProperty(Model, "storage", null);
/**
 * Model type name
 * @public
 * @abstract
 * @static
 * @type {string}
 */
Model_defineProperty(Model, "modelType", 'default');
/**
 * Model parent type name
 * @public
 * @abstract
 * @static
 * @type {string}
 */
Model_defineProperty(Model, "modelParentType", 'default');
/**
 * Model fields
 * @public
 * @abstract
 * @static
 * @type {Object}
 */
Model_defineProperty(Model, "modelFields", {});
/**
 * Model binds
 * @public
 * @abstract
 * @static
 * @type {Array}
 */
Model_defineProperty(Model, "modelBinds", []);
/**
 * Model actions
 * @public
 * @abstract
 * @static
 * @type {Object}
 */
Model_defineProperty(Model, "modelActions", {});
/**
 * Model children host selector
 * @public
 * @abstract
 * @static
 * @type {null|string}
 */
Model_defineProperty(Model, "childrenHost", null);
/**
 * Model children type
 * @public
 * @abstract
 * @static
 * @type {null|string}
 */
Model_defineProperty(Model, "childrenType", null);
;// CONCATENATED MODULE: ./Classes/Models/Item.js
function Item_typeof(o) { "@babel/helpers - typeof"; return Item_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Item_typeof(o); }
function Item_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Item_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Item_toPropertyKey(descriptor.key), descriptor); } }
function Item_createClass(Constructor, protoProps, staticProps) { if (protoProps) Item_defineProperties(Constructor.prototype, protoProps); if (staticProps) Item_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Item_callSuper(t, o, e) { return o = Item_getPrototypeOf(o), Item_possibleConstructorReturn(t, Item_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Item_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Item_possibleConstructorReturn(self, call) { if (call && (Item_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Item_assertThisInitialized(self); }
function Item_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Item_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Item_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Item_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Item_get = Reflect.get.bind(); } else { Item_get = function _get(target, property, receiver) { var base = Item_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Item_get.apply(this, arguments); }
function Item_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Item_getPrototypeOf(object); if (object === null) break; } return object; }
function Item_getPrototypeOf(o) { Item_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Item_getPrototypeOf(o); }
function Item_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Item_setPrototypeOf(subClass, superClass); }
function Item_setPrototypeOf(o, p) { Item_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Item_setPrototypeOf(o, p); }
function Item_defineProperty(obj, key, value) { key = Item_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Item_toPropertyKey(t) { var i = Item_toPrimitive(t, "string"); return "symbol" == Item_typeof(i) ? i : i + ""; }
function Item_toPrimitive(t, r) { if ("object" != Item_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Item_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Item_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Item_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Item_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Item_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Item_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Item_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Item_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Item_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Requires
 */



/**
 * Bind model
 * @param {Object} params - Bind params
 * @return {void}
 */
function _bind_item_dom(params) {
  if (params.modal) {
    var select_variant = params.modal.dom.querySelector('[name="variant"]');
    select_variant.addEventListener('change', function () {
      params.modal.dom.setAttribute('data-item-variant', select_variant.value);
    });
    params.modal.dom.setAttribute('data-item-variant', select_variant.value);
  }
}
var _MODEL_ACTIONS = {
  'item.open': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionOpen();
  }]],
  'item.close': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionClose();
  }]],
  'item.modal': [['click', function (event, params) {
    event.preventDefault();
    params.model.dispatchEvent('item.modal');
  }]],
  'item.link': [['click', function (event, params) {
    event.preventDefault();
    var url = null;
    switch (params.model.variant) {
      case 'url':
        url = params.model.url;
        break;
      case 'youtube':
        url = params.model.youtubeLink;
        break;
    }
    if (url) window.open(url, '_blank');
  }]],
  'item.mark': [['click', ( /*#__PURE__*/function () {
    var _ref = Item_asyncToGenerator( /*#__PURE__*/Item_regeneratorRuntime().mark(function _callee(event, params) {
      return Item_regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            event.preventDefault();
            params.model.dispatchEvent('item.mark');
            params.model.marked = true;
            _context.next = 5;
            return params.model.save();
          case 5:
            params.model.dom.classList.add('item--marked');
            afterPaint(function () {
              params.model.dispatchEvent('item.marked');
            });
          case 7:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }())]],
  'item.unmark': [['click', ( /*#__PURE__*/function () {
    var _ref2 = Item_asyncToGenerator( /*#__PURE__*/Item_regeneratorRuntime().mark(function _callee2(event, params) {
      return Item_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            event.preventDefault();
            params.model.dispatchEvent('item.unmark');
            params.model.marked = false;
            _context2.next = 5;
            return params.model.save();
          case 5:
            params.model.dom.classList.remove('item--marked');
            afterPaint(function () {
              params.model.dispatchEvent('item.unmarked');
            });
          case 7:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }())]],
  'item.edit': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.showModelModal('item', params.model, 'edit');
  }]],
  'item.delete': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.view.deleteModel(params.model);
  }]],
  'item.more': [['click', ( /*#__PURE__*/function () {
    var _ref3 = Item_asyncToGenerator( /*#__PURE__*/Item_regeneratorRuntime().mark(function _callee3(event, params) {
      return Item_regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            event.preventDefault();
            params.model.amount = params.model.amount + 1;
            _context3.next = 4;
            return params.model.save();
          case 4:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    return function (_x5, _x6) {
      return _ref3.apply(this, arguments);
    };
  }())]],
  'item.less': [['click', ( /*#__PURE__*/function () {
    var _ref4 = Item_asyncToGenerator( /*#__PURE__*/Item_regeneratorRuntime().mark(function _callee4(event, params) {
      return Item_regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            event.preventDefault();
            params.model.amount = params.model.amount - 1;
            _context4.next = 4;
            return params.model.save();
          case 4:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    return function (_x7, _x8) {
      return _ref4.apply(this, arguments);
    };
  }())]],
  'item.up': [['click', debounce(function (event, params) {
    params.model.constructor.app.view.updateIndexOrder(params.model.parent);
  }, 750, function (event, params) {
    event.preventDefault();
    var dom = params.model.dom;
    if (!dom.previousElementSibling) return true;
    dom.parentElement.insertBefore(dom, dom.previousElementSibling);
  })]],
  'item.down': [['click', debounce(function (event, params) {
    params.model.constructor.app.view.updateIndexOrder(params.model.parent);
  }, 750, function (event, params) {
    event.preventDefault();
    var dom = params.model.dom;
    if (!dom.nextElementSibling) return true;
    appendAfter(dom, dom.nextElementSibling);
  })]]
};

/**
 * Item
 * @class
 * @extends Model
 */
var Item = /*#__PURE__*/function (_Model) {
  function Item() {
    Item_classCallCheck(this, Item);
    return Item_callSuper(this, Item, arguments);
  }
  Item_inherits(Item, _Model);
  return Item_createClass(Item, [{
    key: "youtubeLink",
    get:
    /**
     * Getter: youtube link
     * @return {string|null} - Link url
     */
    function get() {
      if (isEmpty_isEmpty(this.youtube)) return null;
      return "https://www.youtube.com/watch?v=".concat(this.youtube);
    }

    /**
     * Update item dom
     * @param {Object} stats - Stats object
     * @param {boolean} children - Include children
     * @return {void}
     */
  }, {
    key: "update",
    value: function update() {
      var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.dom.classList[this.marked ? 'add' : 'remove']('item--marked');
      var variants = this.constructor.modelFields.variant.options;
      for (var i = 0; i < variants.length; i++) {
        var variant = variants[i];
        this.dom.classList[variant === this.variant ? 'add' : 'remove']("item--".concat(variant));
      }
      Item_get(Item_getPrototypeOf(Item.prototype), "update", this).call(this, stats, children);
    }
  }]);
}(Model);
Item_defineProperty(Item, "modelType", 'item');
Item_defineProperty(Item, "modelParentType", 'group');
Item_defineProperty(Item, "childrenHost", '.item__children');
Item_defineProperty(Item, "modelFields", {
  rel: {
    type: 'hidden',
    required: true
  },
  label: {
    type: 'text',
    max: 60,
    required: true
  },
  marked: {
    type: 'checkbox',
    value: false
  },
  variant: {
    label: {
      text: 'Type'
    },
    type: 'select',
    value: 'label',
    options: ['label', 'url', 'note', 'youtube'],
    required: true
  },
  amount: {
    type: 'number',
    value: 0
  },
  note: {
    type: 'textarea',
    value: ''
  },
  url: {
    label: {
      text: 'URL including protocol'
    },
    type: 'text',
    value: ''
  },
  youtube: {
    label: {
      text: 'Youtube id'
    },
    type: 'text',
    value: ''
  }
});
Item_defineProperty(Item, "modelActions", _MODEL_ACTIONS);
Item_defineProperty(Item, "modelBinds", [_bind_item_dom]);
;// CONCATENATED MODULE: ./Classes/Models/Settings.js
function Settings_typeof(o) { "@babel/helpers - typeof"; return Settings_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Settings_typeof(o); }
function Settings_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Settings_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Settings_toPropertyKey(descriptor.key), descriptor); } }
function Settings_createClass(Constructor, protoProps, staticProps) { if (protoProps) Settings_defineProperties(Constructor.prototype, protoProps); if (staticProps) Settings_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Settings_callSuper(t, o, e) { return o = Settings_getPrototypeOf(o), Settings_possibleConstructorReturn(t, Settings_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Settings_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Settings_possibleConstructorReturn(self, call) { if (call && (Settings_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Settings_assertThisInitialized(self); }
function Settings_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Settings_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Settings_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Settings_getPrototypeOf(o) { Settings_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Settings_getPrototypeOf(o); }
function Settings_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Settings_setPrototypeOf(subClass, superClass); }
function Settings_setPrototypeOf(o, p) { Settings_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Settings_setPrototypeOf(o, p); }
function Settings_defineProperty(obj, key, value) { key = Settings_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Settings_toPropertyKey(t) { var i = Settings_toPrimitive(t, "string"); return "symbol" == Settings_typeof(i) ? i : i + ""; }
function Settings_toPrimitive(t, r) { if ("object" != Settings_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Settings_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Requires
 */




/**
 * Bind model
 * @param {Object} params - Bind params
 * @return {void}
 */
function _bind_settings_dom(params) {
  // Reapply current settings when closed with cancel
  params.dom.addEventListener('modal.hidden', function (event) {
    if (!event.detail.target.confirmed) {
      params.model.constructor.app.settings.applySettings();
    }
  });
  var interfaceSize = params.dom.querySelector('[name="interfaceSize"]');
  interfaceSize.addEventListener('change', function () {
    document.documentElement.setAttribute('data-interface-size', interfaceSize.value);
  });
  var showOrderControls = params.dom.querySelector('[name="showOrderControls"]');
  showOrderControls.addEventListener('change', function () {
    params.model.constructor.app.view.dom.classList[showOrderControls.checked ? 'add' : 'remove']('view--show-order-controls');
  });
  var exclusiveMaximize = params.dom.querySelector('[name="exclusiveMaximize"]');
  exclusiveMaximize.addEventListener('change', function () {
    params.model.constructor.app.view.dom[exclusiveMaximize.checked ? 'setAttribute' : 'removeAttribute']('data-exclusive-maximize', 'true');
  });
  var showNoteAs = params.dom.querySelector('[name="itemShowNote"]');
  showNoteAs.addEventListener('change', function () {
    params.model.constructor.app.view.dom.setAttribute('data-note-style', showNoteAs.value);
  });
  var showYoutubeAs = params.dom.querySelector('[name="itemShowYoutube"]');
  showYoutubeAs.addEventListener('change', function () {
    params.model.constructor.app.view.dom.setAttribute('data-youtube-style', showYoutubeAs.value);
  });
  var columns = params.dom.querySelectorAll(['[name="boardColumns"]', '[name="groupColumns"]', '[name="groupColumnsMax"]', '[name="itemColumns"]', '[name="itemColumnsMax"]', '[name="itemColumnsMaxMax"]'].join(', '));
  var _loop = function _loop() {
    var input = columns[i];
    input.addEventListener('change', function () {
      var prop = strCamel2dash(input.getAttribute('name'));
      document.documentElement.style.setProperty("--".concat(prop), parseInt(input.value));
    });
  };
  for (var i = 0; i < columns.length; i++) {
    _loop();
  }
}
var Settings_MODEL_ACTIONS = {
  'settings.reset': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.resetSettings();
  }]]
};

/**
 * Settings
 * @class
 * @extends Model
 */
var Settings = /*#__PURE__*/function (_Model) {
  function Settings() {
    Settings_classCallCheck(this, Settings);
    return Settings_callSuper(this, Settings, arguments);
  }
  Settings_inherits(Settings, _Model);
  return Settings_createClass(Settings, [{
    key: "applySettings",
    value:
    /**
     * Apply settings
     * @return {void}
     */
    function applySettings() {
      document.documentElement.setAttribute('data-interface-size', this.interfaceSize);
      this.constructor.app.view.dom.classList[this.showOrderControls ? 'add' : 'remove']('view--show-order-controls');
      this.constructor.app.view.dom[this.exclusiveMaximize ? 'setAttribute' : 'removeAttribute']('data-exclusive-maximize', 'true');
      this.constructor.app.view.dom.setAttribute('data-note-style', this.itemShowNote);
      this.constructor.app.view.dom.setAttribute('data-youtube-style', this.itemShowYoutube);
      document.documentElement.style.setProperty('--modal-youtube-width', "".concat(this.modalYoutubeWidth, "%"));
      var props = ['boardColumns', 'groupColumns', 'groupColumnsMax', 'itemColumns', 'itemColumnsMax', 'itemColumnsMaxMax'];
      for (var i = 0; i < props.length; i++) {
        var field = props[i];
        var prop = strCamel2dash(field);
        document.documentElement.style.setProperty("--".concat(prop), this._get(field));
      }
      Item.modelFields.variant.value = this.defaultVariant;
    }
  }], [{
    key: "modalRender",
    value:
    /**
     * Model modal render additions
     * @param {Object} modal - Modal render data
     * @return {void}
     */
    function modalRender(modal) {
      // Reset button
      modal.as['footer.controls.before'] = '<button class="ui-button ui-button--icon ui-button--hide-label-m"' + ' data-action="settings.reset" data-modal="ctrl:close" type="button">' + '<span class="ui-icon" data-icon="update"><span></span></span>' + '<span class="ui-button__label">Reset</span>' + '</button>';
    }
  }]);
}(Model);
Settings_defineProperty(Settings, "modelType", 'settings');
Settings_defineProperty(Settings, "modelFields", {
  interfaceSize: {
    label: {
      text: 'Interface size'
    },
    type: 'select',
    value: window.innerWidth < 768 ? 'mobile' : 'default',
    options: ['tiny', 'small', 'default', 'mobile', 'medium', 'large']
  },
  showOrderControls: {
    label: {
      text: 'Always show controls to change the order'
    },
    type: 'checkbox',
    value: false
  },
  boardColumns: {
    label: {
      text: 'Board columns (not maximized)'
    },
    type: 'number',
    min: 1,
    value: window.innerWidth < 992 ? 1 : 2
  },
  groupColumns: {
    label: {
      text: 'Group columns (Board not maximized)'
    },
    type: 'number',
    min: 1,
    value: window.innerWidth < 992 ? 1 : 2
  },
  groupColumnsMax: {
    label: {
      text: 'Group columns (Board maximized)'
    },
    type: 'number',
    min: 1,
    value: window.innerWidth < 992 ? 1 : 4
  },
  itemColumns: {
    label: {
      text: 'Item columns (Board + Group not maximized)'
    },
    type: 'number',
    min: 1,
    value: 1
  },
  itemColumnsMax: {
    label: {
      text: 'Item columns (Board not, Group maximized)'
    },
    type: 'number',
    min: 1,
    value: window.innerWidth < 992 ? 1 : 2
  },
  itemColumnsMaxMax: {
    label: {
      text: 'Item columns (Board + Group maximized)'
    },
    type: 'number',
    min: 1,
    value: window.innerWidth < 992 ? 1 : 4
  },
  defaultVariant: {
    label: {
      text: 'Default variant when creating a new item'
    },
    type: 'select',
    value: 'label',
    options: ['label', 'note', 'url', 'youtube']
  },
  exclusiveMaximize: {
    label: {
      text: 'Show only maximized board or group'
    },
    type: 'checkbox',
    value: true
  },
  easyHideModals: {
    label: {
      text: 'Allow cancelling popups by escape key or background click'
    },
    type: 'checkbox',
    value: false
  },
  itemShowNote: {
    label: {
      text: 'Show note content as'
    },
    type: 'select',
    value: 'content',
    options: ['content', 'modal', 'both']
  },
  itemShowYoutube: {
    label: {
      text: 'Show youtube player as'
    },
    type: 'select',
    value: 'modal',
    options: ['content', 'modal', 'both']
  },
  modalYoutubeWidth: {
    label: {
      text: 'Youtube player popup size'
    },
    prefix: '25%',
    suffix: '100%',
    type: 'range',
    min: 25,
    value: window.innerWidth < 992 ? 100 : 65,
    max: 100,
    step: 1
  }
});
Settings_defineProperty(Settings, "modelActions", Settings_MODEL_ACTIONS);
Settings_defineProperty(Settings, "modelBinds", [_bind_settings_dom]);
;// CONCATENATED MODULE: ./Themes/classic.json
var classic_namespaceObject = JSON.parse('{"theme":"classic","modalColorHeaderText":"#ffffff","modalColorHeaderTextOpacity":100,"modalColorHeaderBackground":"#00008b","modalColorHeaderBackgroundOpacity":100,"modalColorFooterText":"#ffffff","modalColorFooterTextOpacity":100,"modalColorFooterBackground":"#00008b","modalColorFooterBackgroundOpacity":100,"modalColorText":"#00008b","modalColorTextOpacity":100,"modalColorBackground":"#ffffff","modalColorBackgroundOpacity":100,"modalColorContentBackground":"#ADD8E6","modalColorContentBackgroundOpacity":100,"modalColorBackdrop":"#00008b","modalColorBackdropOpacity":80,"modalColorShadow":"#000000","modalColorShadowOpacity":100,"buttonColorBackgroundInteractive":"#ffffff","buttonColorBackgroundInteractiveOpacity":25,"inputColorBackground":"#ffffff","inputColorBackgroundOpacity":100,"errorColorText":"#ffffff","errorColorTextOpacity":100,"errorColorBackground":"#B22222","errorColorBackgroundOpacity":100,"errorColorShadow":"#000000","errorColorShadowOpacity":100,"tooltipColorText":"#000000","tooltipColorTextOpacity":100,"tooltipColorBackground":"#FFD700","tooltipColorBackgroundOpacity":100,"tooltipColorShadow":"#000000","tooltipColorShadowOpacity":100,"viewColorBackground":"#F5F5F5","viewColorBackgroundOpacity":100,"contentColorSpacer":"#FFFFFF","contentColorSpacerOpacity":100,"boardColorBackground":"#000000","boardColorBackgroundOpacity":10,"boardColorNavText":"#ffffff","boardColorNavTextOpacity":100,"boardColorNavBackground":"#00008b","boardColorNavBackgroundOpacity":100,"groupColorBackground":"#ADD8E6","groupColorBackgroundOpacity":100,"groupColorNavText":"#ffffff","groupColorNavTextOpacity":100,"groupColorNavBackground":"#0000CD","groupColorNavBackgroundOpacity":100,"groupColorNavBackgroundMarked":"#8B0000","groupColorNavBackgroundMarkedOpacity":100,"groupColorNavBackgroundCompleted":"#006400","groupColorNavBackgroundCompletedOpacity":100,"itemColorText":"#000000","itemColorTextOpacity":100,"itemColorBackground":"#F5F5F5","itemColorBackgroundOpacity":100,"itemColorNavText":"#ffffff","itemColorNavTextOpacity":100,"itemColorNavBackground":"#B22222","itemColorNavBackgroundOpacity":100,"itemColorNavBackgroundMarked":"#228B22","itemColorNavBackgroundMarkedOpacity":100}');
var Themes_classic_namespaceObject = /*#__PURE__*/__webpack_require__.t(classic_namespaceObject, 2);
;// CONCATENATED MODULE: ./Classes/Models/Theme.js
function Theme_typeof(o) { "@babel/helpers - typeof"; return Theme_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Theme_typeof(o); }
function Theme_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Theme_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Theme_toPropertyKey(descriptor.key), descriptor); } }
function Theme_createClass(Constructor, protoProps, staticProps) { if (protoProps) Theme_defineProperties(Constructor.prototype, protoProps); if (staticProps) Theme_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Theme_callSuper(t, o, e) { return o = Theme_getPrototypeOf(o), Theme_possibleConstructorReturn(t, Theme_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Theme_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Theme_possibleConstructorReturn(self, call) { if (call && (Theme_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Theme_assertThisInitialized(self); }
function Theme_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Theme_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Theme_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Theme_getPrototypeOf(o) { Theme_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Theme_getPrototypeOf(o); }
function Theme_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Theme_setPrototypeOf(subClass, superClass); }
function Theme_setPrototypeOf(o, p) { Theme_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Theme_setPrototypeOf(o, p); }
function Theme_defineProperty(obj, key, value) { key = Theme_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Theme_toPropertyKey(t) { var i = Theme_toPrimitive(t, "string"); return "symbol" == Theme_typeof(i) ? i : i + ""; }
function Theme_toPrimitive(t, r) { if ("object" != Theme_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Theme_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Theme_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Theme_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Theme_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Theme_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Theme_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Theme_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Theme_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Theme_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Requires
 */




/**
 * Prebuilt themes
 */
var AVAILABLE_THEMES = {
  classic: Themes_classic_namespaceObject
};

/**
 * Bind model
 * @param {Object} params - Bind params
 * @return {void}
 */
function _bind_theme_dom(params) {
  // Reapply current theme when closed with cancel
  params.dom.addEventListener('modal.hidden', function (event) {
    if (!event.detail.target.confirmed) {
      params.model.constructor.app.theme.applyTheme();
    }
  });

  // Bind color selection
  var colors = params.dom.querySelectorAll(['[type="color"]', '[type="range"]'].join(', '));
  var opacity = 'Opacity';
  var _loop = function _loop() {
    var input = colors[i];
    input.addEventListener('change', function () {
      var prop = input.getAttribute('name');
      if (prop.substring(prop.length - opacity.length) === opacity) prop = prop.substring(0, prop.length - opacity.length);
      var color_input = params.dom.querySelector("[name=\"".concat(prop, "\"]"));
      var opacity_input = params.dom.querySelector("[name=\"".concat(prop).concat(opacity, "\"]"));
      var color = hex2rgb(color_input.value, round_round(opacity_input.value / 100));
      document.documentElement.style.setProperty("--".concat(strCamel2dash(prop)), color);
    });
  };
  for (var i = 0; i < colors.length; i++) {
    _loop();
  }

  // Bind theme select
  var select_theme = params.dom.querySelector('[name="theme"]');

  /**
   * Update theme form
   * @param {string} theme - Theme name
   * @param {boolean} init - Init call
   * @return {void}
   */
  var update_theme_form = function update_theme_form(theme) {
    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var is_custom = theme === 'custom';
    var inputs = params.dom.querySelectorAll('.ui-input--color, .ui-input--range');
    for (var _i = 0; _i < inputs.length; _i++) {
      inputs[_i].style.display = is_custom ? '' : 'none';
      if (!init && !is_custom) {
        var field = inputs[_i].querySelector('input');
        if (AVAILABLE_THEMES[theme] && typeof AVAILABLE_THEMES[theme][field.name] !== 'undefined') {
          field.value = AVAILABLE_THEMES[theme][field.name];
          field.dispatchEvent(new CustomEvent('change'));
        }
      }
    }
  };
  select_theme.addEventListener('change', function () {
    update_theme_form(select_theme.value);
  });
  update_theme_form(select_theme.value, true);
}
var Theme_MODEL_ACTIONS = {
  'theme.reset': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.resetTheme();
  }]],
  'theme.apply': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.importTheme();
  }]],
  'theme.copy': [['click', ( /*#__PURE__*/function () {
    var _ref = Theme_asyncToGenerator( /*#__PURE__*/Theme_regeneratorRuntime().mark(function _callee(event, params) {
      var data, success, title, content;
      return Theme_regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            event.preventDefault();
            data = params.model.data;
            delete data.id;
            _context.next = 5;
            return copyToClipboard(JSON.stringify(data));
          case 5:
            success = _context.sent;
            title = 'Copied to clipboard';
            content = '<div class="ui-text"><p>The theme JSON was copied to your clipboard,<br />' + 'Press <q>ctrl/cmd + v</q> to paste into any text input or editor.</p></div>';
            if (success) params.model.constructor.app.showAlertModal(title, content);
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }())]]
};

/**
 * Theme
 * @class
 * @extends Model
 */
var Theme = /*#__PURE__*/function (_Model) {
  function Theme() {
    Theme_classCallCheck(this, Theme);
    return Theme_callSuper(this, Theme, arguments);
  }
  Theme_inherits(Theme, _Model);
  return Theme_createClass(Theme, [{
    key: "applyTheme",
    value:
    /**
     * Apply theme vars
     * @return {void}
     */
    function applyTheme() {
      var props = ['modalColorHeaderText', 'modalColorHeaderBackground', 'modalColorFooterText', 'modalColorFooterBackground', 'modalColorText', 'modalColorBackground', 'modalColorContentBackground', 'modalColorBackdrop', 'modalColorShadow', 'buttonColorBackgroundInteractive', 'inputColorBackground', 'errorColorText', 'errorColorBackground', 'errorColorShadow', 'tooltipColorText', 'tooltipColorBackground', 'tooltipColorShadow', 'viewColorBackground', 'contentColorSpacer', 'boardColorBackground', 'boardColorNavText', 'boardColorNavBackground', 'groupColorBackground', 'groupColorNavText', 'groupColorNavBackground', 'groupColorNavBackgroundMarked', 'groupColorNavBackgroundCompleted', 'itemColorText', 'itemColorBackground', 'itemColorNavText', 'itemColorNavBackground', 'itemColorNavBackgroundMarked'];
      for (var i = 0; i < props.length; i++) {
        var prop = props[i];
        var color = hex2rgb(this._get(prop), round_round(this._get("".concat(prop, "Opacity")) / 100));
        document.documentElement.style.setProperty("--".concat(strCamel2dash(prop)), color);
      }
    }
  }], [{
    key: "modalRender",
    value:
    /**
     * Model modal render additions
     * @param {Object} modal - Modal render data
     * @return {void}
     */
    function modalRender(modal) {
      // Import/export
      modal.as['header.controls.custom'] = ['<button class="ui-button ui-button--icon ui-button--hide-label-m"' + ' data-action="theme.apply" data-modal="ctrl:close" type="button">' + '<span class="ui-icon" data-icon="action-import"><span></span></span>' + '<span class="ui-button__label">Import</span>' + '</button>', '<button class="ui-button ui-button--icon ui-button--hide-label-m"' + ' data-action="theme.copy" type="button">' + '<span class="ui-icon" data-icon="action-export"><span></span></span>' + '<span class="ui-button__label">Export</span>' + '</button>'];

      // Reset button
      modal.as['footer.controls.before'] = ['<button class="ui-button ui-button--icon ui-button--hide-label-m"' + ' data-action="theme.reset" data-modal="ctrl:close" type="button">' + '<span class="ui-icon" data-icon="update"><span></span></span>' + '<span class="ui-button__label">Reset</span>' + '</button>'];
    }
  }]);
}(Model);
Theme_defineProperty(Theme, "modelType", 'theme');
Theme_defineProperty(Theme, "modelFields", {
  theme: {
    label: {
      text: 'Select theme'
    },
    type: 'select',
    value: 'classic',
    options: ['custom', 'classic']
  },
  modalColorHeaderText: {
    type: 'color',
    value: '#ffffff'
  },
  modalColorHeaderTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  modalColorHeaderBackground: {
    type: 'color',
    value: '#00008b'
  },
  modalColorHeaderBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  modalColorFooterText: {
    type: 'color',
    value: '#ffffff'
  },
  modalColorFooterTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  modalColorFooterBackground: {
    type: 'color',
    value: '#00008b'
  },
  modalColorFooterBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  modalColorText: {
    type: 'color',
    value: '#00008b'
  },
  modalColorTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  modalColorBackground: {
    type: 'color',
    value: '#ffffff'
  },
  modalColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  modalColorContentBackground: {
    type: 'color',
    value: '#ADD8E6'
  },
  modalColorContentBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  modalColorBackdrop: {
    type: 'color',
    value: '#00008b'
  },
  modalColorBackdropOpacity: {
    type: 'range',
    min: 0,
    value: 80,
    max: 100,
    step: 1
  },
  modalColorShadow: {
    type: 'color',
    value: '#000000'
  },
  modalColorShadowOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  buttonColorBackgroundInteractive: {
    type: 'color',
    value: '#ffffff'
  },
  buttonColorBackgroundInteractiveOpacity: {
    type: 'range',
    min: 0,
    value: 25,
    max: 100,
    step: 1
  },
  inputColorBackground: {
    type: 'color',
    value: '#ffffff'
  },
  inputColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  errorColorText: {
    type: 'color',
    value: '#ffffff'
  },
  errorColorTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  errorColorBackground: {
    type: 'color',
    value: '#B22222'
  },
  errorColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  errorColorShadow: {
    type: 'color',
    value: '#000000'
  },
  errorColorShadowOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  tooltipColorText: {
    type: 'color',
    value: '#000000'
  },
  tooltipColorTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  tooltipColorBackground: {
    type: 'color',
    value: '#FFD700'
  },
  tooltipColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  tooltipColorShadow: {
    type: 'color',
    value: '#000000'
  },
  tooltipColorShadowOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  viewColorBackground: {
    type: 'color',
    value: '#F5F5F5'
  },
  viewColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  contentColorSpacer: {
    type: 'color',
    value: '#FFFFFF'
  },
  contentColorSpacerOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  boardColorBackground: {
    type: 'color',
    value: '#000000'
  },
  boardColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 10,
    max: 100,
    step: 1
  },
  boardColorNavText: {
    type: 'color',
    value: '#ffffff'
  },
  boardColorNavTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  boardColorNavBackground: {
    type: 'color',
    value: '#00008b'
  },
  boardColorNavBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  groupColorBackground: {
    type: 'color',
    value: '#ADD8E6'
  },
  groupColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  groupColorNavText: {
    type: 'color',
    value: '#ffffff'
  },
  groupColorNavTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  groupColorNavBackground: {
    type: 'color',
    value: '#0000CD'
  },
  groupColorNavBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  groupColorNavBackgroundMarked: {
    type: 'color',
    value: '#8B0000'
  },
  groupColorNavBackgroundMarkedOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  groupColorNavBackgroundCompleted: {
    type: 'color',
    value: '#006400'
  },
  groupColorNavBackgroundCompletedOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  itemColorText: {
    type: 'color',
    value: '#000000'
  },
  itemColorTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  itemColorBackground: {
    type: 'color',
    value: '#F5F5F5'
  },
  itemColorBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  itemColorNavText: {
    type: 'color',
    value: '#ffffff'
  },
  itemColorNavTextOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  itemColorNavBackground: {
    type: 'color',
    value: '#B22222'
  },
  itemColorNavBackgroundOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  },
  itemColorNavBackgroundMarked: {
    type: 'color',
    value: '#228B22'
  },
  itemColorNavBackgroundMarkedOpacity: {
    type: 'range',
    min: 0,
    value: 100,
    max: 100,
    step: 1
  }
});
Theme_defineProperty(Theme, "modelActions", Theme_MODEL_ACTIONS);
Theme_defineProperty(Theme, "modelBinds", [_bind_theme_dom]);
;// CONCATENATED MODULE: ./Classes/Models/Board.js
function Board_typeof(o) { "@babel/helpers - typeof"; return Board_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Board_typeof(o); }
function Board_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Board_toPropertyKey(descriptor.key), descriptor); } }
function Board_createClass(Constructor, protoProps, staticProps) { if (protoProps) Board_defineProperties(Constructor.prototype, protoProps); if (staticProps) Board_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Board_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Board_callSuper(t, o, e) { return o = Board_getPrototypeOf(o), Board_possibleConstructorReturn(t, Board_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Board_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Board_possibleConstructorReturn(self, call) { if (call && (Board_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Board_assertThisInitialized(self); }
function Board_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Board_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Board_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Board_getPrototypeOf(o) { Board_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Board_getPrototypeOf(o); }
function Board_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Board_setPrototypeOf(subClass, superClass); }
function Board_setPrototypeOf(o, p) { Board_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Board_setPrototypeOf(o, p); }
function Board_defineProperty(obj, key, value) { key = Board_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Board_toPropertyKey(t) { var i = Board_toPrimitive(t, "string"); return "symbol" == Board_typeof(i) ? i : i + ""; }
function Board_toPrimitive(t, r) { if ("object" != Board_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Board_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Requires
 */


var Board_MODEL_ACTIONS = {
  'board.toggle': [['click', function (event, params) {
    event.preventDefault();
    if (params.model.isOpen()) {
      params.model.actionClose();
    } else {
      params.model.actionOpen();
    }
  }]],
  'board.open': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionOpen();
  }]],
  'board.close': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionClose();
  }]],
  'board.maximize': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionMaximize();
  }]],
  'board.minimize': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionMinimize();
  }]],
  'board.edit': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.showModelModal('board', params.model, 'edit');
  }]],
  'board.delete': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.view.deleteModel(params.model);
  }]],
  'group.create': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.showModelModal('group', null, 'create', params.model);
  }]],
  'board.up': [['click', debounce(function (event, params) {
    params.model.constructor.app.view.updateIndexOrder(params.model.parent);
  }, 750, function (event, params) {
    event.preventDefault();
    var dom = params.model.dom;
    if (!dom.previousElementSibling) return true;
    dom.parentElement.insertBefore(dom, dom.previousElementSibling);
  })]],
  'board.down': [['click', debounce(function (event, params) {
    params.model.constructor.app.view.updateIndexOrder(params.model.parent);
  }, 750, function (event, params) {
    event.preventDefault();
    var dom = params.model.dom;
    if (!dom.nextElementSibling) return true;
    appendAfter(dom, dom.nextElementSibling);
  })]]
};

/**
 * Board
 * @class
 * @extends Model
 */
var Board = /*#__PURE__*/function (_Model) {
  function Board() {
    Board_classCallCheck(this, Board);
    return Board_callSuper(this, Board, arguments);
  }
  Board_inherits(Board, _Model);
  return Board_createClass(Board);
}(Model);
Board_defineProperty(Board, "modelType", 'board');
Board_defineProperty(Board, "childrenType", 'group');
Board_defineProperty(Board, "childrenHost", '.board__children');
Board_defineProperty(Board, "modelFields", {
  label: {
    type: 'text',
    max: 60,
    required: true
  }
});
Board_defineProperty(Board, "modelActions", Board_MODEL_ACTIONS);
;// CONCATENATED MODULE: ./Classes/Models/Group.js
function Group_typeof(o) { "@babel/helpers - typeof"; return Group_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Group_typeof(o); }
function Group_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Group_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Group_toPropertyKey(descriptor.key), descriptor); } }
function Group_createClass(Constructor, protoProps, staticProps) { if (protoProps) Group_defineProperties(Constructor.prototype, protoProps); if (staticProps) Group_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Group_callSuper(t, o, e) { return o = Group_getPrototypeOf(o), Group_possibleConstructorReturn(t, Group_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Group_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Group_possibleConstructorReturn(self, call) { if (call && (Group_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Group_assertThisInitialized(self); }
function Group_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Group_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Group_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Group_get() { if (typeof Reflect !== "undefined" && Reflect.get) { Group_get = Reflect.get.bind(); } else { Group_get = function _get(target, property, receiver) { var base = Group_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return Group_get.apply(this, arguments); }
function Group_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Group_getPrototypeOf(object); if (object === null) break; } return object; }
function Group_getPrototypeOf(o) { Group_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Group_getPrototypeOf(o); }
function Group_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Group_setPrototypeOf(subClass, superClass); }
function Group_setPrototypeOf(o, p) { Group_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Group_setPrototypeOf(o, p); }
function Group_defineProperty(obj, key, value) { key = Group_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function Group_toPropertyKey(t) { var i = Group_toPrimitive(t, "string"); return "symbol" == Group_typeof(i) ? i : i + ""; }
function Group_toPrimitive(t, r) { if ("object" != Group_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Group_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Group_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Group_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Group_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Group_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Group_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Group_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Group_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Group_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Requires
 */


var Group_MODEL_ACTIONS = {
  'group.toggle': [['click', function (event, params) {
    event.preventDefault();
    if (params.model.isOpen()) {
      params.model.actionClose();
    } else {
      params.model.actionOpen();
    }
  }]],
  'group.open': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionOpen();
  }]],
  'group.close': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionClose();
  }]],
  'group.maximize': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionMaximize();
  }]],
  'group.minimize': [['click', function (event, params) {
    event.preventDefault();
    params.model.actionMinimize();
  }]],
  'group.marked': [['click', ( /*#__PURE__*/function () {
    var _ref = Group_asyncToGenerator( /*#__PURE__*/Group_regeneratorRuntime().mark(function _callee(event, params) {
      return Group_regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            event.preventDefault();
            params.model.dispatchEvent('group.mark');
            params.model.marked = true;
            _context.next = 5;
            return params.model.save();
          case 5:
            params.model.dom.classList.add('group--marked');
            afterPaint(function () {
              params.model.dispatchEvent('group.marked');
            });
          case 7:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }())]],
  'group.unmarked': [['click', ( /*#__PURE__*/function () {
    var _ref2 = Group_asyncToGenerator( /*#__PURE__*/Group_regeneratorRuntime().mark(function _callee2(event, params) {
      return Group_regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            event.preventDefault();
            params.model.dispatchEvent('group.unmark');
            params.model.marked = false;
            _context2.next = 5;
            return params.model.save();
          case 5:
            params.model.dom.classList.remove('group--marked');
            afterPaint(function () {
              params.model.dispatchEvent('group.unmarked');
            });
          case 7:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }())]],
  'group.edit': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.showModelModal('group', params.model, 'edit');
  }]],
  'group.delete': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.view.deleteModel(params.model);
  }]],
  'item.create': [['click', function (event, params) {
    event.preventDefault();
    params.model.constructor.app.showModelModal('item', null, 'create', params.model);
  }]],
  'group.up': [['click', debounce(function (event, params) {
    params.model.constructor.app.view.updateIndexOrder(params.model.parent);
  }, 750, function (event, params) {
    event.preventDefault();
    var dom = params.model.dom;
    if (!dom.previousElementSibling) return true;
    dom.parentElement.insertBefore(dom, dom.previousElementSibling);
  })]],
  'group.down': [['click', debounce(function (event, params) {
    params.model.constructor.app.view.updateIndexOrder(params.model.parent);
  }, 750, function (event, params) {
    event.preventDefault();
    var dom = params.model.dom;
    if (!dom.nextElementSibling) return true;
    appendAfter(dom, dom.nextElementSibling);
  })]]
};

/**
 * Group
 * @class
 * @extends Model
 */
var Group = /*#__PURE__*/function (_Model) {
  function Group() {
    Group_classCallCheck(this, Group);
    return Group_callSuper(this, Group, arguments);
  }
  Group_inherits(Group, _Model);
  return Group_createClass(Group, [{
    key: "updateAsync",
    value: (
    /**
     * Model async update
     * @return {Promise<void>} - Returns nothing
     */
    function () {
      var _updateAsync = Group_asyncToGenerator( /*#__PURE__*/Group_regeneratorRuntime().mark(function _callee3() {
        var items, marked, i, item;
        return Group_regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return this.constructor.app.view.getModels('item', null, {
                rel: this.id
              });
            case 2:
              items = _context3.sent;
              if (items.length) {
                _context3.next = 6;
                break;
              }
              this.stats = {
                itemUnmarked: 0,
                itemMarked: 0,
                noAsync: true
              };
              return _context3.abrupt("return");
            case 6:
              _context3.next = 8;
              return this.constructor.app.view.loadModelsParent(items);
            case 8:
              marked = 0;
              for (i = 0; i < items.length; i++) {
                item = items[i];
                if (item.marked) marked++;
              }
              if (this.dom) this.dom.classList[items.length - marked > 0 ? 'remove' : 'add']('group--completed');
              this.stats = {
                itemUnmarked: items.length - marked,
                itemMarked: marked,
                noAsync: true
              };
            case 12:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function updateAsync() {
        return _updateAsync.apply(this, arguments);
      }
      return updateAsync;
    }()
    /**
     * Update marked state
     * @param {Object} stats - Stats object
     * @return {void}
     */
    )
  }, {
    key: "update",
    value: function update() {
      var stats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.dom.classList[this.marked ? 'add' : 'remove']('group--marked');
      Group_get(Group_getPrototypeOf(Group.prototype), "update", this).call(this, stats);
    }
  }]);
}(Model);
Group_defineProperty(Group, "modelType", 'group');
Group_defineProperty(Group, "modelParentType", 'board');
Group_defineProperty(Group, "childrenType", 'item');
Group_defineProperty(Group, "childrenHost", '.group__children');
Group_defineProperty(Group, "modelFields", {
  rel: {
    type: 'hidden',
    required: true
  },
  label: {
    type: 'text',
    max: 60,
    required: true
  },
  marked: {
    label: {
      text: 'Show unmarked items only'
    },
    type: 'checkbox',
    value: true
  }
});
Group_defineProperty(Group, "modelActions", Group_MODEL_ACTIONS);
;// CONCATENATED MODULE: ./Classes/View.js
function View_typeof(o) { "@babel/helpers - typeof"; return View_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, View_typeof(o); }
function View_slicedToArray(arr, i) { return View_arrayWithHoles(arr) || View_iterableToArrayLimit(arr, i) || View_unsupportedIterableToArray(arr, i) || View_nonIterableRest(); }
function View_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function View_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return View_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return View_arrayLikeToArray(o, minLen); }
function View_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function View_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function View_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function View_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ View_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == View_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(View_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function View_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function View_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { View_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { View_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function View_classPrivateFieldInitSpec(obj, privateMap, value) { View_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function View_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function View_defineProperty(obj, key, value) { key = View_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function View_classPrivateFieldSet(s, a, r) { return s.set(View_assertClassBrand(s, a), r), r; }
function View_classPrivateFieldGet(s, a) { return s.get(View_assertClassBrand(s, a)); }
function View_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function View_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, View_toPropertyKey(descriptor.key), descriptor); } }
function View_createClass(Constructor, protoProps, staticProps) { if (protoProps) View_defineProperties(Constructor.prototype, protoProps); if (staticProps) View_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function View_toPropertyKey(t) { var i = View_toPrimitive(t, "string"); return "symbol" == View_typeof(i) ? i : i + ""; }
function View_toPrimitive(t, r) { if ("object" != View_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != View_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function View_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function View_callSuper(t, o, e) { return o = View_getPrototypeOf(o), View_possibleConstructorReturn(t, View_isNativeReflectConstruct() ? Reflect.construct(o, e || [], View_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function View_possibleConstructorReturn(self, call) { if (call && (View_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return View_assertThisInitialized(self); }
function View_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function View_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (View_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function View_getPrototypeOf(o) { View_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return View_getPrototypeOf(o); }
function View_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) View_setPrototypeOf(subClass, superClass); }
function View_setPrototypeOf(o, p) { View_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return View_setPrototypeOf(o, p); }
/**
 * Requires
 */




/**
 * View exception
 * @class
 * @extends Exception
 */
var ViewException = /*#__PURE__*/function (_Exception) {
  function ViewException() {
    View_classCallCheck(this, ViewException);
    return View_callSuper(this, ViewException, arguments);
  }
  View_inherits(ViewException, _Exception);
  return View_createClass(ViewException);
}(Exception);
/**
 * View
 * @class
 * @extends EventDispatcher
 */
var View_loaded = /*#__PURE__*/new WeakMap();
var View_data = /*#__PURE__*/new WeakMap();
var View_stats = /*#__PURE__*/new WeakMap();
var _bound = /*#__PURE__*/new WeakMap();
var View = /*#__PURE__*/function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {null|Application|EventDispatcher} app - Parent instance
   * @param {null|Console} debug - Debug mode
   */
  function View(app, debug) {
    var _this;
    View_classCallCheck(this, View);
    _this = View_callSuper(this, View, [null, app, debug]);

    // Bind events
    /**
     * Loaded models status
     * @private
     * @type {Object}
     */
    View_classPrivateFieldInitSpec(_this, View_loaded, {});
    /**
     * Loaded models
     * @private
     * @type {Object}
     */
    View_classPrivateFieldInitSpec(_this, View_data, {});
    /**
     * Stats data
     * @private
     * @type {Object}
     */
    View_classPrivateFieldInitSpec(_this, View_stats, {});
    /**
     * Bind status
     * @private
     * @type {boolean}
     */
    View_classPrivateFieldInitSpec(_this, _bound, false);
    try {
      _this.bind();
    } catch (e) {
      throw new ViewException('Failed to bind view', e);
    }
    return _this;
  }

  /**
   * Getter: stats
   * @return {Object} - Stats object
   */
  View_inherits(View, _EventDispatcher);
  return View_createClass(View, [{
    key: "stats",
    get: function get() {
      return View_classPrivateFieldGet(View_stats, this);
    }

    /**
     * Setter: stats
     * @param {Object} value - Stats obejct
     * @return {void}
     */,
    set: function set(value) {
      mergeObject_mergeObject(View_classPrivateFieldGet(View_stats, this), value, true, true);
    }

    /**
     * Update placeholder for model routines
     * @return {null} - Does nothing
     */
  }, {
    key: "update",
    value: function update() {
      return null;
    }

    /**
     * Getter: dom
     * @return {HTMLElement} - View dom
     */
  }, {
    key: "dom",
    get: function get() {
      return document.getElementById('view');
    }

    /**
     * Getter: children
     * @return {Element} - View children container
     */
  }, {
    key: "children",
    get: function get() {
      return this.dom.querySelector('.boards__list');
    }

    /**
     * Bind view events
     * @return {void}
     */
  }, {
    key: "bind",
    value: function bind() {
      var _this2 = this;
      if (View_classPrivateFieldGet(_bound, this)) return;

      // Render initial boards
      this.parent.addEventListener('data.ready', /*#__PURE__*/View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee() {
        var boards;
        return View_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this2.getModels('board', _this2);
            case 2:
              boards = _context.sent;
              _this2.renderModels(boards);
              _this2.bindModels(boards);
              if (boards && boards.length === 1) {
                _this2.parent.selectAction('board.open', boards[0].dom)[0].click();
                _this2.parent.selectAction('board.maximize', boards[0].dom)[0].click();
              }
            case 6:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));
      this.addEventListener('board.open', /*#__PURE__*/function () {
        var _ref2 = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee2(event) {
          var groups;
          return View_regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _this2.getModels('group', null, {
                  rel: event.detail.target.id
                });
              case 2:
                groups = _context2.sent;
                event.detail.target.stats = {
                  group: groups.length
                };
                _context2.next = 6;
                return _this2.loadModelsParent(groups);
              case 6:
                _this2.renderModels(groups);
                _this2.bindModels(groups);
              case 8:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }));
        return function (_x) {
          return _ref2.apply(this, arguments);
        };
      }());
      this.addEventListener('board.maximized', function (event) {
        var context = event.detail.target.parent.children.closest('[data-scroller]');
        _this2.parent.scrollTo(event.detail.target.dom, null, 0, context);
      });
      this.addEventListener('board.close', function (event) {
        event.detail.target.children.innerHTML = '';
      });
      this.addEventListener('group.open', /*#__PURE__*/function () {
        var _ref3 = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee3(event) {
          var items;
          return View_regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _this2.getModels('item', null, {
                  rel: event.detail.target.id
                });
              case 2:
                items = _context3.sent;
                event.detail.target.stats = {
                  item: items.length
                };
                _context3.next = 6;
                return _this2.loadModelsParent(items);
              case 6:
                _this2.renderModels(items);
                _this2.bindModels(items);
              case 8:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }));
        return function (_x2) {
          return _ref3.apply(this, arguments);
        };
      }());
      this.addEventListener('group.maximized', function (event) {
        var context = event.detail.target.parent.children.closest('[data-scroller]');
        _this2.parent.scrollTo(event.detail.target.dom, null, 0, context);
      });
      this.addEventListener('group.close', function (event) {
        event.detail.target.children.innerHTML = '';
      });
      this.addEventListener('item.open', function (event) {
        var model = event.detail.target;
        model.render({
          template: 'item' + ucfirst(model.variant),
          append: model.children
        });
      });
      this.addEventListener('item.close', function (event) {
        event.detail.target.children.innerHTML = '';
      });
      this.addEventListener('item.modal', function (event) {
        var model = event.detail.target;
        var tmpl = 'item' + ucfirst(model.variant);
        var title = "".concat(ucfirst(model.variant), " <strong>-</strong> ").concat(model.parent.label, " <strong>-</strong> ").concat(model.label);
        var content = '<div class="ui-modal__dialog-children" data-children></div>';
        _this2.parent.showAlertModal(title, content, function () {
          model.clearRender(tmpl);
        }, function (render) {
          render.data.classes = ["ui-modal--".concat(model.type), "ui-modal--".concat(model.type, "-").concat(model.variant)];
          render.data.footer = null;
        }, function (dom) {
          model.render({
            template: tmpl,
            append: dom.querySelector('[data-children]')
          });
        });
      });
      View_classPrivateFieldSet(_bound, this, true);
    }

    /**
     * Load model parent
     * @param {Model[]} models - List of models
     * @return {Promise<void>} - Returns nothing
     */
  }, {
    key: "loadModelsParent",
    value: (function () {
      var _loadModelsParent = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee4(models) {
        var i, model, parent;
        return View_regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              if (!(models instanceof Array)) models = [models];
              i = 0;
            case 2:
              if (!(i < models.length)) {
                _context4.next = 12;
                break;
              }
              model = models[i];
              if (model.parent) {
                _context4.next = 9;
                break;
              }
              _context4.next = 7;
              return this.getModels(model.constructor.modelParentType, null, {
                id: model.rel
              });
            case 7:
              parent = _context4.sent;
              model.overrideParent(parent[0]);
            case 9:
              i++;
              _context4.next = 2;
              break;
            case 12:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function loadModelsParent(_x3) {
        return _loadModelsParent.apply(this, arguments);
      }
      return loadModelsParent;
    }()
    /**
     * Get models
     * @param {string} modelType - Model type
     * @param {null|Model|View} parent - Model parent
     * @param {Object} query - Query object
     * @return {Promise<Model[]>} - Selected models
     */
    )
  }, {
    key: "getModels",
    value: (function () {
      var _getModels = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee5(modelType) {
        var _selected;
        var parent,
          query,
          selected,
          conditions,
          require,
          _args5 = arguments;
        return View_regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              parent = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : null;
              query = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : null;
              if (View_classPrivateFieldGet(View_loaded, this)[modelType]) {
                _context5.next = 7;
                break;
              }
              _context5.next = 5;
              return this.parent.storage.typeList(modelType, parent);
            case 5:
              View_classPrivateFieldGet(View_data, this)[modelType] = _context5.sent;
              View_classPrivateFieldGet(View_loaded, this)[modelType] = true;
            case 7:
              selected = null;
              if (query) {
                conditions = Object.entries(query);
                require = conditions.length;
                selected = View_classPrivateFieldGet(View_data, this)[modelType].filter(function (model) {
                  var matches = 0;
                  for (var i = 0; i < conditions.length; i++) {
                    var _conditions$i = View_slicedToArray(conditions[i], 2),
                      field = _conditions$i[0],
                      value = _conditions$i[1];
                    if (model[field] === value) matches++;
                  }
                  return matches === require;
                });
              }
              return _context5.abrupt("return", query ? (_selected = selected) !== null && _selected !== void 0 ? _selected : [] : View_classPrivateFieldGet(View_data, this)[modelType]);
            case 10:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function getModels(_x4) {
        return _getModels.apply(this, arguments);
      }
      return getModels;
    }()
    /**
     * Create model
     * @param {Function} Constructor - Model constructor
     * @param {null|Object} data - Model data
     * @param {null|Model} parentModel - Parent model
     * @param {null|string} importId - Import override id
     * @return {Promise<Model>} - Created model
     */
    )
  }, {
    key: "createModel",
    value: (function () {
      var _createModel = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee6(Constructor, data) {
        var _parentModel$children;
        var parentModel,
          importId,
          parent,
          model,
          _args6 = arguments;
        return View_regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              parentModel = _args6.length > 2 && _args6[2] !== undefined ? _args6[2] : null;
              importId = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : null;
              parent = {
                model: parentModel !== null && parentModel !== void 0 ? parentModel : this,
                dom: (_parentModel$children = parentModel === null || parentModel === void 0 ? void 0 : parentModel.children) !== null && _parentModel$children !== void 0 ? _parentModel$children : this.dom.list
              };
              model = new Constructor(data, parent.model, this.debug);
              if (importId) model.importId = importId;
              if (!importId) this.bindModels(model);
              if (!View_classPrivateFieldGet(View_data, this)[Constructor.modelType]) View_classPrivateFieldGet(View_data, this)[Constructor.modelType] = [];
              View_classPrivateFieldGet(View_data, this)[Constructor.modelType].push(model);
              _context6.next = 10;
              return model.save();
            case 10:
              return _context6.abrupt("return", model);
            case 11:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function createModel(_x5, _x6) {
        return _createModel.apply(this, arguments);
      }
      return createModel;
    }()
    /**
     * Update model
     * @param {Model} model - Model instance
     * @param {Object} data - Model data
     * @return {Promise<void>} - Returns nothing
     */
    )
  }, {
    key: "updateModel",
    value: (function () {
      var _updateModel = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee7(model, data) {
        return View_regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              model.assign(data);
              _context7.next = 3;
              return model.save();
            case 3:
            case "end":
              return _context7.stop();
          }
        }, _callee7);
      }));
      function updateModel(_x7, _x8) {
        return _updateModel.apply(this, arguments);
      }
      return updateModel;
    }()
    /**
     * Delete model
     * @param {Model} model - Model instance
     * @return {void}
     */
    )
  }, {
    key: "deleteModel",
    value: function deleteModel(model) {
      var _this3 = this;
      var title = "Delete ".concat(ucfirst(model.type));
      var content = "<div class=\"ui-text\"><p>Are you sure you want to delete <q>".concat(escapeHTML(model.label), "</q>?</p></div>");
      this.parent.showConfirmModal(title, content, function () {
        _this3.deleteModelStructure(model);
      });
    }

    /**
     * Delete actual model
     * @param {Model} model - Model instance
     * @return {Promise<void>} - Returns nothing
     */
  }, {
    key: "deleteRealModel",
    value: (function () {
      var _deleteRealModel = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee8(model) {
        var i;
        return View_regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              // Check if type exists
              // Type settings and theme may be undefined since they are only saved explicitly
              if (View_classPrivateFieldGet(View_data, this)[model.type]) {
                i = View_classPrivateFieldGet(View_data, this)[model.type].indexOf(model);
                if (i > -1) View_classPrivateFieldGet(View_data, this)[model.type].splice(i, 1);
              }
              _context8.next = 3;
              return model.delete();
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8, this);
      }));
      function deleteRealModel(_x9) {
        return _deleteRealModel.apply(this, arguments);
      }
      return deleteRealModel;
    }()
    /**
     * Delete model structure
     * @param {Model} model - Model instance
     * @return {Promise<void>} - Returns nothing
     */
    )
  }, {
    key: "deleteModelStructure",
    value: (function () {
      var _deleteModelStructure = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee9(model) {
        return View_regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              if (!model.constructor.childrenType) {
                _context9.next = 3;
                break;
              }
              _context9.next = 3;
              return this.deleteChildrenFrom(model);
            case 3:
              _context9.next = 5;
              return this.deleteRealModel(model);
            case 5:
            case "end":
              return _context9.stop();
          }
        }, _callee9, this);
      }));
      function deleteModelStructure(_x10) {
        return _deleteModelStructure.apply(this, arguments);
      }
      return deleteModelStructure;
    }()
    /**
     * Delete model children
     * @param {Model} model - Model instance
     * @return {Promise<void>} - Returns nothing
     */
    )
  }, {
    key: "deleteChildrenFrom",
    value: (function () {
      var _deleteChildrenFrom = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee10(model) {
        var items, i;
        return View_regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return this.getModels(model.constructor.childrenType, null, {
                rel: model.id
              });
            case 2:
              items = _context10.sent;
              i = 0;
            case 4:
              if (!(i < items.length)) {
                _context10.next = 10;
                break;
              }
              _context10.next = 7;
              return this.deleteModelStructure(items[i]);
            case 7:
              i++;
              _context10.next = 4;
              break;
            case 10:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function deleteChildrenFrom(_x11) {
        return _deleteChildrenFrom.apply(this, arguments);
      }
      return deleteChildrenFrom;
    }()
    /**
     * Update index order
     * @param {Model} parent - Model instance
     * @return {Promise<void>} - Returns nothing
     */
    )
  }, {
    key: "updateIndexOrder",
    value: (function () {
      var _updateIndexOrder = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee11(parent) {
        var nodes, ordered_subset, i, index;
        return View_regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              nodes = parent.children.children;
              ordered_subset = [];
              for (i = 0; i < nodes.length; i++) {
                ordered_subset.push(nodes[i].id);
              }
              _context11.next = 5;
              return this.parent.storage.requireIndex(parent.constructor.childrenType);
            case 5:
              index = _context11.sent;
              _context11.next = 8;
              return index.reorder(ordered_subset);
            case 8:
            case "end":
              return _context11.stop();
          }
        }, _callee11, this);
      }));
      function updateIndexOrder(_x12) {
        return _updateIndexOrder.apply(this, arguments);
      }
      return updateIndexOrder;
    }()
    /**
     * Render models
     * @param {Model[]} models - List of model instances
     * @param {Object} params - Params object
     * @return {void}
     */
    )
  }, {
    key: "renderModels",
    value: function renderModels(models) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!(models instanceof Array)) models = [models];
      for (var i = 0; i < models.length; i++) {
        var model = models[i];
        model.render(cloneObject_cloneObject(params));
      }
    }

    /**
     * Refresh model dom
     * @param {Model[]} models - List of model instances
     * @return {void}
     */
  }, {
    key: "refreshModels",
    value: function refreshModels(models) {
      if (!(models instanceof Array)) models = [models];
      for (var i = 0; i < models.length; i++) {
        var model = models[i];
        model.update();
      }
    }

    /**
     * Remove models from dom
     * @param {Model[]} models - List of model instances
     * @return {void}
     */
  }, {
    key: "removeModels",
    value: function removeModels(models) {
      if (!(models instanceof Array)) models = [models];
      for (var i = 0; i < models.length; i++) {
        var model = models[i];
        model.dom.remove();
      }
    }

    /**
     * Bind models
     * @param {Model[]} models - List of model instances
     * @param {Object} params - Params object
     * @return {void}
     */
  }, {
    key: "bindModels",
    value: function bindModels(models) {
      var _this4 = this;
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      if (!(models instanceof Array)) models = [models];
      var _loop = function _loop() {
        var model = models[i];
        model.addEventListener('model.saved', function (event) {
          if (model !== event.detail.target) return;
          if (event.detail.created) {
            var _model$parent$stats$m;
            _this4.renderModels(model, params);
            var stats = {};
            stats[model.type] = ((_model$parent$stats$m = model.parent.stats[model.type]) !== null && _model$parent$stats$m !== void 0 ? _model$parent$stats$m : 0) + 1;
            model.parent.stats = stats;

            // Board model only
            if (model.type === 'board') {
              var openers = _this4.parent.selectAction('board.open', model.dom);
              if (openers.length) openers[0].click();
              afterPaint(function () {
                var creators = _this4.parent.selectAction('group.create', model.dom);
                if (creators.length) creators[0].focus();
              });
            }

            // Group model only
            if (model.type === 'group') {
              var _openers = _this4.parent.selectAction('group.open', model.dom);
              if (_openers.length) _openers[0].click();
              afterPaint(function () {
                var creators = _this4.parent.selectAction('item.create', model.dom);
                if (creators.length) creators[0].focus();
              });
            }
          } else {
            _this4.refreshModels(model);
          }
          model.parent.update();
        });
        model.addEventListener('model.deleted', function (event) {
          var _model$parent$stats$m2;
          if (model !== event.detail.target) return;
          var stats = {};
          stats[model.type] = ((_model$parent$stats$m2 = model.parent.stats[model.type]) !== null && _model$parent$stats$m2 !== void 0 ? _model$parent$stats$m2 : 1) - 1;
          model.parent.stats = stats;
          _this4.removeModels(model);
          model.parent.update();
        });
      };
      for (var i = 0; i < models.length; i++) {
        _loop();
      }
    }

    /**
     * Export data
     * @param {boolean} asBlob - As blob object
     * @return {Promise<Blob|Object>} - Data result
     */
  }, {
    key: "export",
    value: (function () {
      var _export2 = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee12() {
        var asBlob,
          board,
          group,
          item,
          data,
          json,
          _args12 = arguments;
        return View_regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              asBlob = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : true;
              _context12.next = 3;
              return this.getModels('board');
            case 3:
              board = _context12.sent;
              _context12.next = 6;
              return this.getModels('group');
            case 6:
              group = _context12.sent;
              _context12.next = 9;
              return this.getModels('item');
            case 9:
              item = _context12.sent;
              data = {
                board: board,
                group: group,
                item: item
              };
              json = JSON.stringify(data, function (key, value) {
                if (value instanceof Model) return value.data;
                if (isEmpty_isEmpty(value)) return;
                return value;
              });
              if (asBlob) {
                _context12.next = 14;
                break;
              }
              return _context12.abrupt("return", JSON.parse(json));
            case 14:
              return _context12.abrupt("return", new Blob([json], {
                type: 'application/json'
              }));
            case 15:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function _export() {
        return _export2.apply(this, arguments);
      }
      return _export;
    }()
    /**
     * Import data
     * @param {Object} data - Import data
     * @return {Promise<void>} - Returns nothing
     */
    )
  }, {
    key: "importData",
    value: (function () {
      var _importData = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee13(data) {
        var i, board_data, exists, model;
        return View_regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              i = 0;
            case 1:
              if (!(i < data.board.length)) {
                _context13.next = 24;
                break;
              }
              board_data = data.board[i];
              if (board_data.id) {
                _context13.next = 5;
                break;
              }
              return _context13.abrupt("continue", 21);
            case 5:
              _context13.next = 7;
              return this.getModels('board', null, {
                id: board_data.id
              });
            case 7:
              exists = _context13.sent;
              model = void 0;
              if (!exists.length) {
                _context13.next = 16;
                break;
              }
              model = exists.pop();
              model.assign(board_data);
              _context13.next = 14;
              return model.save(true);
            case 14:
              _context13.next = 19;
              break;
            case 16:
              _context13.next = 18;
              return this.createModel(Board, board_data, null, board_data.id);
            case 18:
              model = _context13.sent;
            case 19:
              _context13.next = 21;
              return this.importNested(data, model);
            case 21:
              i++;
              _context13.next = 1;
              break;
            case 24:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this);
      }));
      function importData(_x13) {
        return _importData.apply(this, arguments);
      }
      return importData;
    }()
    /**
     * Import nested models
     * @param {Object} data - Import data
     * @param {Model} parent - Parent model
     * @return {Promise<void>} - Returns nothing
     */
    )
  }, {
    key: "importNested",
    value: (function () {
      var _importNested = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee14(data, parent) {
        var type, i, nested_data, exists, model;
        return View_regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) switch (_context14.prev = _context14.next) {
            case 0:
              type = parent.constructor.childrenType;
              i = 0;
            case 2:
              if (!(i < data[type].length)) {
                _context14.next = 28;
                break;
              }
              nested_data = data[type][i];
              if (nested_data.id) {
                _context14.next = 6;
                break;
              }
              return _context14.abrupt("continue", 25);
            case 6:
              if (!(nested_data.rel !== parent.id)) {
                _context14.next = 8;
                break;
              }
              return _context14.abrupt("continue", 25);
            case 8:
              _context14.next = 10;
              return this.getModels(type, parent, {
                id: nested_data.id,
                rel: parent.id
              });
            case 10:
              exists = _context14.sent;
              model = void 0;
              if (!exists.length) {
                _context14.next = 19;
                break;
              }
              model = exists.pop();
              model.assign(nested_data);
              _context14.next = 17;
              return model.save(true);
            case 17:
              _context14.next = 22;
              break;
            case 19:
              _context14.next = 21;
              return this.createModel(this.parent.storage.models[type], nested_data, null, nested_data.id);
            case 21:
              model = _context14.sent;
            case 22:
              if (!model.constructor.childrenType) {
                _context14.next = 25;
                break;
              }
              _context14.next = 25;
              return this.importNested(data, model);
            case 25:
              i++;
              _context14.next = 2;
              break;
            case 28:
            case "end":
              return _context14.stop();
          }
        }, _callee14, this);
      }));
      function importNested(_x14, _x15) {
        return _importNested.apply(this, arguments);
      }
      return importNested;
    }()
    /**
     * Parse json data string
     * @param {string} str - JSON data string
     * @return {Promise<void>} - Returns nothing
     */
    )
  }, {
    key: "importJSONString",
    value: (function () {
      var _importJSONString = View_asyncToGenerator( /*#__PURE__*/View_regeneratorRuntime().mark(function _callee15(str) {
        var decoded, error, title, content, complete;
        return View_regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) switch (_context15.prev = _context15.next) {
            case 0:
              _context15.prev = 0;
              decoded = JSON.parse(str);
              if (!(!isPojo_isPojo(decoded) || !decoded.board || !(decoded.board instanceof Array) || decoded.group && !(decoded.group instanceof Array) || decoded.item && !(decoded.item instanceof Array))) {
                _context15.next = 4;
                break;
              }
              throw new Error('Invalid json format');
            case 4:
              _context15.next = 9;
              break;
            case 6:
              _context15.prev = 6;
              _context15.t0 = _context15["catch"](0);
              error = _context15.t0;
            case 9:
              if (error) {
                _context15.next = 18;
                break;
              }
              _context15.prev = 10;
              _context15.next = 13;
              return this.importData(decoded);
            case 13:
              _context15.next = 18;
              break;
            case 15:
              _context15.prev = 15;
              _context15.t1 = _context15["catch"](10);
              error = _context15.t1;
            case 18:
              complete = null;
              if (error) {
                title = 'JSON import error';
                content = "Failed to import: ".concat(error.toString());
              } else {
                title = 'JSON import complete';
                content = 'Imported all connected data. The application will reload automatically.';
                complete = function complete() {
                  location.reload();
                };
              }
              this.parent.showAlertModal(title, content, complete);
            case 21:
            case "end":
              return _context15.stop();
          }
        }, _callee15, this, [[0, 6], [10, 15]]);
      }));
      function importJSONString(_x16) {
        return _importJSONString.apply(this, arguments);
      }
      return importJSONString;
    }())
  }]);
}(EventDispatcher_EventDispatcher);
/**
 * Child model type
 * @public
 * @static
 * @type {string}
 */
View_defineProperty(View, "childrenType", 'board');
;// CONCATENATED MODULE: ./Classes/Templates/BoardTemplate.js
function BoardTemplate_typeof(o) { "@babel/helpers - typeof"; return BoardTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, BoardTemplate_typeof(o); }
function BoardTemplate_defineProperty(obj, key, value) { key = BoardTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function BoardTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, BoardTemplate_toPropertyKey(descriptor.key), descriptor); } }
function BoardTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) BoardTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) BoardTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function BoardTemplate_toPropertyKey(t) { var i = BoardTemplate_toPrimitive(t, "string"); return "symbol" == BoardTemplate_typeof(i) ? i : i + ""; }
function BoardTemplate_toPrimitive(t, r) { if ("object" != BoardTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != BoardTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function BoardTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function BoardTemplate_callSuper(t, o, e) { return o = BoardTemplate_getPrototypeOf(o), BoardTemplate_possibleConstructorReturn(t, BoardTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], BoardTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function BoardTemplate_possibleConstructorReturn(self, call) { if (call && (BoardTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return BoardTemplate_assertThisInitialized(self); }
function BoardTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function BoardTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (BoardTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function BoardTemplate_getPrototypeOf(o) { BoardTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return BoardTemplate_getPrototypeOf(o); }
function BoardTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) BoardTemplate_setPrototypeOf(subClass, superClass); }
function BoardTemplate_setPrototypeOf(o, p) { BoardTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return BoardTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Board template exception
 * @class
 * @extends Exception
 */
var BoardTemplateException = /*#__PURE__*/function (_Exception) {
  function BoardTemplateException() {
    BoardTemplate_classCallCheck(this, BoardTemplateException);
    return BoardTemplate_callSuper(this, BoardTemplateException, arguments);
  }
  BoardTemplate_inherits(BoardTemplateException, _Exception);
  return BoardTemplate_createClass(BoardTemplateException);
}(Exception);
/**
 * Board template data
 * @typedef {Object} BoardTemplateData
 * @property {string} id - Object unique dom id
 * @property {string} label - Object display label
 */
/**
 * Board template
 * @class
 * @extends UiTemplate
 */
var BoardTemplate = /*#__PURE__*/function (_UiTemplate) {
  function BoardTemplate() {
    var _this;
    BoardTemplate_classCallCheck(this, BoardTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = BoardTemplate_callSuper(this, BoardTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {BoardTemplateData}
     */
    BoardTemplate_defineProperty(_this, "_defaults", {
      id: null,
      label: null
    });
    return _this;
  }
  BoardTemplate_inherits(BoardTemplate, _UiTemplate);
  return BoardTemplate_createClass(BoardTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {BoardTemplateData} data - Template data
     * @throws BoardTemplateException
     * @return {void}
     */
    function _validate(data) {
      if (typeof data.id !== 'string' || !data.id.length) {
        throw new BoardTemplateException('Requires a valid id');
      }
      if (typeof data.label !== 'string' || !data.label.length) {
        throw new BoardTemplateException('Requires a valid label');
      }
    }

    /**
     * Render template
     * @protected
     * @param {BoardTemplateData} data - Object template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      // Component markup
      return "<section id=\"".concat(data.id, "\" data-type=\"board\" class=\"board\">") + '<nav class="board__nav ui-wrap ui-wrap--object-nav">' + '<div data-nav="options">' + '<div data-nav="nav">' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-nav="show" type="button">' + '<span class="ui-icon" data-icon="menu"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Show options</span>' + '</button>' + '<div data-nav="drop" tabindex="0">' + '<div class="ui-wrap ui-wrap--options-drop">' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="board.up" data-keep type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move up</span>' + '<span class="ui-icon ui-icon--rotate-270" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="board.down" data-keep type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move down</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="board.edit" type="button">' + '<span class="ui-icon" data-icon="action-edit"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Edit</span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="board.delete" type="button">' + '<span class="ui-icon" data-icon="action-delete"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Delete</span>' + '</button>' + '</div>' + '</div>' + '</div>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-nav="hide" type="button">' + '<span class="ui-icon" data-icon="close"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Hide options</span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-action="board.up" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move up</span>' + '<span class="ui-icon ui-icon--rotate-270" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-action="board.down" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move down</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '</div>' + "<label class=\"board__label\" title=\"".concat(data.id, "\" data-action=\"board.toggle\"><strong data-model-update=\"text:label\">").concat(escapeHTML(data.label), "</strong></label>") + '<div data-nav="interactive">' + '<button class="ui-button ui-button--icon ui-tooltip ui-interactive"' + ' data-tip="bl" data-action="board.minimize" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Minimize</span>' + '<span class="ui-icon" data-icon="minimize"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip ui-interactive"' + ' data-tip="bl" data-action="board.maximize" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Maximize</span>' + '<span class="ui-icon" data-icon="fullscreen"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="bl" data-action="board.open" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Open</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="bl" data-action="board.close" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Close</span>' + '<span class="ui-icon" data-icon="close-small"><span></span></span>' + '</button>' + '</div>' + '</nav>' + '<div class="board__content">' + '<div class="board__scroll" data-scroller>' + '<ol class="board__children" data-children></ol>' + '</div>' + '</div>' + '<nav class="board__nav ui-wrap ui-wrap--object-nav">' + '<div class="ui-button ui-button--icon ui-button--label-hidden ui-button--static">' + '<span class="ui-icon" data-icon="stats"><span></span></span>' + '<span class="ui-button__label">Board statistics</span>' + '</div>' + '<div class="board__stats">' + '<em>' + '<span data-model-update="attr:stats.group:data-stats-count" data-stats-count="0">' + '<strong data-model-update="text:stats.group">0</strong>' + ' group<span>s</span>' + '</span>' + '</em>' + '</div>' + '<div data-nav="interactive">' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="tl" data-action="group.create" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Add group</span>' + '<span class="ui-icon" data-icon="action-create"><span></span></span>' + '</button>' + '</div>' + '</nav>' + '</section>';
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ./Classes/Templates/GroupTemplate.js
function GroupTemplate_typeof(o) { "@babel/helpers - typeof"; return GroupTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, GroupTemplate_typeof(o); }
function GroupTemplate_defineProperty(obj, key, value) { key = GroupTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function GroupTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, GroupTemplate_toPropertyKey(descriptor.key), descriptor); } }
function GroupTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) GroupTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) GroupTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function GroupTemplate_toPropertyKey(t) { var i = GroupTemplate_toPrimitive(t, "string"); return "symbol" == GroupTemplate_typeof(i) ? i : i + ""; }
function GroupTemplate_toPrimitive(t, r) { if ("object" != GroupTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != GroupTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function GroupTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function GroupTemplate_callSuper(t, o, e) { return o = GroupTemplate_getPrototypeOf(o), GroupTemplate_possibleConstructorReturn(t, GroupTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], GroupTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function GroupTemplate_possibleConstructorReturn(self, call) { if (call && (GroupTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return GroupTemplate_assertThisInitialized(self); }
function GroupTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function GroupTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (GroupTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function GroupTemplate_getPrototypeOf(o) { GroupTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GroupTemplate_getPrototypeOf(o); }
function GroupTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) GroupTemplate_setPrototypeOf(subClass, superClass); }
function GroupTemplate_setPrototypeOf(o, p) { GroupTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GroupTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Group template exception
 * @class
 * @extends Exception
 */
var GroupTemplateException = /*#__PURE__*/function (_Exception) {
  function GroupTemplateException() {
    GroupTemplate_classCallCheck(this, GroupTemplateException);
    return GroupTemplate_callSuper(this, GroupTemplateException, arguments);
  }
  GroupTemplate_inherits(GroupTemplateException, _Exception);
  return GroupTemplate_createClass(GroupTemplateException);
}(Exception);
/**
 * Group template data
 * @typedef {Object} GroupTemplateData
 * @property {string} id - Object unique dom id
 * @property {string} rel - Object parent id
 * @property {string} label - Object display label
 * @property {boolean} marked - Object display marked state
 */
/**
 * Group template
 * @class
 * @extends UiTemplate
 */
var GroupTemplate = /*#__PURE__*/function (_UiTemplate) {
  function GroupTemplate() {
    var _this;
    GroupTemplate_classCallCheck(this, GroupTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = GroupTemplate_callSuper(this, GroupTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {GroupTemplateData}
     */
    GroupTemplate_defineProperty(_this, "_defaults", {
      id: null,
      rel: null,
      label: null,
      marked: true
    });
    return _this;
  }
  GroupTemplate_inherits(GroupTemplate, _UiTemplate);
  return GroupTemplate_createClass(GroupTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {GroupTemplateData} data - Template data
     * @throws GroupTemplateException
     * @return {void}
     */
    function _validate(data) {
      if (typeof data.id !== 'string' || !data.id.length) {
        throw new GroupTemplateException('Requires a valid id');
      }
      if (typeof data.rel !== 'string' || !data.rel.length) {
        throw new GroupTemplateException('Requires a valid relation');
      }
      if (typeof data.label !== 'string' || !data.label.length) {
        throw new GroupTemplateException('Requires a valid label');
      }
    }

    /**
     * Render template
     * @protected
     * @param {GroupTemplateData} data - Object template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      var classes = ['group'];
      if (data.marked) classes.push('group--marked');

      // Component markup
      return "<section id=\"".concat(data.id, "\" data-type=\"group\" class=\"").concat(classes.join(' '), "\">") + '<nav class="group__nav ui-wrap ui-wrap--object-nav">' + '<div data-nav="options">' + '<div data-nav="nav">' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-nav="show" type="button">' + '<span class="ui-icon" data-icon="menu"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Show options</span>' + '</button>' + '<div data-nav="drop" tabindex="0">' + '<div class="ui-wrap ui-wrap--options-drop">' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="group.unmarked" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Show all items</span>' + '<span class="ui-icon" data-icon="check"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="group.marked" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Show only unmarked items</span>' + '<span class="ui-icon" data-icon="close-small"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="group.up" data-keep type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move up</span>' + '<span class="ui-icon ui-icon--rotate-270" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="group.down" data-keep type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move down</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="group.edit" type="button">' + '<span class="ui-icon" data-icon="action-edit"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Edit</span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="br" data-action="group.delete" type="button">' + '<span class="ui-icon" data-icon="action-delete"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Delete</span>' + '</button>' + '</div>' + '</div>' + '</div>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-nav="hide" type="button">' + '<span class="ui-icon" data-icon="close"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Hide options</span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-action="group.up" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move up</span>' + '<span class="ui-icon ui-icon--rotate-270" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="br" data-action="group.down" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move down</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '</div>' + "<label class=\"group__label\" title=\"".concat(data.id, "\" data-action=\"group.toggle\"><strong data-model-update=\"text:label\">").concat(escapeHTML(data.label), "</strong></label>") + '<div data-nav="interactive">' + '<button class="ui-button ui-button--icon ui-tooltip ui-interactive"' + ' data-tip="bl" data-action="group.minimize" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Minimize</span>' + '<span class="ui-icon" data-icon="minimize"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip ui-interactive"' + ' data-tip="bl" data-action="group.maximize" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Maximize</span>' + '<span class="ui-icon" data-icon="fullscreen"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="bl" data-action="group.open" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Open</span>' + '<span class="ui-icon  ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="bl" data-action="group.close" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Close</span>' + '<span class="ui-icon" data-icon="close-small"><span></span></span>' + '</button>' + '</div>' + '</nav>' + '<div class="group__content">' + '<div class="group__scroll" data-scroller>' + '<div class="group__children" data-children></div>' + '</div>' + '</div>' + '<nav class="group__nav ui-wrap ui-wrap--object-nav">' + '<div class="ui-button ui-button--icon ui-button--label-hidden ui-button--static ui-tooltip" data-tip="tr">' + '<span class="ui-icon" data-icon="stats"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Group statistics</span>' + '</div>' + '<div class="group__stats">' + '<em>' + '<span data-model-update="attr:stats.item:data-stats-count" data-stats-count="0">' + '<strong data-model-update="text:stats.item">0</strong>' + ' item<span>s</span>' + '</span>' + ' <span data-model-update="attr:stats.itemMarked:data-stats-count" data-stats-count="0">' + '<strong data-model-update="text:stats.itemMarked">0</strong>' + ' marked' + ' </span>' + '<span data-model-update="attr:stats.itemUnmarked:data-stats-count" data-stats-count="0">' + '<strong data-model-update="text:stats.itemUnmarked">0</strong>' + ' unmarked' + '</span>' + '</em>' + '</div>' + '<div data-nav="interactive">' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="tl" data-action="item.create" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Add item</span>' + '<span class="ui-icon" data-icon="action-create"><span></span></span>' + '</button>' + '</div>' + '</nav>' + '</section>';
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ./Classes/Templates/ItemTemplate.js
function ItemTemplate_typeof(o) { "@babel/helpers - typeof"; return ItemTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, ItemTemplate_typeof(o); }
function ItemTemplate_defineProperty(obj, key, value) { key = ItemTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function ItemTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ItemTemplate_toPropertyKey(descriptor.key), descriptor); } }
function ItemTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) ItemTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) ItemTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function ItemTemplate_toPropertyKey(t) { var i = ItemTemplate_toPrimitive(t, "string"); return "symbol" == ItemTemplate_typeof(i) ? i : i + ""; }
function ItemTemplate_toPrimitive(t, r) { if ("object" != ItemTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != ItemTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function ItemTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function ItemTemplate_callSuper(t, o, e) { return o = ItemTemplate_getPrototypeOf(o), ItemTemplate_possibleConstructorReturn(t, ItemTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], ItemTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function ItemTemplate_possibleConstructorReturn(self, call) { if (call && (ItemTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ItemTemplate_assertThisInitialized(self); }
function ItemTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function ItemTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (ItemTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function ItemTemplate_getPrototypeOf(o) { ItemTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ItemTemplate_getPrototypeOf(o); }
function ItemTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ItemTemplate_setPrototypeOf(subClass, superClass); }
function ItemTemplate_setPrototypeOf(o, p) { ItemTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ItemTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Item template exception
 * @class
 * @extends Exception
 */
var ItemTemplateException = /*#__PURE__*/function (_Exception) {
  function ItemTemplateException() {
    ItemTemplate_classCallCheck(this, ItemTemplateException);
    return ItemTemplate_callSuper(this, ItemTemplateException, arguments);
  }
  ItemTemplate_inherits(ItemTemplateException, _Exception);
  return ItemTemplate_createClass(ItemTemplateException);
}(Exception);
/**
 * Item template data
 * @typedef {Object} ItemTemplateData
 * @property {string} id - Object unique dom id
 * @property {string} rel - Object parent id
 * @property {string} label - Object display label
 * @property {boolean} marked - Object marked status
 * @property {string} variant - Object variant
 * @property {number} amount - Object count
 * @property {null|string} note - Variant "note" content
 * @property {null|string} youtube - Variant "youtube" content
 */
/**
 * Item template
 * @class
 * @extends UiTemplate
 */
var ItemTemplate = /*#__PURE__*/function (_UiTemplate) {
  function ItemTemplate() {
    var _this;
    ItemTemplate_classCallCheck(this, ItemTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = ItemTemplate_callSuper(this, ItemTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {ItemTemplateData}
     */
    ItemTemplate_defineProperty(_this, "_defaults", {
      id: null,
      rel: null,
      label: null,
      marked: false,
      variant: null,
      amount: 0,
      note: null,
      youtube: null
    });
    return _this;
  }
  ItemTemplate_inherits(ItemTemplate, _UiTemplate);
  return ItemTemplate_createClass(ItemTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {ItemTemplateData} data - Template data
     * @throws ItemTemplateException
     * @return {void}
     */
    function _validate(data) {
      if (typeof data.id !== 'string' || !data.id.length) {
        throw new ItemTemplateException('Requires a valid id');
      }
      if (typeof data.rel !== 'string' || !data.rel.length) {
        throw new ItemTemplateException('Requires a valid relation');
      }
      if (typeof data.label !== 'string' || !data.label.length) {
        throw new ItemTemplateException('Requires a valid label');
      }
      if (typeof data.variant !== 'string' || !data.variant.length) {
        throw new ItemTemplateException('Requires a valid variant');
      }
    }

    /**
     * Render template
     * @protected
     * @param {ItemTemplateData} data - Object template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      var classes = ['item', "item--".concat(data.variant)];
      if (data.marked) classes.push('item--marked');

      // Component markup
      return "<article id=\"".concat(data.id, "\" data-type=\"item\" class=\"").concat(classes.join(' '), "\">") + '<nav class="item__nav ui-wrap ui-wrap--object-nav">' + '<div data-nav="options">' + '<div data-nav="nav">' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="r" data-nav="show" type="button">' + '<span class="ui-icon" data-icon="menu"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Show options</span>' + '</button>' + '<div data-nav="drop" tabindex="0">' + '<div class="ui-wrap ui-wrap--options-drop">' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.up" data-keep type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move up</span>' + '<span class="ui-icon ui-icon--rotate-270" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.down" data-keep type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move down</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.more" type="button">' + '<span class="ui-button__label ui-tooltip__tip">More</span>' + '<span class="ui-icon" data-icon="add"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.less" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Less</span>' + '<span class="ui-icon" data-icon="remove"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.edit" type="button">' + '<span class="ui-icon" data-icon="action-edit"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Edit</span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.delete" type="button">' + '<span class="ui-icon" data-icon="action-delete"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Delete</span>' + '</button>' + '</div>' + '</div>' + '</div>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="r" data-nav="hide" type="button">' + '<span class="ui-icon" data-icon="close"><span></span></span>' + '<span class="ui-button__label ui-tooltip__tip">Hide options</span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="r" data-action="item.up" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move up</span>' + '<span class="ui-icon ui-icon--rotate-270" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="r" data-action="item.down" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Move down</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '</div>' + "<div class=\"item__amount\" data-model-update=\"attr:amount:data-item-amount\" data-item-amount=\"".concat(data.amount, "\">") + '<div data-nav="options">' + '<div data-nav="nav">' + '<button class="ui-button" data-nav="show" type="button">' + "<span class=\"ui-button__label\" data-model-update=\"text:amount\">".concat(data.amount, "</span>") + '</button>' + '<div data-nav="drop" tabindex="0">' + '<div class="ui-wrap ui-wrap--options-drop">' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.more" type="button">' + '<span class="ui-button__label ui-tooltip__tip">More</span>' + '<span class="ui-icon" data-icon="add"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip"' + ' data-tip="r" data-action="item.less" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Less</span>' + '<span class="ui-icon" data-icon="remove"><span></span></span>' + '</button>' + '</div>' + '</div>' + '</div>' + '<button class="ui-button" data-nav="hide" type="button">' + "<span class=\"ui-button__label\" data-model-update=\"text:amount\">".concat(data.amount, "</span>") + '</button>' + '</div>' + '</div>' + "<label class=\"item__label\" title=\"".concat(data.id, "\"><strong data-model-update=\"text:label\">").concat(escapeHTML(data.label), "</strong></label>") + '<div data-nav="interactive">' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="l" data-action="item.open" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Open</span>' + '<span class="ui-icon ui-icon--rotate-90" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="l" data-action="item.close" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Close</span>' + '<span class="ui-icon" data-icon="close-small"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="l" data-action="item.modal" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Show in popup</span>' + '<span class="ui-icon" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="l" data-action="item.link" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Show in new window</span>' + '<span class="ui-icon ui-icon--rotate-315" data-icon="arrow-simple"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="l" data-action="item.unmark" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Unmark</span>' + '<span class="ui-icon" data-icon="check"><span></span></span>' + '</button>' + '<button class="ui-button ui-button--icon ui-tooltip" data-tip="l" data-action="item.mark" type="button">' + '<span class="ui-button__label ui-tooltip__tip">Mark</span>' + '<span class="ui-icon" data-icon="close-small"><span></span></span>' + '</button>' + '</div>' + '</nav>' + '<div class="item__content">' + '<div class="item__scroll" data-scroller>' + '<div class="item__children" data-children></div>' + '</div>' + '</div>' + '</article>';
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ./Classes/Templates/NoteTemplate.js
function NoteTemplate_typeof(o) { "@babel/helpers - typeof"; return NoteTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, NoteTemplate_typeof(o); }
function NoteTemplate_defineProperty(obj, key, value) { key = NoteTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function NoteTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, NoteTemplate_toPropertyKey(descriptor.key), descriptor); } }
function NoteTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) NoteTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) NoteTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function NoteTemplate_toPropertyKey(t) { var i = NoteTemplate_toPrimitive(t, "string"); return "symbol" == NoteTemplate_typeof(i) ? i : i + ""; }
function NoteTemplate_toPrimitive(t, r) { if ("object" != NoteTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != NoteTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function NoteTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function NoteTemplate_callSuper(t, o, e) { return o = NoteTemplate_getPrototypeOf(o), NoteTemplate_possibleConstructorReturn(t, NoteTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], NoteTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function NoteTemplate_possibleConstructorReturn(self, call) { if (call && (NoteTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return NoteTemplate_assertThisInitialized(self); }
function NoteTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function NoteTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (NoteTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function NoteTemplate_getPrototypeOf(o) { NoteTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return NoteTemplate_getPrototypeOf(o); }
function NoteTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) NoteTemplate_setPrototypeOf(subClass, superClass); }
function NoteTemplate_setPrototypeOf(o, p) { NoteTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return NoteTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Note template exception
 * @class
 * @extends Exception
 */
var NoteTemplateException = /*#__PURE__*/function (_Exception) {
  function NoteTemplateException() {
    NoteTemplate_classCallCheck(this, NoteTemplateException);
    return NoteTemplate_callSuper(this, NoteTemplateException, arguments);
  }
  NoteTemplate_inherits(NoteTemplateException, _Exception);
  return NoteTemplate_createClass(NoteTemplateException);
}(Exception);
/**
 * Note template data
 * @typedef {Object} NoteTemplateData
 * @property {string} id - Object unique dom id
 * @property {null|string} note - Object note content
 */
/**
 * Note template
 * @class
 * @extends UiTemplate
 */
var NoteTemplate = /*#__PURE__*/function (_UiTemplate) {
  function NoteTemplate() {
    var _this;
    NoteTemplate_classCallCheck(this, NoteTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = NoteTemplate_callSuper(this, NoteTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {NoteTemplateData}
     */
    NoteTemplate_defineProperty(_this, "_defaults", {
      id: null,
      note: null
    });
    return _this;
  }
  NoteTemplate_inherits(NoteTemplate, _UiTemplate);
  return NoteTemplate_createClass(NoteTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {NoteTemplateData} data - Template data
     * @throws NoteTemplateException
     * @return {void}
     */
    function _validate(data) {
      if (typeof data.id !== 'string' || !data.id.length) {
        throw new NoteTemplateException('Requires a valid id');
      }
    }

    /**
     * Render template
     * @protected
     * @param {NoteTemplateData} data - Object template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      var _data$note;
      // Component markup
      return "<div data-type=\"note\" class=\"note\"><div class=\"note__wrap\" data-model-update=\"text:note\">".concat(escapeHTML((_data$note = data.note) !== null && _data$note !== void 0 ? _data$note : ''), "</div></div>");
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ./Classes/Templates/YoutubeTemplate.js
function YoutubeTemplate_typeof(o) { "@babel/helpers - typeof"; return YoutubeTemplate_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, YoutubeTemplate_typeof(o); }
function YoutubeTemplate_defineProperty(obj, key, value) { key = YoutubeTemplate_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function YoutubeTemplate_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, YoutubeTemplate_toPropertyKey(descriptor.key), descriptor); } }
function YoutubeTemplate_createClass(Constructor, protoProps, staticProps) { if (protoProps) YoutubeTemplate_defineProperties(Constructor.prototype, protoProps); if (staticProps) YoutubeTemplate_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function YoutubeTemplate_toPropertyKey(t) { var i = YoutubeTemplate_toPrimitive(t, "string"); return "symbol" == YoutubeTemplate_typeof(i) ? i : i + ""; }
function YoutubeTemplate_toPrimitive(t, r) { if ("object" != YoutubeTemplate_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != YoutubeTemplate_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function YoutubeTemplate_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function YoutubeTemplate_callSuper(t, o, e) { return o = YoutubeTemplate_getPrototypeOf(o), YoutubeTemplate_possibleConstructorReturn(t, YoutubeTemplate_isNativeReflectConstruct() ? Reflect.construct(o, e || [], YoutubeTemplate_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function YoutubeTemplate_possibleConstructorReturn(self, call) { if (call && (YoutubeTemplate_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return YoutubeTemplate_assertThisInitialized(self); }
function YoutubeTemplate_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function YoutubeTemplate_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (YoutubeTemplate_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function YoutubeTemplate_getPrototypeOf(o) { YoutubeTemplate_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return YoutubeTemplate_getPrototypeOf(o); }
function YoutubeTemplate_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) YoutubeTemplate_setPrototypeOf(subClass, superClass); }
function YoutubeTemplate_setPrototypeOf(o, p) { YoutubeTemplate_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return YoutubeTemplate_setPrototypeOf(o, p); }
/**
 * Requires
 */



/**
 * Youtube template exception
 * @class
 * @extends Exception
 */
var YoutubeTemplateException = /*#__PURE__*/function (_Exception) {
  function YoutubeTemplateException() {
    YoutubeTemplate_classCallCheck(this, YoutubeTemplateException);
    return YoutubeTemplate_callSuper(this, YoutubeTemplateException, arguments);
  }
  YoutubeTemplate_inherits(YoutubeTemplateException, _Exception);
  return YoutubeTemplate_createClass(YoutubeTemplateException);
}(Exception);
/**
 * Youtube template data
 * @typedef {Object} YoutubeTemplateData
 * @property {string} id - Object unique dom id
 * @property {string} youtube - Object youtube id
 */
/**
 * Youtube template
 * @class
 * @extends UiTemplate
 */
var YoutubeTemplate = /*#__PURE__*/function (_UiTemplate) {
  function YoutubeTemplate() {
    var _this;
    YoutubeTemplate_classCallCheck(this, YoutubeTemplate);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = YoutubeTemplate_callSuper(this, YoutubeTemplate, [].concat(args));
    /**
     * Default template data
     * @protected
     * @property
     * @type {YoutubeTemplateData}
     */
    YoutubeTemplate_defineProperty(_this, "_defaults", {
      id: null,
      youtube: null
    });
    return _this;
  }
  YoutubeTemplate_inherits(YoutubeTemplate, _UiTemplate);
  return YoutubeTemplate_createClass(YoutubeTemplate, [{
    key: "_validate",
    value:
    /**
     * Template validate method
     * @protected
     * @param {YoutubeTemplateData} data - Template data
     * @throws YoutubeTemplateException
     * @return {void}
     */
    function _validate(data) {
      if (typeof data.id !== 'string' || !data.id.length) {
        throw new YoutubeTemplateException('Requires a valid id');
      }
      if (typeof data.youtube !== 'string' || !data.youtube.length) {
        throw new YoutubeTemplateException('Requires a valid youtube id');
      }
    }

    /**
     * Render template
     * @protected
     * @param {YoutubeTemplateData} data - Object template data
     * @return {string} - Rendered template string
     */
  }, {
    key: "_render",
    value: function _render(data) {
      // Component markup
      return '<div data-type="youtube" class="youtube"><div class="youtube__wrap">' + "<iframe src=\"https://www.youtube-nocookie.com/embed/dakOQMNa_2Q?si=".concat(data.youtube, "\"") + ' title="YouTube video player"' + ' allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"' + ' referrerPolicy="strict-origin-when-cross-origin" allowFullScreen>' + '</iframe>' + '</div></div>';
    }
  }]);
}(UiTemplate);
;// CONCATENATED MODULE: ./Classes/Application.js
function Application_typeof(o) { "@babel/helpers - typeof"; return Application_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, Application_typeof(o); }
function Application_slicedToArray(arr, i) { return Application_arrayWithHoles(arr) || Application_iterableToArrayLimit(arr, i) || Application_unsupportedIterableToArray(arr, i) || Application_nonIterableRest(); }
function Application_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function Application_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Application_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Application_arrayLikeToArray(o, minLen); }
function Application_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function Application_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function Application_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function Application_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ Application_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == Application_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(Application_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function Application_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function Application_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Application_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Application_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function Application_classPrivateFieldInitSpec(obj, privateMap, value) { Application_checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function Application_checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function Application_classPrivateFieldGet(s, a) { return s.get(Application_assertClassBrand(s, a)); }
function Application_classPrivateFieldSet(s, a, r) { return s.set(Application_assertClassBrand(s, a), r), r; }
function Application_assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }
function Application_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, Application_toPropertyKey(descriptor.key), descriptor); } }
function Application_createClass(Constructor, protoProps, staticProps) { if (protoProps) Application_defineProperties(Constructor.prototype, protoProps); if (staticProps) Application_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function Application_toPropertyKey(t) { var i = Application_toPrimitive(t, "string"); return "symbol" == Application_typeof(i) ? i : i + ""; }
function Application_toPrimitive(t, r) { if ("object" != Application_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != Application_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function Application_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function Application_callSuper(t, o, e) { return o = Application_getPrototypeOf(o), Application_possibleConstructorReturn(t, Application_isNativeReflectConstruct() ? Reflect.construct(o, e || [], Application_getPrototypeOf(t).constructor) : o.apply(t, e)); }
function Application_possibleConstructorReturn(self, call) { if (call && (Application_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return Application_assertThisInitialized(self); }
function Application_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function Application_isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (Application_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function Application_getPrototypeOf(o) { Application_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Application_getPrototypeOf(o); }
function Application_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) Application_setPrototypeOf(subClass, superClass); }
function Application_setPrototypeOf(o, p) { Application_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Application_setPrototypeOf(o, p); }
/**
 * Requires
 */


















/**
 * Application exception
 * @class
 * @extends Exception
 */
var ApplicationException = /*#__PURE__*/function (_Exception) {
  function ApplicationException() {
    Application_classCallCheck(this, ApplicationException);
    return Application_callSuper(this, ApplicationException, arguments);
  }
  Application_inherits(ApplicationException, _Exception);
  return Application_createClass(ApplicationException);
}(Exception);
/**
 * Application wrapper
 * @class
 * @extends EventDispatcher
 */
var _booted = /*#__PURE__*/new WeakMap();
var Application_bound = /*#__PURE__*/new WeakMap();
var Application_storage = /*#__PURE__*/new WeakMap();
var _settings = /*#__PURE__*/new WeakMap();
var _theme = /*#__PURE__*/new WeakMap();
var _view = /*#__PURE__*/new WeakMap();
var _isFirstVisit = /*#__PURE__*/new WeakMap();
var _scr = /*#__PURE__*/new WeakMap();
var _version = /*#__PURE__*/new WeakMap();
var _url = /*#__PURE__*/new WeakMap();
var Application = /*#__PURE__*/function (_EventDispatcher) {
  /**
   * Constructor
   * @constructor
   * @param {string} version - Version string
   * @param {string} url - App url
   * @param {Scroller} scroll - Scroller instance
   * @param {null|Console} debug - Debug mode
   */
  function Application(version, url, scroll, debug) {
    var _this;
    Application_classCallCheck(this, Application);
    _this = Application_callSuper(this, Application, [document, null, debug]);
    /**
     * Booted status
     * @private
     * @type {boolean}
     */
    Application_classPrivateFieldInitSpec(_this, _booted, false);
    Application_classPrivateFieldInitSpec(_this, Application_bound, false);
    /**
     * Storage
     * @private
     * @type {Storage}
     */
    Application_classPrivateFieldInitSpec(_this, Application_storage, void 0);
    Application_classPrivateFieldInitSpec(_this, _settings, void 0);
    Application_classPrivateFieldInitSpec(_this, _theme, void 0);
    Application_classPrivateFieldInitSpec(_this, _view, void 0);
    Application_classPrivateFieldInitSpec(_this, _isFirstVisit, false);
    /**
     * Scroller instance
     * @private
     * @type {Scroller}
     */
    Application_classPrivateFieldInitSpec(_this, _scr, void 0);
    /**
     * Version
     * @private
     * @type {string}
     */
    Application_classPrivateFieldInitSpec(_this, _version, void 0);
    Application_classPrivateFieldInitSpec(_this, _url, void 0);
    Application_classPrivateFieldSet(_version, _this, version);
    Application_classPrivateFieldSet(_url, _this, url);
    Application_classPrivateFieldSet(_scr, _this, scroll);

    // Bind events
    try {
      _this.bind();
    } catch (e) {
      throw new ApplicationException('Failed to bind application', e);
    }
    return _this;
  }
  Application_inherits(Application, _EventDispatcher);
  return Application_createClass(Application, [{
    key: "scrollTo",
    value: function scrollTo(element) {
      var complete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      Application_classPrivateFieldGet(_scr, this).scrollTo(element, complete, offset, context);
    }
  }, {
    key: "version",
    get: function get() {
      return Application_classPrivateFieldGet(_version, this);
    }
  }, {
    key: "storage",
    get: function get() {
      return Application_classPrivateFieldGet(Application_storage, this);
    }
  }, {
    key: "view",
    get: function get() {
      return Application_classPrivateFieldGet(_view, this);
    }
  }, {
    key: "settings",
    get: function get() {
      return Application_classPrivateFieldGet(_settings, this);
    }
  }, {
    key: "theme",
    get: function get() {
      return Application_classPrivateFieldGet(_theme, this);
    }
  }, {
    key: "bind",
    value: function bind() {
      var _this2 = this;
      if (Application_classPrivateFieldGet(Application_bound, this)) return;
      var header = document.getElementById('header');
      var footer = document.getElementById('footer');

      // Load and ensure default data
      this.addEventListener('storage.ready', /*#__PURE__*/Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee() {
        var has_settings, has_theme, has_board;
        return Application_regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return _this2.storage.typeHasData('settings');
            case 2:
              has_settings = _context.sent;
              _context.next = 5;
              return _this2.initSettings(!has_settings);
            case 5:
              _context.next = 7;
              return _this2.storage.typeHasData('theme');
            case 7:
              has_theme = _context.sent;
              _context.next = 10;
              return _this2.initTheme(!has_theme);
            case 10:
              _context.next = 12;
              return _this2.storage.typeHasData('board');
            case 12:
              has_board = _context.sent;
              if (!has_board) Application_classPrivateFieldSet(_isFirstVisit, _this2, true);
              _this2.dispatchEvent('data.ready');
            case 15:
            case "end":
              return _context.stop();
          }
        }, _callee);
      })));
      this.addEventListener('data.ready', /*#__PURE__*/Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee3() {
        var remove_install_button;
        return Application_regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              // Set version
              header.querySelector('[data-version]').innerText = _this2.version;

              // Show first time visit welcome
              if (Application_classPrivateFieldGet(_isFirstVisit, _this2)) _this2.showWelcome();

              /**
               * Remove install button
               * @return {void}
               */
              remove_install_button = function remove_install_button() {
                _this2.selectAction('app.install', header)[0].remove();
              };
              /**
               * Remove install button and thank user after install
               */
              window.addEventListener('appinstalled', function () {
                remove_install_button();
                delete window._deferredInstallPrompt;
                _this2.showInstallThanks();
              });

              // Bind header actions and enable
              _this2.bindActions({
                'app.install': [['click', ( /*#__PURE__*/function () {
                  var _ref3 = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee2(event) {
                    return Application_regeneratorRuntime().wrap(function _callee2$(_context2) {
                      while (1) switch (_context2.prev = _context2.next) {
                        case 0:
                          event.preventDefault();

                          // We do not have the prompt, remove the button
                          if (window._deferredInstallPrompt) {
                            _context2.next = 4;
                            break;
                          }
                          remove_install_button();
                          return _context2.abrupt("return");
                        case 4:
                          // If we have a prompt, register a handler to remove button after interaction
                          window._deferredInstallPrompt.prompt();
                          window._deferredInstallPrompt.userChoice.then(function (choiceResult) {
                            delete window._deferredInstallPrompt;
                            remove_install_button();

                            // Thank user for installing :)
                            if (choiceResult.outcome === 'accepted') {
                              _this2.showInstallThanks();
                            }
                          });
                        case 6:
                        case "end":
                          return _context2.stop();
                      }
                    }, _callee2);
                  }));
                  return function (_x) {
                    return _ref3.apply(this, arguments);
                  };
                }())]],
                'board.create': [['click', function (event) {
                  event.preventDefault();
                  _this2.showModelModal('board', null, 'create');
                }]],
                'settings.show': [['click', function (event) {
                  event.preventDefault();
                  _this2.showModelModal('settings', Application_classPrivateFieldGet(_settings, _this2), 'edit');
                }]],
                'theme.show': [['click', function (event) {
                  event.preventDefault();
                  _this2.showModelModal('theme', Application_classPrivateFieldGet(_theme, _this2), 'edit');
                }]],
                'storage.show': [['click', function (event) {
                  event.preventDefault();
                  _this2.showStorageSetup();
                }]],
                'about.show': [['click', function (event) {
                  event.preventDefault();
                  _this2.showAbout();
                }]],
                'privacy.show': [['click', function (event) {
                  event.preventDefault();
                  _this2.showPrivacy();
                }]],
                'app.share': [['click', function (event) {
                  event.preventDefault();
                  _this2.shareApp();
                }]]
              }, header, [], function (button) {
                button.disabled = false;
              });

              // Bind footer actions and enable
              _this2.bindActions({
                'about.show': [['click', function (event) {
                  event.preventDefault();
                  _this2.showAbout();
                }]],
                'privacy.show': [['click', function (event) {
                  event.preventDefault();
                  _this2.showPrivacy();
                }]]
              }, footer, [], function (button) {
                button.disabled = false;
              });
            case 6:
            case "end":
              return _context3.stop();
          }
        }, _callee3);
      })));
      Application_classPrivateFieldSet(Application_bound, this, true);
    }
  }, {
    key: "initSettings",
    value: function () {
      var _initSettings = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee4() {
        var create,
          settings,
          _args4 = arguments;
        return Application_regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              create = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : true;
              if (!create) {
                _context4.next = 5;
                break;
              }
              Application_classPrivateFieldSet(_settings, this, new Settings(null, this, this.debug));
              _context4.next = 9;
              break;
            case 5:
              _context4.next = 7;
              return this.view.getModels('settings');
            case 7:
              settings = _context4.sent;
              Application_classPrivateFieldSet(_settings, this, settings[0]);
            case 9:
              Application_classPrivateFieldGet(_settings, this).applySettings();
              Application_classPrivateFieldGet(_settings, this).addEventListener('model.saved', function (event) {
                event.detail.target.applySettings();
              });
            case 11:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function initSettings() {
        return _initSettings.apply(this, arguments);
      }
      return initSettings;
    }()
  }, {
    key: "initTheme",
    value: function () {
      var _initTheme = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee5() {
        var create,
          theme,
          _args5 = arguments;
        return Application_regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              create = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : true;
              if (!create) {
                _context5.next = 5;
                break;
              }
              Application_classPrivateFieldSet(_theme, this, new Theme(null, this, this.debug));
              _context5.next = 9;
              break;
            case 5:
              _context5.next = 7;
              return this.view.getModels('theme');
            case 7:
              theme = _context5.sent;
              Application_classPrivateFieldSet(_theme, this, theme[0]);
            case 9:
              Application_classPrivateFieldGet(_theme, this).applyTheme();
              Application_classPrivateFieldGet(_theme, this).addEventListener('model.saved', function (event) {
                event.detail.target.applyTheme();
              });
            case 11:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function initTheme() {
        return _initTheme.apply(this, arguments);
      }
      return initTheme;
    }()
  }, {
    key: "boot",
    value: function () {
      var _boot = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee6() {
        var templates, entries, i, _entries$i, name, TemplateConstructor;
        return Application_regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              if (!Application_classPrivateFieldGet(_booted, this)) {
                _context6.next = 2;
                break;
              }
              return _context6.abrupt("return");
            case 2:
              _context6.prev = 2;
              // Register js templates
              UiTemplateRenderer.debug = this.debug;
              templates = {
                modal: UiModalTemplate,
                input: UiInputTemplate,
                fieldset: UiFieldsetTemplate,
                form: UiFormTemplate,
                board: BoardTemplate,
                group: GroupTemplate,
                item: ItemTemplate,
                itemNote: NoteTemplate,
                itemYoutube: YoutubeTemplate
              };
              entries = Object.entries(templates);
              for (i = 0; i < entries.length; i++) {
                _entries$i = Application_slicedToArray(entries[i], 2), name = _entries$i[0], TemplateConstructor = _entries$i[1];
                UiTemplateRenderer.require(name, new TemplateConstructor(null, this.debug));
              }

              // Initialize storage
              Application_classPrivateFieldSet(Application_storage, this, new Storage(this, this.debug));

              // Assign model references
              Model.app = this;
              Model.storage = this.storage;
              Application_classPrivateFieldSet(_view, this, new View(this, this.debug));

              // Load and initialize types and data
              _context6.next = 13;
              return this.storage.load([Settings, Theme, Board, Group, Item]);
            case 13:
              _context6.next = 18;
              break;
            case 15:
              _context6.prev = 15;
              _context6.t0 = _context6["catch"](2);
              throw new ApplicationException('Failed to boot application', _context6.t0);
            case 18:
              // Complete boot sequence
              Application_classPrivateFieldSet(_booted, this, true);
              this.dispatchEvent('app.ready');
            case 20:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this, [[2, 15]]);
      }));
      function boot() {
        return _boot.apply(this, arguments);
      }
      return boot;
    }()
  }, {
    key: "shareApp",
    value: function shareApp() {
      var _this3 = this;
      if (navigator.share) {
        navigator.share({
          title: 'nutZtash - The private todo and notes tool',
          text: 'The private todo and notes tool for every device',
          url: Application_classPrivateFieldGet(_url, this)
        }).catch(function () {
          _this3.shareCopyUrl();
        });
      } else {
        this.shareCopyUrl();
      }
    }
  }, {
    key: "shareCopyUrl",
    value: function () {
      var _shareCopyUrl = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee7() {
        var success, title, content;
        return Application_regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return copyToClipboard(Application_classPrivateFieldGet(_url, this), this.debug);
            case 2:
              success = _context7.sent;
              title = 'Copied to clipboard';
              content = '<div class="ui-text"><p>The app url was copied to your clipboard.</p></div>';
              if (success) this.showAlertModal(title, content);
            case 6:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function shareCopyUrl() {
        return _shareCopyUrl.apply(this, arguments);
      }
      return shareCopyUrl;
    }()
  }, {
    key: "showWelcome",
    value: function showWelcome() {
      var _this4 = this;
      var dom = UiTemplateRenderer.node({
        template: 'modal',
        data: {
          id: 'modal-welcome',
          mode: 'alert',
          header: {
            title: document.querySelector('#welcome .headline').innerHTML
          },
          focusable: false,
          content: document.querySelector('#welcome .content').innerHTML
        }
      })[0];
      dom.addEventListener('modal.initialized', function (event) {
        event.detail.target.show();
      });
      dom.addEventListener('modal.hidden', function (event) {
        event.detail.target.dom.remove();
        var buttons = _this4.selectAction('board.create', document.getElementById('header'));
        if (buttons.length) buttons[0].focus();
      });
      document.body.appendChild(dom);
      UiModalComponent.make(dom, {
        mode: 'alert'
      }, [UiModalPluginAlert], this, this.debug);
    }
  }, {
    key: "showInstallThanks",
    value: function showInstallThanks() {
      var title = 'Application installed';
      var content = '<p>Thanks for installing the nutZtash application.</p>' + '<p>Please report any issues or bugs to improve the expirence.</p>';
      this.showAlertModal(title, content);
    }
  }, {
    key: "showAbout",
    value: function showAbout() {
      var title = document.querySelector('#about .headline').innerHTML;
      var content = document.querySelector('#about .content').innerHTML;
      this.showAlertModal(title, content);
    }
  }, {
    key: "showPrivacy",
    value: function showPrivacy() {
      var title = document.querySelector('#privacy .headline').innerHTML;
      var content = document.querySelector('#privacy .content').innerHTML;
      this.showAlertModal(title, content);
    }
  }, {
    key: "deleteAllData",
    value: function deleteAllData() {
      var _this5 = this;
      var title = 'Delete all stored data';
      var content = 'Are you sure you wish to delete all stored data, including settings and theme?';
      this.showConfirmModal(title, content, /*#__PURE__*/Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee8() {
        return Application_regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return _this5.storage.clear();
            case 2:
              _this5.showAlertModal('All data was deleted', 'Application will reload and present itself in a blank state.', function () {
                location.reload();
              });
            case 3:
            case "end":
              return _context8.stop();
          }
        }, _callee8);
      })));
    }
  }, {
    key: "resetSettings",
    value: function () {
      var _resetSettings = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee10() {
        var _this6 = this;
        return Application_regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              Application_classPrivateFieldGet(_settings, this).label = 'current Settings';
              Application_classPrivateFieldGet(_settings, this).addEventListener('model.deleted', /*#__PURE__*/Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee9() {
                var title, content;
                return Application_regeneratorRuntime().wrap(function _callee9$(_context9) {
                  while (1) switch (_context9.prev = _context9.next) {
                    case 0:
                      _context9.next = 2;
                      return _this6.initSettings();
                    case 2:
                      title = 'Defaults restored';
                      content = '<div class="ui-text"><p>Default settings restored successfully.</p></div>';
                      _this6.showAlertModal(title, content, function () {
                        _this6.selectAction('settings.show', document.getElementById('header'))[0].click();
                      });
                    case 5:
                    case "end":
                      return _context9.stop();
                  }
                }, _callee9);
              })));
              _context10.next = 4;
              return Application_classPrivateFieldGet(_view, this).deleteModel(Application_classPrivateFieldGet(_settings, this));
            case 4:
            case "end":
              return _context10.stop();
          }
        }, _callee10, this);
      }));
      function resetSettings() {
        return _resetSettings.apply(this, arguments);
      }
      return resetSettings;
    }()
  }, {
    key: "resetTheme",
    value: function () {
      var _resetTheme = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee12() {
        var _this7 = this;
        return Application_regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              Application_classPrivateFieldGet(_theme, this).label = 'current Theme';
              Application_classPrivateFieldGet(_theme, this).addEventListener('model.deleted', /*#__PURE__*/Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee11() {
                var title, content;
                return Application_regeneratorRuntime().wrap(function _callee11$(_context11) {
                  while (1) switch (_context11.prev = _context11.next) {
                    case 0:
                      _context11.next = 2;
                      return _this7.initTheme();
                    case 2:
                      title = 'Defaults restored';
                      content = '<div class="ui-text"><p>Default theme restored successfully.</p></div>';
                      _this7.showAlertModal(title, content, function () {
                        _this7.selectAction('theme.show', document.getElementById('header'))[0].click();
                      });
                    case 5:
                    case "end":
                      return _context11.stop();
                  }
                }, _callee11);
              })));
              _context12.next = 4;
              return Application_classPrivateFieldGet(_view, this).deleteModel(Application_classPrivateFieldGet(_theme, this));
            case 4:
            case "end":
              return _context12.stop();
          }
        }, _callee12, this);
      }));
      function resetTheme() {
        return _resetTheme.apply(this, arguments);
      }
      return resetTheme;
    }()
  }, {
    key: "importTheme",
    value: function importTheme() {
      var _this8 = this;
      var title = 'Import theme JSON';
      var content = [{
        template: 'input',
        data: {
          type: 'textarea',
          name: 'theme-import-json',
          width: 100
        }
      }];
      this.showConfirmModal(title, content, /*#__PURE__*/function () {
        var _ref7 = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee13(event) {
          var input, decoded, fail_title, fail_content;
          return Application_regeneratorRuntime().wrap(function _callee13$(_context13) {
            while (1) switch (_context13.prev = _context13.next) {
              case 0:
                input = event.detail.target.dom.querySelector('[name="theme-import-json"]').value;
                _context13.prev = 1;
                decoded = JSON.parse(input);
                if (isPojo_isPojo(decoded)) {
                  _context13.next = 5;
                  break;
                }
                throw new ApplicationException('Must be an object');
              case 5:
                _context13.next = 13;
                break;
              case 7:
                _context13.prev = 7;
                _context13.t0 = _context13["catch"](1);
                fail_title = 'Failed theme import';
                fail_content = '<div class="ui-text"><p>Failed to import theme JSON.</p></div>';
                _this8.showAlertModal(fail_title, fail_content, function () {
                  _this8.importTheme();
                });
                return _context13.abrupt("return");
              case 13:
                Application_classPrivateFieldGet(_theme, _this8).assign(decoded);
                _context13.next = 16;
                return Application_classPrivateFieldGet(_theme, _this8).save();
              case 16:
                Application_classPrivateFieldGet(_theme, _this8).applyTheme();
                _this8.selectAction('theme.show', document.getElementById('header'))[0].click();
              case 18:
              case "end":
                return _context13.stop();
            }
          }, _callee13, null, [[1, 7]]);
        }));
        return function (_x2) {
          return _ref7.apply(this, arguments);
        };
      }(), function (data) {
        data.data.icons = {
          confirm: 'action-import'
        };
        data.data.i18n = {
          confirm: 'Import'
        };
      });
    }
  }, {
    key: "showStorageSetup",
    value: function () {
      var _showStorageSetup = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee16() {
        var _this9 = this;
        var title, current_size, content;
        return Application_regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) switch (_context16.prev = _context16.next) {
            case 0:
              title = 'Storage setup';
              _context16.next = 3;
              return this.storage.storageSize();
            case 3:
              current_size = _context16.sent;
              content = ['<div class="ui-text">' + "<p><strong>Local storage usage</strong> ".concat(current_size, " <strong>of</strong> ~5mib</p>") + '</div>', '<hr />', {
                template: 'fieldset',
                data: {},
                as: {
                  content: [{
                    template: 'input',
                    data: {
                      label: {
                        text: 'Storage driver'
                      },
                      classes: ['ui-input--driver', 'ui-input--wide', 'ui-input--grow', 'ui-input--grow-label', 'ui-input--label-multiline', 'ui-input--horizontal', 'ui-input--spaced'],
                      name: 'driver',
                      type: 'select',
                      value: this.storage.local.get('driver'),
                      options: [{
                        label: 'Local storage',
                        value: 'local'
                      }]
                    }
                  }]
                }
              }, '<hr />', '<nav class="ui-text-nav">', {
                template: 'input',
                data: {
                  label: {
                    text: null
                  },
                  classes: ['ui-input--hidden'],
                  name: 'import',
                  type: 'file'
                }
              }, '<button class="ui-button ui-button--wide ui-button--icon" data-action="storage.import" type="button">' + '<span class="ui-icon" data-icon="action-import"><span></span></span>' + '<span class="ui-button__label">Import from JSON file</span>' + '</button>', '<hr />', '<button class="ui-button ui-button--wide ui-button--icon" data-action="storage.export" type="button">' + '<span class="ui-icon" data-icon="action-export"><span></span></span>' + '<span class="ui-button__label">Export to JSON file</span>' + '</button>', '<hr />', '<button class="ui-button ui-button--wide ui-button--icon" data-action="storage.delete" type="button">' + '<span class="ui-icon" data-icon="action-delete"><span></span></span>' + '<span class="ui-button__label">Delete all data</span>' + '</button>', '</nav>'];
              this.showConfirmModal(title, content, function () {
                if (_this9.debug) _this9.debug.warn('Only localStorage available currently');
              }, function (data) {
                data.data.icons = {
                  confirm: 'save'
                };
                data.data.i18n = {
                  confirm: 'Save'
                };
              }, function (dom) {
                var input_import = dom.querySelector('[name="import"]');
                var reader = new FileReader();
                reader.addEventListener('load', function () {
                  _this9.view.importJSONString(reader.result);
                });
                input_import.addEventListener('change', function () {
                  reader.readAsText(input_import.files[0]);
                });
                _this9.bindActions({
                  'storage.import': [['click', function (event) {
                    event.preventDefault();
                    input_import.click();
                  }]],
                  'storage.export': [['click', ( /*#__PURE__*/function () {
                    var _ref8 = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee14(event) {
                      var blob;
                      return Application_regeneratorRuntime().wrap(function _callee14$(_context14) {
                        while (1) switch (_context14.prev = _context14.next) {
                          case 0:
                            event.preventDefault();
                            _context14.next = 3;
                            return _this9.view.export(true);
                          case 3:
                            blob = _context14.sent;
                            saveBlobAs(blob, 'nutZtash.json');
                          case 5:
                          case "end":
                            return _context14.stop();
                        }
                      }, _callee14);
                    }));
                    return function (_x3) {
                      return _ref8.apply(this, arguments);
                    };
                  }())]],
                  'storage.delete': [['click', ( /*#__PURE__*/function () {
                    var _ref9 = Application_asyncToGenerator( /*#__PURE__*/Application_regeneratorRuntime().mark(function _callee15(event) {
                      return Application_regeneratorRuntime().wrap(function _callee15$(_context15) {
                        while (1) switch (_context15.prev = _context15.next) {
                          case 0:
                            event.preventDefault();
                            _this9.deleteAllData();
                          case 2:
                          case "end":
                            return _context15.stop();
                        }
                      }, _callee15);
                    }));
                    return function (_x4) {
                      return _ref9.apply(this, arguments);
                    };
                  }())]]
                }, dom);
              });
            case 6:
            case "end":
              return _context16.stop();
          }
        }, _callee16, this);
      }));
      function showStorageSetup() {
        return _showStorageSetup.apply(this, arguments);
      }
      return showStorageSetup;
    }()
  }, {
    key: "showInputErrors",
    value: function showInputErrors(dom, errors) {
      var entries = Object.entries(errors);
      var first = null;
      for (var i = 0; i < entries.length; i++) {
        var _entries$i2 = Application_slicedToArray(entries[i], 2),
          field = _entries$i2[0],
          errs = _entries$i2[1];
        var input = dom.querySelector("[name=\"".concat(field, "\"]"));
        if (!input) {
          if (this.debug) this.debug.warn(this.constructor.name + ".showInputErrors(".concat(field, ") Unknown field"));
          continue;
        }
        if (!first) first = input;
        var component = input.closest('.ui-input');
        var err_dom = component.querySelector('.ui-input__error');
        err_dom.innerHTML = errs instanceof Array ? errs.join('<br />') : errs;
        component.classList.add('ui-input--error');
        component.classList.add('ui-input--error-visible');
      }
      if (first) first.focus();
    }
  }, {
    key: "showModelModal",
    value: function showModelModal(type) {
      var _this10 = this;
      var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'view';
      var parent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var Constructor = this.storage.models[type];
      var id = "modal-model-".concat(mode);
      if (document.getElementById(id)) return;
      if (mode === 'edit' && !(model instanceof Constructor)) {
        throw new ApplicationException('Invalid model relation');
      }
      var modes = {
        create: 'confirm',
        edit: 'confirm'
      };
      var titles = {
        create: "<span class=\"ui-icon\" data-icon=\"action-create\"><span></span></span><h3 class=\"ui-modal__dialog-title\">Create ".concat(ucfirst(Constructor.modelType)),
        edit: "<span class=\"ui-icon\" data-icon=\"action-edit\"><span></span></span><h3 class=\"ui-modal__dialog-title\">Edit ".concat(ucfirst(Constructor.modelType))
      };
      if (model && model.label) {
        titles.edit = "".concat(titles.edit, " <q>").concat(model.label, "</q>");
        titles.view = "".concat(titles.view, " <q>").concat(model.label, "</q>");
      }
      var title_in = parent && parent.label ? " in ".concat(ucfirst(parent.type), " <q>").concat(parent.label, "</q>") : '';
      var contents = {
        create: function create() {
          return Constructor.form(parent ? {
            rel: parent.id
          } : null);
        },
        edit: function edit() {
          return Constructor.form(model.data);
        }
      };
      var render = {
        template: 'modal',
        data: {
          id: id,
          classes: ["ui-modal--".concat(type)],
          mode: modes[mode],
          focusable: false,
          header: {
            custom: titles[mode] + title_in + '</h3>',
            controls: null
          },
          icons: {
            confirm: 'save'
          },
          i18n: {
            confirm: 'Save'
          }
        },
        as: {
          content: contents[mode]()
        }
      };
      if (Constructor.modalRender) Constructor.modalRender(render);
      var dom = UiTemplateRenderer.node(render)[0];
      dom.addEventListener('modal.confirm.confirm', function (event) {
        var data = Constructor.getFormData(dom);
        var result = Constructor.validate(data);
        if (result.valid !== true) {
          _this10.showInputErrors(dom, result.errors);
          event.preventDefault();
        }
      });
      dom.addEventListener('modal.initialized', function (event) {
        var modal = event.detail.target;
        Constructor.bindForm(dom, modal);
        Constructor.bind(dom, {
          type: type,
          model: model,
          mode: mode,
          parent: parent,
          modal: modal
        });
        event.detail.target.open = true;
      });
      dom.addEventListener('modal.hidden', function (event) {
        var data = Constructor.getFormData(dom);
        event.detail.target.dom.remove();
        if (event.detail.target.confirmed) {
          if (mode === 'create' && !model) {
            Application_classPrivateFieldGet(_view, _this10).createModel(Constructor, data, parent);
          } else if (mode === 'edit' && model) {
            Application_classPrivateFieldGet(_view, _this10).updateModel(model, data);
          }
        }
      });
      document.body.appendChild(dom);
      UiModalComponent.make(dom, {
        mode: modes[mode],
        easyHide: Application_classPrivateFieldGet(_settings, this).easyHideModals,
        focusResetOnHidden: false,
        focusLast: []
      }, [UiModalPluginAlert, UiModalPluginConfirm], this, this.debug);
    }
  }, {
    key: "showConfirmModal",
    value: function showConfirmModal(title, content, confirmed) {
      var render = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var bind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      if (document.getElementById('modal-confirm')) return;
      var data = {
        template: 'modal',
        data: {
          id: "modal-confirm-".concat(strand_strand()),
          mode: 'confirm',
          focusable: false,
          header: {
            title: title
          }
        },
        as: {
          content: content
        }
      };
      if (render) render(data);
      var dom = UiTemplateRenderer.node(data)[0];
      if (bind) bind(dom);
      dom.addEventListener('modal.initialized', function (event) {
        event.detail.target.open = true;
      });
      dom.addEventListener('modal.hidden', function (event) {
        event.detail.target.dom.remove();
        if (event.detail.target.confirmed) confirmed(event);
      });
      document.body.appendChild(dom);
      return UiModalComponent.make(dom, {
        mode: 'confirm',
        easyHide: Application_classPrivateFieldGet(_settings, this).easyHideModals
      }, [UiModalPluginConfirm], this, this.debug);
    }
  }, {
    key: "showAlertModal",
    value: function showAlertModal(title, content) {
      var closed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var render = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      var bind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
      if (document.getElementById('modal-alert')) return;
      var data = {
        template: 'modal',
        data: {
          id: 'modal-alert',
          mode: 'alert',
          focusable: false,
          header: {
            title: title
          }
        },
        as: {
          content: content
        }
      };
      if (render) render(data);
      var dom = UiTemplateRenderer.node(data)[0];
      if (bind) bind(dom);
      dom.addEventListener('modal.initialized', function (event) {
        event.detail.target.open = true;
      });
      dom.addEventListener('modal.hidden', function (event) {
        event.detail.target.dom.remove();
        if (closed) closed(event);
      });
      document.body.appendChild(dom);
      UiModalComponent.make(dom, {
        mode: 'alert',
        easyHide: Application_classPrivateFieldGet(_settings, this).easyHideModals
      }, [UiModalPluginAlert], this, this.debug);
    }

    /**
     * Select action buttons
     * @param {string} action - Action name
     * @param {HTMLElement} dom - Dom context
     * @return {NodeList} - Selected action buttons
     */
  }, {
    key: "selectAction",
    value: function selectAction(action, dom) {
      return dom.querySelectorAll("[data-action=\"".concat(action, "\"]"));
    }

    /**
     * Bind action handlers
     * @param {Object} handlers - Actions object
     * @param {HTMLElement} dom - Dom context
     * @param {Object} params - Handler arguments
     * @param {null|Function} each - Run for each action element
     * @return {NodeList} - Selected action buttons
     */
  }, {
    key: "bindActions",
    value: function bindActions(handlers, dom) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var each = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      if (!isPojo_isPojo(handlers)) throw new ApplicationException('Invalid action handlers definition');
      var buttons = dom.querySelectorAll('[data-action]');
      for (var i = 0; i < buttons.length; i++) {
        var button = buttons[i];
        var action = button.getAttribute('data-action');
        if (handlers[action]) {
          params.button = button;
          params.action = action;
          var wrapped = this.wrapActionHandlers(handlers[action], params);
          bindNodeList_bindNodeList([button], wrapped);
        } else if (this.debug) {
          this.debug.warn(this.constructor.name + ".bindActions(".concat(action, ") action not defined"));
        }
        if (each) each(button, action);
      }
      return buttons;
    }

    /**
     * Wrap action handlers for params
     * @param {Function[]} handlers - Action handlers
     * @param {Object} params - Params object
     * @return {Function[]} - Wrapped handlers
     */
  }, {
    key: "wrapActionHandlers",
    value: function wrapActionHandlers(handlers) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var wrapped = [];
      var _loop = function _loop() {
        var handler = handlers[i].slice();
        var original_handler = handler[1];
        handler[1] = function (event) {
          original_handler(event, params);
        };
        wrapped.push(handler);
      };
      for (var i = 0; i < handlers.length; i++) {
        _loop();
      }
      return wrapped;
    }
  }]);
}(EventDispatcher_EventDispatcher);
;// CONCATENATED MODULE: ./Helpers/setScrollBarWidth.js
/**
 * Requires
 */


/**
 * Set current device scrollbar width
 * @return {void}
 */
function setScrollBarWidth() {
  document.documentElement.style.setProperty('--scrollbar-width', getScrollbarWidth() + 'px');
}
;// CONCATENATED MODULE: ./Helpers/layoutHelpers.js
/**
 * Requires
 */



/**
 * Initialize layout helpers and bind events
 * @param {null|Console} debug - Debugger instance
 * @return {Scroller} - Scroll helper
 */
function initLayoutHelpers(debug) {
  // IOS/SAFARI is too stupid to focus a button on click
  bindNodeList_bindNodeList(document.querySelectorAll('[data-nav="show"], [data-nav="hide"]'), [['click', function (event) {
    event.preventDefault();
    this.focus();
  }]]);

  // Setup scroll helper
  var scr = new Scroller(null, debug);
  scr.config.offset = function () {
    var _document$getElementB, _document$getElementB2;
    return (_document$getElementB = (_document$getElementB2 = document.getElementById('header')) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.getBoundingClientRect().height) !== null && _document$getElementB !== void 0 ? _document$getElementB : 0;
  };

  // Resize helpers for global css variables
  window.addEventListener('resize', debounce(function () {
    setScrollBarWidth();
  }));
  return scr;
}

/**
 * Run layout helpers update
 * @return {void}
 */
function readyLayoutHelpers() {
  setScrollBarWidth();
}
;// CONCATENATED MODULE: ./app.js
/**
 * Requires
 */




/**
 * DEBUG MODE
 * @private
 * @type {null|Console}
 */
var DEBUG_MODE = location.hash === '#debug' ? console : null;

/**
 * Allow display of custom install-button
 * @url https://web.dev/articles/customize-install
 */
window.addEventListener('beforeinstallprompt', function (event) {
  event.preventDefault();
  window._deferredInstallPrompt = event;
  var install_button = document.querySelector('#header [data-action="app.install"]');
  if (install_button) install_button.style.display = '';
});

/**
 * Initialize helpers
 * @type {Scroller}
 */
var scr = initLayoutHelpers(DEBUG_MODE);

/**
 * Initialize application
 * @private
 * @type {Application}
 */
var app = new Application('1.0.0', 'https://squirrel-forge.github.io/nutztash/', scr, DEBUG_MODE);
docReady(function () {
  var _app$boot;
  readyLayoutHelpers();
  (_app$boot = app.boot()) === null || _app$boot === void 0 ? void 0 : _app$boot.catch(function (e) {
    window.console.error('Please report the following bug to: https://github.com/squirrel-forge/nutztash/issues');
    window.console.error(e);
    alert("You have encountered a bug \"".concat(e.toString(), "\""));
  });
});
/******/ })()
;